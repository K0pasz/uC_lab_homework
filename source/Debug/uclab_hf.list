
uclab_hf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004150  08004150  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005040  200000ac  08004204  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050ec  08004204  000250ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c6b  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002701  00000000  00000000  00031d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00034448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ee8  00000000  00000000  00036090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ace  00000000  00000000  00058f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b3d  00000000  00000000  0006ba46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e583  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004030  00000000  00000000  0013e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040d8 	.word	0x080040d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	080040d8 	.word	0x080040d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Write7segsel>:
#include "7seg.h"

//Function to write a specific digit on the display
void Write7segsel(GPIO_PinState sel1, GPIO_PinState sel0)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71bb      	strb	r3, [r7, #6]
	if(sel0 == GPIO_PIN_SET)
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d106      	bne.n	80005e8 <Write7segsel+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <Write7segsel+0x58>)
 80005e2:	f001 f9c9 	bl	8001978 <HAL_GPIO_WritePin>
 80005e6:	e005      	b.n	80005f4 <Write7segsel+0x30>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <Write7segsel+0x58>)
 80005f0:	f001 f9c2 	bl	8001978 <HAL_GPIO_WritePin>

	if(sel1 == GPIO_PIN_SET)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d106      	bne.n	8000608 <Write7segsel+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <Write7segsel+0x58>)
 8000602:	f001 f9b9 	bl	8001978 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}
 8000606:	e005      	b.n	8000614 <Write7segsel+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <Write7segsel+0x58>)
 8000610:	f001 f9b2 	bl	8001978 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020000 	.word	0x40020000

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b50      	ldr	r3, [pc, #320]	; (800077c <MX_GPIO_Init+0x15c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a4f      	ldr	r2, [pc, #316]	; (800077c <MX_GPIO_Init+0x15c>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b4d      	ldr	r3, [pc, #308]	; (800077c <MX_GPIO_Init+0x15c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b49      	ldr	r3, [pc, #292]	; (800077c <MX_GPIO_Init+0x15c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a48      	ldr	r2, [pc, #288]	; (800077c <MX_GPIO_Init+0x15c>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b46      	ldr	r3, [pc, #280]	; (800077c <MX_GPIO_Init+0x15c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b42      	ldr	r3, [pc, #264]	; (800077c <MX_GPIO_Init+0x15c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a41      	ldr	r2, [pc, #260]	; (800077c <MX_GPIO_Init+0x15c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b3f      	ldr	r3, [pc, #252]	; (800077c <MX_GPIO_Init+0x15c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b3b      	ldr	r3, [pc, #236]	; (800077c <MX_GPIO_Init+0x15c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a3a      	ldr	r2, [pc, #232]	; (800077c <MX_GPIO_Init+0x15c>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b38      	ldr	r3, [pc, #224]	; (800077c <MX_GPIO_Init+0x15c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80006ac:	4834      	ldr	r0, [pc, #208]	; (8000780 <MX_GPIO_Init+0x160>)
 80006ae:	f001 f963 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006b8:	4832      	ldr	r0, [pc, #200]	; (8000784 <MX_GPIO_Init+0x164>)
 80006ba:	f001 f95d 	bl	8001978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	482b      	ldr	r0, [pc, #172]	; (8000784 <MX_GPIO_Init+0x164>)
 80006d6:	f000 ffa3 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80006da:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4823      	ldr	r0, [pc, #140]	; (8000780 <MX_GPIO_Init+0x160>)
 80006f4:	f000 ff94 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f8:	2340      	movs	r3, #64	; 0x40
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	481d      	ldr	r0, [pc, #116]	; (8000780 <MX_GPIO_Init+0x160>)
 800070c:	f000 ff88 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4816      	ldr	r0, [pc, #88]	; (8000780 <MX_GPIO_Init+0x160>)
 8000726:	f000 ff7b 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800072a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4810      	ldr	r0, [pc, #64]	; (8000784 <MX_GPIO_Init+0x164>)
 8000744:	f000 ff6c 	bl	8001620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000748:	f44f 7340 	mov.w	r3, #768	; 0x300
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_GPIO_Init+0x160>)
 8000760:	f000 ff5e 	bl	8001620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2017      	movs	r0, #23
 800076a:	f000 ff22 	bl	80015b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800076e:	2017      	movs	r0, #23
 8000770:	f000 ff3b 	bl	80015ea <HAL_NVIC_EnableIRQ>

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	; 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	40020800 	.word	0x40020800

08000788 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
//Callback for the EXTI ITs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
	//If the sensor detects a step, it gives us an IT
	//Here we increase the step counter, save the timestamp and send it on USART to the PC
	if(GPIO_Pin == GPIO_PIN_9)
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000798:	d137      	bne.n	800080a <HAL_GPIO_EXTI_Callback+0x82>
	{
		//increasing the step counter
		digitindex0++;
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <HAL_GPIO_EXTI_Callback+0xd0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a2d      	ldr	r2, [pc, #180]	; (8000858 <HAL_GPIO_EXTI_Callback+0xd0>)
 80007a2:	6013      	str	r3, [r2, #0]

		//saving the timestamp
		steptimes[steptimesindex] = time;
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <HAL_GPIO_EXTI_Callback+0xd4>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <HAL_GPIO_EXTI_Callback+0xd8>)
 80007ac:	8819      	ldrh	r1, [r3, #0]
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <HAL_GPIO_EXTI_Callback+0xdc>)
 80007b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		//putting the steps into a string
		sprintf(steps, "%d ", steptimesindex+1);
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <HAL_GPIO_EXTI_Callback+0xd4>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	3301      	adds	r3, #1
 80007ba:	461a      	mov	r2, r3
 80007bc:	492a      	ldr	r1, [pc, #168]	; (8000868 <HAL_GPIO_EXTI_Callback+0xe0>)
 80007be:	482b      	ldr	r0, [pc, #172]	; (800086c <HAL_GPIO_EXTI_Callback+0xe4>)
 80007c0:	f003 f81c 	bl	80037fc <siprintf>

		//sending it out on USART
		HAL_UART_Transmit(&huart2, (uint8_t*) steps, strlen(steps), -1);
 80007c4:	4829      	ldr	r0, [pc, #164]	; (800086c <HAL_GPIO_EXTI_Callback+0xe4>)
 80007c6:	f7ff fd23 	bl	8000210 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	4926      	ldr	r1, [pc, #152]	; (800086c <HAL_GPIO_EXTI_Callback+0xe4>)
 80007d4:	4826      	ldr	r0, [pc, #152]	; (8000870 <HAL_GPIO_EXTI_Callback+0xe8>)
 80007d6:	f002 fc6a 	bl	80030ae <HAL_UART_Transmit>

		//putting the time into a string
		sprintf(timestampstr, "%d\r\n", time);
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <HAL_GPIO_EXTI_Callback+0xd8>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	4924      	ldr	r1, [pc, #144]	; (8000874 <HAL_GPIO_EXTI_Callback+0xec>)
 80007e2:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007e4:	f003 f80a 	bl	80037fc <siprintf>

		//sending it out on USART
		HAL_UART_Transmit(&huart2, (uint8_t*) timestampstr, strlen(timestampstr), -1);
 80007e8:	4823      	ldr	r0, [pc, #140]	; (8000878 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007ea:	f7ff fd11 	bl	8000210 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	4920      	ldr	r1, [pc, #128]	; (8000878 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007f8:	481d      	ldr	r0, [pc, #116]	; (8000870 <HAL_GPIO_EXTI_Callback+0xe8>)
 80007fa:	f002 fc58 	bl	80030ae <HAL_UART_Transmit>

		//of course, at last, we have to increment the index
		steptimesindex++;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000808:	801a      	strh	r2, [r3, #0]
	}

	//If we push the button we have to zero the steps and the timestamps
	if(GPIO_Pin == GPIO_PIN_7)
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2b80      	cmp	r3, #128	; 0x80
 800080e:	d11e      	bne.n	800084e <HAL_GPIO_EXTI_Callback+0xc6>
	{
		digitindex0 = 0;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
		digitindex1 = 0;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
		digitindex2 = 0;
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_GPIO_EXTI_Callback+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
		digitindex3 = 0;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<10000; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e007      	b.n	800083e <HAL_GPIO_EXTI_Callback+0xb6>
		{
			steptimes[i] = 0;
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2100      	movs	r1, #0
 8000834:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i<10000; i++)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3301      	adds	r3, #1
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f242 720f 	movw	r2, #9999	; 0x270f
 8000844:	4293      	cmp	r3, r2
 8000846:	ddf2      	ble.n	800082e <HAL_GPIO_EXTI_Callback+0xa6>
		}

		//Optional:
		time = 0;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_GPIO_EXTI_Callback+0xd8>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
	}
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000c8 	.word	0x200000c8
 800085c:	20004ef6 	.word	0x20004ef6
 8000860:	20004ef8 	.word	0x20004ef8
 8000864:	200000d8 	.word	0x200000d8
 8000868:	080040f0 	.word	0x080040f0
 800086c:	20004efc 	.word	0x20004efc
 8000870:	20005094 	.word	0x20005094
 8000874:	080040f4 	.word	0x080040f4
 8000878:	20004f3c 	.word	0x20004f3c
 800087c:	200000cc 	.word	0x200000cc
 8000880:	200000d0 	.word	0x200000d0
 8000884:	200000d4 	.word	0x200000d4

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fd44 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f830 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f7ff fec4 	bl	8000620 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000898:	f000 f95c 	bl	8000b54 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800089c:	f000 fca0 	bl	80011e0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80008a0:	f000 f98e 	bl	8000bc0 <MX_SPI3_Init>
  MX_TIM10_Init();
 80008a4:	f000 fb3c 	bl	8000f20 <MX_TIM10_Init>
  MX_TIM11_Init();
 80008a8:	f000 fb5e 	bl	8000f68 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //Starting the timers with interrupts
  HAL_TIM_Base_Start_IT(&htim10);
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <main+0x5c>)
 80008ae:	f002 f95d 	bl	8002b6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80008b2:	480d      	ldr	r0, [pc, #52]	; (80008e8 <main+0x60>)
 80008b4:	f002 f95a 	bl	8002b6c <HAL_TIM_Base_Start_IT>

  //Disabling the CS for the sensor
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <main+0x64>)
 80008c0:	f001 f85a 	bl	8001978 <HAL_GPIO_WritePin>

  //Initializing the sensor
  SensorInit();
 80008c4:	f000 f88a 	bl	80009dc <SensorInit>

  //Enable the 7seg displays (we always want to see the steps on it)
  //Shift register LE
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <main+0x68>)
 80008d0:	f001 f852 	bl	8001978 <HAL_GPIO_WritePin>

  //Shift register OE
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <main+0x64>)
 80008dc:	f001 f84c 	bl	8001978 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <main+0x58>
 80008e2:	bf00      	nop
 80008e4:	20005004 	.word	0x20005004
 80008e8:	2000504c 	.word	0x2000504c
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020000 	.word	0x40020000

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2234      	movs	r2, #52	; 0x34
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f002 ff72 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <SystemClock_Config+0xd4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <SystemClock_Config+0xd4>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <SystemClock_Config+0xd4>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000934:	2300      	movs	r3, #0
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <SystemClock_Config+0xd8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <SystemClock_Config+0xd8>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000954:	2302      	movs	r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000958:	2301      	movs	r3, #1
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2310      	movs	r3, #16
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000968:	2310      	movs	r3, #16
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800096c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000970:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000972:	2304      	movs	r3, #4
 8000974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb74 	bl	8002070 <HAL_RCC_OscConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800098e:	f000 f81f 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	230f      	movs	r3, #15
 8000994:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000996:	2302      	movs	r3, #2
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f814 	bl	80019dc <HAL_RCC_ClockConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ba:	f000 f809 	bl	80009d0 <Error_Handler>
  }
}
 80009be:	bf00      	nop
 80009c0:	3750      	adds	r7, #80	; 0x50
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <SensorInit>:
#include "sensor.h"

//Function to initialize the sensor
//We write the specific bits to the required registers
void SensorInit()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e6:	484d      	ldr	r0, [pc, #308]	; (8000b1c <SensorInit+0x140>)
 80009e8:	f000 ffc6 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL1_XLAddress, 1, -1);
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	2201      	movs	r2, #1
 80009f2:	494b      	ldr	r1, [pc, #300]	; (8000b20 <SensorInit+0x144>)
 80009f4:	484b      	ldr	r0, [pc, #300]	; (8000b24 <SensorInit+0x148>)
 80009f6:	f001 fe62 	bl	80026be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL1_XLData, 1, -1);
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	2201      	movs	r2, #1
 8000a00:	4949      	ldr	r1, [pc, #292]	; (8000b28 <SensorInit+0x14c>)
 8000a02:	4848      	ldr	r0, [pc, #288]	; (8000b24 <SensorInit+0x148>)
 8000a04:	f001 fe5b 	bl	80026be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0e:	4843      	ldr	r0, [pc, #268]	; (8000b1c <SensorInit+0x140>)
 8000a10:	f000 ffb2 	bl	8001978 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4840      	ldr	r0, [pc, #256]	; (8000b1c <SensorInit+0x140>)
 8000a1c:	f000 ffac 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL10_CAddress, 1, -1);
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	2201      	movs	r2, #1
 8000a26:	4941      	ldr	r1, [pc, #260]	; (8000b2c <SensorInit+0x150>)
 8000a28:	483e      	ldr	r0, [pc, #248]	; (8000b24 <SensorInit+0x148>)
 8000a2a:	f001 fe48 	bl	80026be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL10_CData, 1, -1);
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	2201      	movs	r2, #1
 8000a34:	493e      	ldr	r1, [pc, #248]	; (8000b30 <SensorInit+0x154>)
 8000a36:	483b      	ldr	r0, [pc, #236]	; (8000b24 <SensorInit+0x148>)
 8000a38:	f001 fe41 	bl	80026be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4836      	ldr	r0, [pc, #216]	; (8000b1c <SensorInit+0x140>)
 8000a44:	f000 ff98 	bl	8001978 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4e:	4833      	ldr	r0, [pc, #204]	; (8000b1c <SensorInit+0x140>)
 8000a50:	f000 ff92 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorTAPCFGAddress, 1, -1);
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4936      	ldr	r1, [pc, #216]	; (8000b34 <SensorInit+0x158>)
 8000a5c:	4831      	ldr	r0, [pc, #196]	; (8000b24 <SensorInit+0x148>)
 8000a5e:	f001 fe2e 	bl	80026be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorTAPCFGData, 1, -1);
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	2201      	movs	r2, #1
 8000a68:	4933      	ldr	r1, [pc, #204]	; (8000b38 <SensorInit+0x15c>)
 8000a6a:	482e      	ldr	r0, [pc, #184]	; (8000b24 <SensorInit+0x148>)
 8000a6c:	f001 fe27 	bl	80026be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <SensorInit+0x140>)
 8000a78:	f000 ff7e 	bl	8001978 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	4826      	ldr	r0, [pc, #152]	; (8000b1c <SensorInit+0x140>)
 8000a84:	f000 ff78 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorINT1_CTRLAddress, 1, -1);
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	492b      	ldr	r1, [pc, #172]	; (8000b3c <SensorInit+0x160>)
 8000a90:	4824      	ldr	r0, [pc, #144]	; (8000b24 <SensorInit+0x148>)
 8000a92:	f001 fe14 	bl	80026be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorINT1_CTRLData, 1, -1);
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4928      	ldr	r1, [pc, #160]	; (8000b40 <SensorInit+0x164>)
 8000a9e:	4821      	ldr	r0, [pc, #132]	; (8000b24 <SensorInit+0x148>)
 8000aa0:	f001 fe0d 	bl	80026be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <SensorInit+0x140>)
 8000aac:	f000 ff64 	bl	8001978 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	4819      	ldr	r0, [pc, #100]	; (8000b1c <SensorInit+0x140>)
 8000ab8:	f000 ff5e 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorSTEP_COUNT_DELTAAddress, 1, -1);
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4920      	ldr	r1, [pc, #128]	; (8000b44 <SensorInit+0x168>)
 8000ac4:	4817      	ldr	r0, [pc, #92]	; (8000b24 <SensorInit+0x148>)
 8000ac6:	f001 fdfa 	bl	80026be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorSTEP_COUNT_DELTAData, 1, -1);
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	2201      	movs	r2, #1
 8000ad0:	491d      	ldr	r1, [pc, #116]	; (8000b48 <SensorInit+0x16c>)
 8000ad2:	4814      	ldr	r0, [pc, #80]	; (8000b24 <SensorInit+0x148>)
 8000ad4:	f001 fdf3 	bl	80026be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	480f      	ldr	r0, [pc, #60]	; (8000b1c <SensorInit+0x140>)
 8000ae0:	f000 ff4a 	bl	8001978 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <SensorInit+0x140>)
 8000aec:	f000 ff44 	bl	8001978 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorINT2_CTRLAddress, 1, -1);
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	2201      	movs	r2, #1
 8000af6:	4915      	ldr	r1, [pc, #84]	; (8000b4c <SensorInit+0x170>)
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <SensorInit+0x148>)
 8000afa:	f001 fde0 	bl	80026be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorINT2_CTRLData, 1, -1);
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2201      	movs	r2, #1
 8000b04:	4912      	ldr	r1, [pc, #72]	; (8000b50 <SensorInit+0x174>)
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <SensorInit+0x148>)
 8000b08:	f001 fdd9 	bl	80026be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <SensorInit+0x140>)
 8000b14:	f000 ff30 	bl	8001978 <HAL_GPIO_WritePin>


}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	20000034 	.word	0x20000034
 8000b24:	20004fa8 	.word	0x20004fa8
 8000b28:	20000035 	.word	0x20000035
 8000b2c:	20000032 	.word	0x20000032
 8000b30:	20000033 	.word	0x20000033
 8000b34:	20000030 	.word	0x20000030
 8000b38:	20000031 	.word	0x20000031
 8000b3c:	2000002e 	.word	0x2000002e
 8000b40:	2000002f 	.word	0x2000002f
 8000b44:	20000036 	.word	0x20000036
 8000b48:	20000037 	.word	0x20000037
 8000b4c:	20000038 	.word	0x20000038
 8000b50:	20000039 	.word	0x20000039

08000b54 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <MX_SPI2_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_SPI2_Init+0x64>)
 8000ba6:	f001 fd01 	bl	80025ac <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bb0:	f7ff ff0e 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20004f50 	.word	0x20004f50
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <MX_SPI3_Init+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000c0c:	220a      	movs	r2, #10
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_SPI3_Init+0x64>)
 8000c12:	f001 fccb 	bl	80025ac <HAL_SPI_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c1c:	f7ff fed8 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20004fa8 	.word	0x20004fa8
 8000c28:	40003c00 	.word	0x40003c00

08000c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a51      	ldr	r2, [pc, #324]	; (8000d90 <HAL_SPI_MspInit+0x164>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d14b      	bne.n	8000ce6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
 8000c52:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a4f      	ldr	r2, [pc, #316]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	4b49      	ldr	r3, [pc, #292]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a41      	ldr	r2, [pc, #260]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4836      	ldr	r0, [pc, #216]	; (8000d98 <HAL_SPI_MspInit+0x16c>)
 8000cbe:	f000 fcaf 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	482f      	ldr	r0, [pc, #188]	; (8000d9c <HAL_SPI_MspInit+0x170>)
 8000ce0:	f000 fc9e 	bl	8001620 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ce4:	e04f      	b.n	8000d86 <HAL_SPI_MspInit+0x15a>
  else if(spiHandle->Instance==SPI3)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a2d      	ldr	r2, [pc, #180]	; (8000da0 <HAL_SPI_MspInit+0x174>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d14a      	bne.n	8000d86 <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_SPI_MspInit+0x168>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d54:	2307      	movs	r3, #7
 8000d56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480f      	ldr	r0, [pc, #60]	; (8000d9c <HAL_SPI_MspInit+0x170>)
 8000d60:	f000 fc5e 	bl	8001620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d76:	2306      	movs	r3, #6
 8000d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <HAL_SPI_MspInit+0x16c>)
 8000d82:	f000 fc4d 	bl	8001620 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	; 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40003800 	.word	0x40003800
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40003c00 	.word	0x40003c00

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de2:	2007      	movs	r0, #7
 8000de4:	f000 fbda 	bl	800159c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 fabc 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	f000 fdad 	bl	80019ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e56:	f000 fda9 	bl	80019ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000e5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e5e:	f000 fda5 	bl	80019ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e6e:	f001 feed 	bl	8002c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20005004 	.word	0x20005004

08000e7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e82:	f001 fee3 	bl	8002c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000504c 	.word	0x2000504c

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f002 fc6a 	bl	8003798 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20020000 	.word	0x20020000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20005000 	.word	0x20005000
 8000ef8:	200050f0 	.word	0x200050f0

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <MX_TIM10_Init+0x44>)
 8000f28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000 - 1;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f2c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f30:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10 - 1;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f3a:	2209      	movs	r2, #9
 8000f3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_TIM10_Init+0x40>)
 8000f4c:	f001 fdbe 	bl	8002acc <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f56:	f7ff fd3b 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20005004 	.word	0x20005004
 8000f64:	40014400 	.word	0x40014400

08000f68 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <MX_TIM11_Init+0x44>)
 8000f70:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8000 - 1;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f74:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f78:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000 - 1;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f82:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f86:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_TIM11_Init+0x40>)
 8000f96:	f001 fd99 	bl	8002acc <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000fa0:	f7ff fd16 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000504c 	.word	0x2000504c
 8000fac:	40014800 	.word	0x40014800

08000fb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <HAL_TIM_Base_MspInit+0x80>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d116      	bne.n	8000ff0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_TIM_Base_MspInit+0x84>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_TIM_Base_MspInit+0x84>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2019      	movs	r0, #25
 8000fe4:	f000 fae5 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fe8:	2019      	movs	r0, #25
 8000fea:	f000 fafe 	bl	80015ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000fee:	e01a      	b.n	8001026 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_TIM_Base_MspInit+0x88>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d115      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_TIM_Base_MspInit+0x84>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <HAL_TIM_Base_MspInit+0x84>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_TIM_Base_MspInit+0x84>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	201a      	movs	r0, #26
 800101c:	f000 fac9 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001020:	201a      	movs	r0, #26
 8001022:	f000 fae2 	bl	80015ea <HAL_NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40014400 	.word	0x40014400
 8001034:	40023800 	.word	0x40023800
 8001038:	40014800 	.word	0x40014800

0800103c <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */
//Callback for the timer interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	//1 kHz interrupt to shift between the 4 display and send the numbers to them
	//With this frequency we see the displays as if all of them are lit at the same time
	//(of course just one is lit at a time)
	if(htim == &htim10)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001048:	4293      	cmp	r3, r2
 800104a:	f040 809d 	bne.w	8001188 <HAL_TIM_PeriodElapsedCallback+0x14c>
	{
		//Shifting between the displays and writing out the data
		if(is7segsel1 == GPIO_PIN_RESET && is7segsel0 == GPIO_PIN_RESET)
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d110      	bne.n	8001078 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001056:	4b55      	ldr	r3, [pc, #340]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				Write7segsel(GPIO_PIN_RESET, GPIO_PIN_SET);
 800105e:	2101      	movs	r1, #1
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff faaf 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display2[digitindex2], 1, 0);
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a52      	ldr	r2, [pc, #328]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800106c:	1899      	adds	r1, r3, r2
 800106e:	2300      	movs	r3, #0
 8001070:	2201      	movs	r2, #1
 8001072:	4851      	ldr	r0, [pc, #324]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001074:	f001 fb23 	bl	80026be <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_RESET && is7segsel0 == GPIO_PIN_SET)
 8001078:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d110      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x66>
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10c      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				Write7segsel(GPIO_PIN_SET, GPIO_PIN_RESET);
 8001088:	2100      	movs	r1, #0
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff fa9a 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display1[digitindex1], 1, 0);
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001096:	1899      	adds	r1, r3, r2
 8001098:	2300      	movs	r3, #0
 800109a:	2201      	movs	r2, #1
 800109c:	4846      	ldr	r0, [pc, #280]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800109e:	f001 fb0e 	bl	80026be <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_SET && is7segsel0 == GPIO_PIN_RESET)
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d110      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x90>
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10c      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x90>
			{
				Write7segsel(GPIO_PIN_SET, GPIO_PIN_SET);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff fa85 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display0[digitindex0], 1, 0);
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a42      	ldr	r2, [pc, #264]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010c0:	1899      	adds	r1, r3, r2
 80010c2:	2300      	movs	r3, #0
 80010c4:	2201      	movs	r2, #1
 80010c6:	483c      	ldr	r0, [pc, #240]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010c8:	f001 faf9 	bl	80026be <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_SET && is7segsel0 == GPIO_PIN_SET)
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d110      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0xba>
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10c      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				Write7segsel(GPIO_PIN_RESET, GPIO_PIN_RESET);
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fa70 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display3[digitindex3], 1, 0);
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a39      	ldr	r2, [pc, #228]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010ea:	1899      	adds	r1, r3, r2
 80010ec:	2300      	movs	r3, #0
 80010ee:	2201      	movs	r2, #1
 80010f0:	4831      	ldr	r0, [pc, #196]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010f2:	f001 fae4 	bl	80026be <HAL_SPI_Transmit>
			}


			is7segsel0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80010f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fa:	4836      	ldr	r0, [pc, #216]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010fc:	f000 fc24 	bl	8001948 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001106:	701a      	strb	r2, [r3, #0]
			is7segsel1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8001108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110c:	4831      	ldr	r0, [pc, #196]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800110e:	f000 fc1b 	bl	8001948 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001118:	701a      	strb	r2, [r3, #0]

		//Checking if a specific digit reaches the maximum value (9)
		//If a digit reaches 9, then it has to become 0 at the next incrementation and we must increment the higher one
		if(digitindex0 == 10)
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b0a      	cmp	r3, #10
 8001120:	d132      	bne.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			digitindex0 = 0;
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

			if(digitindex1 != 9)
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d005      	beq.n	800113c <HAL_TIM_PeriodElapsedCallback+0x100>
			{
				digitindex1++;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e025      	b.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x14c>
			}
			else
			{
				digitindex1 = 0;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]

				if(digitindex2 != 9)
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b09      	cmp	r3, #9
 8001148:	d005      	beq.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x11a>
				{
					digitindex2++;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e018      	b.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x14c>
				}
				else
				{
					digitindex2 = 0;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]

					if(digitindex3 != 9)
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d005      	beq.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x134>
					{
						digitindex3++;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x14c>
					}
					else
					{
						digitindex0 = 0;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
						digitindex1 = 0;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
						digitindex2 = 0;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
						digitindex3 = 0;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
		}
	}

	//The tim11 generates an interrupt every 1 second, here we just increment the time variable
	//If the sensor detects a step we save the value of this time variable into the detected step's timestamp
	if(htim == &htim11)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d105      	bne.n	800119c <HAL_TIM_PeriodElapsedCallback+0x160>
		{
			time++;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800119a:	801a      	strh	r2, [r3, #0]
		}

}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20005004 	.word	0x20005004
 80011a8:	20004f4d 	.word	0x20004f4d
 80011ac:	20004f4c 	.word	0x20004f4c
 80011b0:	200000d0 	.word	0x200000d0
 80011b4:	20000018 	.word	0x20000018
 80011b8:	20004f50 	.word	0x20004f50
 80011bc:	200000cc 	.word	0x200000cc
 80011c0:	2000000c 	.word	0x2000000c
 80011c4:	200000c8 	.word	0x200000c8
 80011c8:	20000000 	.word	0x20000000
 80011cc:	200000d4 	.word	0x200000d4
 80011d0:	20000024 	.word	0x20000024
 80011d4:	40020000 	.word	0x40020000
 80011d8:	2000504c 	.word	0x2000504c
 80011dc:	20004ef8 	.word	0x20004ef8

080011e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_USART2_UART_Init+0x50>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_USART2_UART_Init+0x4c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_USART2_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_USART2_UART_Init+0x4c>)
 8001218:	f001 fefc 	bl	8003014 <HAL_UART_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001222:	f7ff fbd5 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20005094 	.word	0x20005094
 8001230:	40004400 	.word	0x40004400

08001234 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x84>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12b      	bne.n	80012ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_MspInit+0x88>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a10      	ldr	r2, [pc, #64]	; (80012bc <HAL_UART_MspInit+0x88>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_UART_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800128e:	230c      	movs	r3, #12
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129e:	2307      	movs	r3, #7
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_UART_MspInit+0x8c>)
 80012aa:	f000 f9b9 	bl	8001620 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40004400 	.word	0x40004400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e0:	4c0b      	ldr	r4, [pc, #44]	; (8001310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ee:	f7ff fe05 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f002 fa57 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fac7 	bl	8000888 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001308:	08004158 	.word	0x08004158
  ldr r2, =_sbss
 800130c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001310:	200050ec 	.word	0x200050ec

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_Init+0x40>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x40>)
 800132e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x40>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f92b 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fd2a 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f943 	bl	8001606 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f90b 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000003c 	.word	0x2000003c
 80013b4:	20000044 	.word	0x20000044
 80013b8:	20000040 	.word	0x20000040

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000044 	.word	0x20000044
 80013e0:	200050d8 	.word	0x200050d8

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200050d8 	.word	0x200050d8

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff29 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff3e 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff8e 	bl	80014f0 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff31 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e165      	b.n	8001908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8154 	bne.w	8001902 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d005      	beq.n	8001672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166e:	2b02      	cmp	r3, #2
 8001670:	d130      	bne.n	80016d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80ae 	beq.w	8001902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <HAL_GPIO_Init+0x300>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a5c      	ldr	r2, [pc, #368]	; (8001920 <HAL_GPIO_Init+0x300>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <HAL_GPIO_Init+0x300>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c2:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_GPIO_Init+0x304>)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	220f      	movs	r2, #15
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_GPIO_Init+0x308>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x21a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4e      	ldr	r2, [pc, #312]	; (800192c <HAL_GPIO_Init+0x30c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x216>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x310>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x212>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x314>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x20e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_GPIO_Init+0x318>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x20a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4a      	ldr	r2, [pc, #296]	; (800193c <HAL_GPIO_Init+0x31c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x206>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a49      	ldr	r2, [pc, #292]	; (8001940 <HAL_GPIO_Init+0x320>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x202>
 800181e:	2306      	movs	r3, #6
 8001820:	e00c      	b.n	800183c <HAL_GPIO_Init+0x21c>
 8001822:	2307      	movs	r3, #7
 8001824:	e00a      	b.n	800183c <HAL_GPIO_Init+0x21c>
 8001826:	2305      	movs	r3, #5
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x21c>
 800182a:	2304      	movs	r3, #4
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x21c>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x21c>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x21c>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x21c>
 800183a:	2300      	movs	r3, #0
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184c:	4935      	ldr	r1, [pc, #212]	; (8001924 <HAL_GPIO_Init+0x304>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <HAL_GPIO_Init+0x324>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187e:	4a31      	ldr	r2, [pc, #196]	; (8001944 <HAL_GPIO_Init+0x324>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_GPIO_Init+0x324>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_GPIO_Init+0x324>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ae:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_GPIO_Init+0x324>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <HAL_GPIO_Init+0x324>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_GPIO_Init+0x324>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fc:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_GPIO_Init+0x324>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	f67f ae96 	bls.w	800163c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40013800 	.word	0x40013800
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	40020800 	.word	0x40020800
 8001934:	40020c00 	.word	0x40020c00
 8001938:	40021000 	.word	0x40021000
 800193c:	40021400 	.word	0x40021400
 8001940:	40021800 	.word	0x40021800
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e001      	b.n	800196a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fedc 	bl	8000788 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013c00 	.word	0x40013c00

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0cc      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d90c      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d044      	beq.n	8001afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d119      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e06f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e067      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4934      	ldr	r1, [pc, #208]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff fc8a 	bl	80013e4 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff fc86 	bl	80013e4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e04f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d20c      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f855 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fbea 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	080040fc 	.word	0x080040fc
 8001ba0:	2000003c 	.word	0x2000003c
 8001ba4:	20000040 	.word	0x20000040

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	2000003c 	.word	0x2000003c

08001bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc4:	f7ff fff0 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0a9b      	lsrs	r3, r3, #10
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	0800410c 	.word	0x0800410c

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bec:	f7ff ffdc 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0b5b      	lsrs	r3, r3, #13
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4903      	ldr	r1, [pc, #12]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	0800410c 	.word	0x0800410c

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b0ae      	sub	sp, #184	; 0xb8
 8001c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c36:	4bcb      	ldr	r3, [pc, #812]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	f200 8206 	bhi.w	8002050 <HAL_RCC_GetSysClockFreq+0x440>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c81 	.word	0x08001c81
 8001c50:	08002051 	.word	0x08002051
 8001c54:	08002051 	.word	0x08002051
 8001c58:	08002051 	.word	0x08002051
 8001c5c:	08001c89 	.word	0x08001c89
 8001c60:	08002051 	.word	0x08002051
 8001c64:	08002051 	.word	0x08002051
 8001c68:	08002051 	.word	0x08002051
 8001c6c:	08001c91 	.word	0x08001c91
 8001c70:	08002051 	.word	0x08002051
 8001c74:	08002051 	.word	0x08002051
 8001c78:	08002051 	.word	0x08002051
 8001c7c:	08001e81 	.word	0x08001e81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4bb9      	ldr	r3, [pc, #740]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c86:	e1e7      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c88:	4bb8      	ldr	r3, [pc, #736]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c8e:	e1e3      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c90:	4bb4      	ldr	r3, [pc, #720]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9c:	4bb1      	ldr	r3, [pc, #708]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d071      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca8:	4bae      	ldr	r3, [pc, #696]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001cb4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001cce:	4622      	mov	r2, r4
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	0159      	lsls	r1, r3, #5
 8001cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce0:	0150      	lsls	r0, r2, #5
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	1a51      	subs	r1, r2, r1
 8001cea:	6439      	str	r1, [r7, #64]	; 0x40
 8001cec:	4629      	mov	r1, r5
 8001cee:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d00:	4649      	mov	r1, r9
 8001d02:	018b      	lsls	r3, r1, #6
 8001d04:	4641      	mov	r1, r8
 8001d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	018a      	lsls	r2, r1, #6
 8001d0e:	4641      	mov	r1, r8
 8001d10:	1a51      	subs	r1, r2, r1
 8001d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d14:	4649      	mov	r1, r9
 8001d16:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d28:	4649      	mov	r1, r9
 8001d2a:	00cb      	lsls	r3, r1, #3
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d32:	4641      	mov	r1, r8
 8001d34:	00ca      	lsls	r2, r1, #3
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
 8001d42:	462b      	mov	r3, r5
 8001d44:	460a      	mov	r2, r1
 8001d46:	eb42 0303 	adc.w	r3, r2, r3
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d58:	4629      	mov	r1, r5
 8001d5a:	024b      	lsls	r3, r1, #9
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d62:	4621      	mov	r1, r4
 8001d64:	024a      	lsls	r2, r1, #9
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d7c:	f7fe faa0 	bl	80002c0 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d8a:	e067      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	2200      	movs	r2, #0
 8001d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d98:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001da6:	2300      	movs	r3, #0
 8001da8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001daa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001dae:	4622      	mov	r2, r4
 8001db0:	462b      	mov	r3, r5
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	1a51      	subs	r1, r2, r1
 8001dca:	62b9      	str	r1, [r7, #40]	; 0x28
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001de0:	4649      	mov	r1, r9
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	4641      	mov	r1, r8
 8001de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dea:	4641      	mov	r1, r8
 8001dec:	018a      	lsls	r2, r1, #6
 8001dee:	4641      	mov	r1, r8
 8001df0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e0e:	4692      	mov	sl, r2
 8001e10:	469b      	mov	fp, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	eb1a 0303 	adds.w	r3, sl, r3
 8001e18:	623b      	str	r3, [r7, #32]
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e2e:	4629      	mov	r1, r5
 8001e30:	028b      	lsls	r3, r1, #10
 8001e32:	4621      	mov	r1, r4
 8001e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e38:	4621      	mov	r1, r4
 8001e3a:	028a      	lsls	r2, r1, #10
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e44:	2200      	movs	r2, #0
 8001e46:	673b      	str	r3, [r7, #112]	; 0x70
 8001e48:	677a      	str	r2, [r7, #116]	; 0x74
 8001e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e4e:	f7fe fa37 	bl	80002c0 <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4613      	mov	r3, r2
 8001e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e7e:	e0eb      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8c:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d06b      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ea2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8001eac:	2300      	movs	r3, #0
 8001eae:	667b      	str	r3, [r7, #100]	; 0x64
 8001eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	f04f 0000 	mov.w	r0, #0
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	0159      	lsls	r1, r3, #5
 8001ec2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec6:	0150      	lsls	r0, r2, #5
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4621      	mov	r1, r4
 8001ece:	1a51      	subs	r1, r2, r1
 8001ed0:	61b9      	str	r1, [r7, #24]
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ee6:	4659      	mov	r1, fp
 8001ee8:	018b      	lsls	r3, r1, #6
 8001eea:	4651      	mov	r1, sl
 8001eec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef0:	4651      	mov	r1, sl
 8001ef2:	018a      	lsls	r2, r1, #6
 8001ef4:	4651      	mov	r1, sl
 8001ef6:	ebb2 0801 	subs.w	r8, r2, r1
 8001efa:	4659      	mov	r1, fp
 8001efc:	eb63 0901 	sbc.w	r9, r3, r1
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f14:	4690      	mov	r8, r2
 8001f16:	4699      	mov	r9, r3
 8001f18:	4623      	mov	r3, r4
 8001f1a:	eb18 0303 	adds.w	r3, r8, r3
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	462b      	mov	r3, r5
 8001f22:	eb49 0303 	adc.w	r3, r9, r3
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f34:	4629      	mov	r1, r5
 8001f36:	024b      	lsls	r3, r1, #9
 8001f38:	4621      	mov	r1, r4
 8001f3a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f3e:	4621      	mov	r1, r4
 8001f40:	024a      	lsls	r2, r1, #9
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f4e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f54:	f7fe f9b4 	bl	80002c0 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f62:	e065      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x420>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f70:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	2200      	movs	r2, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f80:	653b      	str	r3, [r7, #80]	; 0x50
 8001f82:	2300      	movs	r3, #0
 8001f84:	657b      	str	r3, [r7, #84]	; 0x54
 8001f86:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f8a:	4642      	mov	r2, r8
 8001f8c:	464b      	mov	r3, r9
 8001f8e:	f04f 0000 	mov.w	r0, #0
 8001f92:	f04f 0100 	mov.w	r1, #0
 8001f96:	0159      	lsls	r1, r3, #5
 8001f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f9c:	0150      	lsls	r0, r2, #5
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4641      	mov	r1, r8
 8001fa4:	1a51      	subs	r1, r2, r1
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	4649      	mov	r1, r9
 8001faa:	eb63 0301 	sbc.w	r3, r3, r1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	018b      	lsls	r3, r1, #6
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fc6:	4651      	mov	r1, sl
 8001fc8:	018a      	lsls	r2, r1, #6
 8001fca:	4651      	mov	r1, sl
 8001fcc:	1a54      	subs	r4, r2, r1
 8001fce:	4659      	mov	r1, fp
 8001fd0:	eb63 0501 	sbc.w	r5, r3, r1
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	00eb      	lsls	r3, r5, #3
 8001fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fe2:	00e2      	lsls	r2, r4, #3
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	4643      	mov	r3, r8
 8001fea:	18e3      	adds	r3, r4, r3
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	464b      	mov	r3, r9
 8001ff0:	eb45 0303 	adc.w	r3, r5, r3
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002002:	4629      	mov	r1, r5
 8002004:	028b      	lsls	r3, r1, #10
 8002006:	4621      	mov	r1, r4
 8002008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800200c:	4621      	mov	r1, r4
 800200e:	028a      	lsls	r2, r1, #10
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002018:	2200      	movs	r2, #0
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
 800201c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800201e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002022:	f7fe f94d 	bl	80002c0 <__aeabi_uldivmod>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4613      	mov	r3, r2
 800202c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_GetSysClockFreq+0x458>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	0f1b      	lsrs	r3, r3, #28
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800203e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800204e:	e003      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002058:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800205c:	4618      	mov	r0, r3
 800205e:	37b8      	adds	r7, #184	; 0xb8
 8002060:	46bd      	mov	sp, r7
 8002062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400

08002070 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e28d      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 8083 	beq.w	8002196 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002090:	4b94      	ldr	r3, [pc, #592]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b04      	cmp	r3, #4
 800209a:	d019      	beq.n	80020d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800209c:	4b91      	ldr	r3, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020a8:	4b8e      	ldr	r3, [pc, #568]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b84      	ldr	r3, [pc, #528]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x124>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e25a      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x90>
 80020f2:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a7b      	ldr	r2, [pc, #492]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xcc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0xb4>
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a75      	ldr	r2, [pc, #468]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b73      	ldr	r3, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a72      	ldr	r2, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xcc>
 8002124:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a6b      	ldr	r2, [pc, #428]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f94e 	bl	80013e4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff f94a 	bl	80013e4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e21f      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xdc>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff f93a 	bl	80013e4 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f936 	bl	80013e4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e20b      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x104>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d06f      	beq.n	8002282 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x186>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1d3      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x278>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff f8e3 	bl	80013e4 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff f8df 	bl	80013e4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e1b4      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4925      	ldr	r1, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_OscConfig+0x278>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f8c2 	bl	80013e4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff f8be 	bl	80013e4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e193      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d036      	beq.n	80022fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x27c>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f8a2 	bl	80013e4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff f89e 	bl	80013e4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e173      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x274>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x234>
 80022c2:	e01b      	b.n	80022fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_OscConfig+0x27c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7ff f88b 	bl	80013e4 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	e00e      	b.n	80022f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff f887 	bl	80013e4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d907      	bls.n	80022f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e15c      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470000 	.word	0x42470000
 80022ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	4b8a      	ldr	r3, [pc, #552]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ea      	bne.n	80022d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8097 	beq.w	8002438 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b83      	ldr	r3, [pc, #524]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b7f      	ldr	r3, [pc, #508]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a7e      	ldr	r2, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b7c      	ldr	r3, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b79      	ldr	r3, [pc, #484]	; (8002520 <HAL_RCC_OscConfig+0x4b0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x4b0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x4b0>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7ff f847 	bl	80013e4 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7ff f843 	bl	80013e4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e118      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x4b0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x31e>
 8002380:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a65      	ldr	r2, [pc, #404]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e01c      	b.n	80023c8 <HAL_RCC_OscConfig+0x358>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x340>
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a60      	ldr	r2, [pc, #384]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	4b5e      	ldr	r3, [pc, #376]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a5d      	ldr	r2, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0x358>
 80023b0:	4b5a      	ldr	r3, [pc, #360]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a59      	ldr	r2, [pc, #356]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	4b57      	ldr	r3, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a56      	ldr	r2, [pc, #344]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff f808 	bl	80013e4 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7ff f804 	bl	80013e4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0d7      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ee      	beq.n	80023d8 <HAL_RCC_OscConfig+0x368>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fff2 	bl	80013e4 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe ffee 	bl	80013e4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0c1      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ee      	bne.n	8002404 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a3a      	ldr	r2, [pc, #232]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80ad 	beq.w	800259c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d060      	beq.n	8002510 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d145      	bne.n	80024e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_RCC_OscConfig+0x4b4>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe ffc2 	bl	80013e4 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7fe ffbe 	bl	80013e4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e093      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	085b      	lsrs	r3, r3, #1
 800249a:	3b01      	subs	r3, #1
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	071b      	lsls	r3, r3, #28
 80024ae:	491b      	ldr	r1, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4b4>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe ff93 	bl	80013e4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe ff8f 	bl	80013e4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e064      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x452>
 80024e0:	e05c      	b.n	800259c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x4b4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe ff7c 	bl	80013e4 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe ff78 	bl	80013e4 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e04d      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_OscConfig+0x4ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x480>
 800250e:	e045      	b.n	800259c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e040      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000
 8002524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCC_OscConfig+0x538>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d030      	beq.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d129      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d122      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002560:	4293      	cmp	r3, r2
 8002562:	d119      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d10f      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800

080025ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07b      	b.n	80026b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ce:	d009      	beq.n	80025e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
 80025d6:	e005      	b.n	80025e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fb14 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	ea42 0103 	orr.w	r1, r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0104 	and.w	r1, r3, #4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	f003 0210 	and.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b088      	sub	sp, #32
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_SPI_Transmit+0x22>
 80026dc:	2302      	movs	r3, #2
 80026de:	e126      	b.n	800292e <HAL_SPI_Transmit+0x270>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026e8:	f7fe fe7c 	bl	80013e4 <HAL_GetTick>
 80026ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d002      	beq.n	8002704 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002702:	e10b      	b.n	800291c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_SPI_Transmit+0x52>
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002714:	e102      	b.n	800291c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2203      	movs	r2, #3
 800271a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	d10f      	bne.n	800277e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800277c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d007      	beq.n	800279c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a4:	d14b      	bne.n	800283e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0xf6>
 80027ae:	8afb      	ldrh	r3, [r7, #22]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d13e      	bne.n	8002832 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	1c9a      	adds	r2, r3, #2
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027d8:	e02b      	b.n	8002832 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d112      	bne.n	800280e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	1c9a      	adds	r2, r3, #2
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	86da      	strh	r2, [r3, #54]	; 0x36
 800280c:	e011      	b.n	8002832 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800280e:	f7fe fde9 	bl	80013e4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d803      	bhi.n	8002826 <HAL_SPI_Transmit+0x168>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d102      	bne.n	800282c <HAL_SPI_Transmit+0x16e>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002830:	e074      	b.n	800291c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ce      	bne.n	80027da <HAL_SPI_Transmit+0x11c>
 800283c:	e04c      	b.n	80028d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_SPI_Transmit+0x18e>
 8002846:	8afb      	ldrh	r3, [r7, #22]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d140      	bne.n	80028ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002872:	e02c      	b.n	80028ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d113      	bne.n	80028aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80028a8:	e011      	b.n	80028ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028aa:	f7fe fd9b 	bl	80013e4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d803      	bhi.n	80028c2 <HAL_SPI_Transmit+0x204>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d102      	bne.n	80028c8 <HAL_SPI_Transmit+0x20a>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028cc:	e026      	b.n	800291c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1cd      	bne.n	8002874 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f8b3 	bl	8002a48 <SPI_EndRxTxTransaction>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e000      	b.n	800291c <HAL_SPI_Transmit+0x25e>
  }

error:
 800291a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800292c:	7ffb      	ldrb	r3, [r7, #31]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002948:	f7fe fd4c 	bl	80013e4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002958:	f7fe fd44 	bl	80013e4 <HAL_GetTick>
 800295c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	015b      	lsls	r3, r3, #5
 8002964:	0d1b      	lsrs	r3, r3, #20
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296e:	e054      	b.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d050      	beq.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002978:	f7fe fd34 	bl	80013e4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	429a      	cmp	r2, r3
 8002986:	d902      	bls.n	800298e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13d      	bne.n	8002a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800299c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a6:	d111      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b0:	d004      	beq.n	80029bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d107      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d4:	d10f      	bne.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e017      	b.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d19b      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	2000003c 	.word	0x2000003c

08002a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <SPI_EndRxTxTransaction+0x7c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <SPI_EndRxTxTransaction+0x80>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0d5b      	lsrs	r3, r3, #21
 8002a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a72:	d112      	bne.n	8002a9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff ff5a 	bl	8002938 <SPI_WaitFlagStateUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e00f      	b.n	8002aba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d0f2      	beq.n	8002a9a <SPI_EndRxTxTransaction+0x52>
 8002ab4:	e000      	b.n	8002ab8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002ab6:	bf00      	nop
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000003c 	.word	0x2000003c
 8002ac8:	165e9f81 	.word	0x165e9f81

08002acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e041      	b.n	8002b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fa5c 	bl	8000fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f000 f9ce 	bl	8002eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d001      	beq.n	8002b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e04e      	b.n	8002c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d022      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bae:	d01d      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d018      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d013      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	; (8002c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00e      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d009      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0x80>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d111      	bne.n	8002c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d010      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	e007      	b.n	8002c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40010400 	.word	0x40010400
 8002c44:	40014000 	.word	0x40014000
 8002c48:	40001800 	.word	0x40001800

08002c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0202 	mvn.w	r2, #2
 8002c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8ee 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8e0 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8f1 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0204 	mvn.w	r2, #4
 8002ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8c4 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8b6 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8c7 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0208 	mvn.w	r2, #8
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f89a 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f88c 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f89d 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f870 	bl	8002e70 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f862 	bl	8002e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f873 	bl	8002e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0201 	mvn.w	r2, #1
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe f936 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f902 	bl	8003000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f838 	bl	8002e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0220 	mvn.w	r2, #32
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8cc 	bl	8002fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a40      	ldr	r2, [pc, #256]	; (8002fc0 <TIM_Base_SetConfig+0x114>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eca:	d00f      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <TIM_Base_SetConfig+0x118>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3c      	ldr	r2, [pc, #240]	; (8002fc8 <TIM_Base_SetConfig+0x11c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <TIM_Base_SetConfig+0x120>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3a      	ldr	r2, [pc, #232]	; (8002fd0 <TIM_Base_SetConfig+0x124>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <TIM_Base_SetConfig+0x114>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f0c:	d027      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <TIM_Base_SetConfig+0x118>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d023      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <TIM_Base_SetConfig+0x11c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01f      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <TIM_Base_SetConfig+0x120>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01b      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <TIM_Base_SetConfig+0x124>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d017      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <TIM_Base_SetConfig+0x128>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <TIM_Base_SetConfig+0x12c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <TIM_Base_SetConfig+0x130>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <TIM_Base_SetConfig+0x134>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <TIM_Base_SetConfig+0x138>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <TIM_Base_SetConfig+0x13c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <TIM_Base_SetConfig+0x114>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_Base_SetConfig+0xf8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <TIM_Base_SetConfig+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40010400 	.word	0x40010400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400
 8002fdc:	40014800 	.word	0x40014800
 8002fe0:	40001800 	.word	0x40001800
 8002fe4:	40001c00 	.word	0x40001c00
 8002fe8:	40002000 	.word	0x40002000

08002fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e03f      	b.n	80030a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe f8fa 	bl	8001234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f929 	bl	80032b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b08a      	sub	sp, #40	; 0x28
 80030b2:	af02      	add	r7, sp, #8
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d17c      	bne.n	80031c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_UART_Transmit+0x2c>
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e075      	b.n	80031ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_UART_Transmit+0x3e>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e06e      	b.n	80031ca <HAL_UART_Transmit+0x11c>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2221      	movs	r2, #33	; 0x21
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003102:	f7fe f96f 	bl	80013e4 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x82>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003140:	e02a      	b.n	8003198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	2180      	movs	r1, #128	; 0x80
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f840 	bl	80031d2 <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e036      	b.n	80031ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3302      	adds	r3, #2
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e007      	b.n	800318a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1cf      	bne.n	8003142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f810 	bl	80031d2 <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e006      	b.n	80031ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b090      	sub	sp, #64	; 0x40
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	e050      	b.n	8003286 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d04c      	beq.n	8003286 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0x30>
 80031f2:	f7fe f8f7 	bl	80013e4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031fe:	429a      	cmp	r2, r3
 8003200:	d241      	bcs.n	8003286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	e853 3f00 	ldrex	r3, [r3]
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003222:	637a      	str	r2, [r7, #52]	; 0x34
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e5      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	613b      	str	r3, [r7, #16]
   return(result);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3314      	adds	r3, #20
 8003254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003256:	623a      	str	r2, [r7, #32]
 8003258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	69f9      	ldr	r1, [r7, #28]
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	61bb      	str	r3, [r7, #24]
   return(result);
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e5      	bne.n	8003236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e00f      	b.n	80032a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	4013      	ands	r3, r2
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d09f      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3740      	adds	r7, #64	; 0x40
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b4:	b0c0      	sub	sp, #256	; 0x100
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	ea40 0301 	orr.w	r3, r0, r1
 80032d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003308:	f021 010c 	bic.w	r1, r1, #12
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003316:	430b      	orrs	r3, r1
 8003318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	6999      	ldr	r1, [r3, #24]
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	ea40 0301 	orr.w	r3, r0, r1
 8003336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b8f      	ldr	r3, [pc, #572]	; (800357c <UART_SetConfig+0x2cc>)
 8003340:	429a      	cmp	r2, r3
 8003342:	d005      	beq.n	8003350 <UART_SetConfig+0xa0>
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b8d      	ldr	r3, [pc, #564]	; (8003580 <UART_SetConfig+0x2d0>)
 800334c:	429a      	cmp	r2, r3
 800334e:	d104      	bne.n	800335a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7fe fc4a 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 8003354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003358:	e003      	b.n	8003362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800335a:	f7fe fc31 	bl	8001bc0 <HAL_RCC_GetPCLK1Freq>
 800335e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336c:	f040 810c 	bne.w	8003588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800337a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800337e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003382:	4622      	mov	r2, r4
 8003384:	462b      	mov	r3, r5
 8003386:	1891      	adds	r1, r2, r2
 8003388:	65b9      	str	r1, [r7, #88]	; 0x58
 800338a:	415b      	adcs	r3, r3
 800338c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003392:	4621      	mov	r1, r4
 8003394:	eb12 0801 	adds.w	r8, r2, r1
 8003398:	4629      	mov	r1, r5
 800339a:	eb43 0901 	adc.w	r9, r3, r1
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033b2:	4690      	mov	r8, r2
 80033b4:	4699      	mov	r9, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	eb18 0303 	adds.w	r3, r8, r3
 80033bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033c0:	462b      	mov	r3, r5
 80033c2:	eb49 0303 	adc.w	r3, r9, r3
 80033c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033de:	460b      	mov	r3, r1
 80033e0:	18db      	adds	r3, r3, r3
 80033e2:	653b      	str	r3, [r7, #80]	; 0x50
 80033e4:	4613      	mov	r3, r2
 80033e6:	eb42 0303 	adc.w	r3, r2, r3
 80033ea:	657b      	str	r3, [r7, #84]	; 0x54
 80033ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033f4:	f7fc ff64 	bl	80002c0 <__aeabi_uldivmod>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4b61      	ldr	r3, [pc, #388]	; (8003584 <UART_SetConfig+0x2d4>)
 80033fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	011c      	lsls	r4, r3, #4
 8003406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003418:	4642      	mov	r2, r8
 800341a:	464b      	mov	r3, r9
 800341c:	1891      	adds	r1, r2, r2
 800341e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003420:	415b      	adcs	r3, r3
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003428:	4641      	mov	r1, r8
 800342a:	eb12 0a01 	adds.w	sl, r2, r1
 800342e:	4649      	mov	r1, r9
 8003430:	eb43 0b01 	adc.w	fp, r3, r1
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003448:	4692      	mov	sl, r2
 800344a:	469b      	mov	fp, r3
 800344c:	4643      	mov	r3, r8
 800344e:	eb1a 0303 	adds.w	r3, sl, r3
 8003452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003456:	464b      	mov	r3, r9
 8003458:	eb4b 0303 	adc.w	r3, fp, r3
 800345c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800346c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003474:	460b      	mov	r3, r1
 8003476:	18db      	adds	r3, r3, r3
 8003478:	643b      	str	r3, [r7, #64]	; 0x40
 800347a:	4613      	mov	r3, r2
 800347c:	eb42 0303 	adc.w	r3, r2, r3
 8003480:	647b      	str	r3, [r7, #68]	; 0x44
 8003482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800348a:	f7fc ff19 	bl	80002c0 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4611      	mov	r1, r2
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <UART_SetConfig+0x2d4>)
 8003496:	fba3 2301 	umull	r2, r3, r3, r1
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2264      	movs	r2, #100	; 0x64
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	1acb      	subs	r3, r1, r3
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034aa:	4b36      	ldr	r3, [pc, #216]	; (8003584 <UART_SetConfig+0x2d4>)
 80034ac:	fba3 2302 	umull	r2, r3, r3, r2
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b8:	441c      	add	r4, r3
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034d4:	415b      	adcs	r3, r3
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034dc:	4641      	mov	r1, r8
 80034de:	1851      	adds	r1, r2, r1
 80034e0:	6339      	str	r1, [r7, #48]	; 0x30
 80034e2:	4649      	mov	r1, r9
 80034e4:	414b      	adcs	r3, r1
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034f4:	4659      	mov	r1, fp
 80034f6:	00cb      	lsls	r3, r1, #3
 80034f8:	4651      	mov	r1, sl
 80034fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034fe:	4651      	mov	r1, sl
 8003500:	00ca      	lsls	r2, r1, #3
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	4603      	mov	r3, r0
 8003508:	4642      	mov	r2, r8
 800350a:	189b      	adds	r3, r3, r2
 800350c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003510:	464b      	mov	r3, r9
 8003512:	460a      	mov	r2, r1
 8003514:	eb42 0303 	adc.w	r3, r2, r3
 8003518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800352c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003530:	460b      	mov	r3, r1
 8003532:	18db      	adds	r3, r3, r3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	4613      	mov	r3, r2
 8003538:	eb42 0303 	adc.w	r3, r2, r3
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003546:	f7fc febb 	bl	80002c0 <__aeabi_uldivmod>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <UART_SetConfig+0x2d4>)
 8003550:	fba3 1302 	umull	r1, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	2164      	movs	r1, #100	; 0x64
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	3332      	adds	r3, #50	; 0x32
 8003562:	4a08      	ldr	r2, [pc, #32]	; (8003584 <UART_SetConfig+0x2d4>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	f003 0207 	and.w	r2, r3, #7
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4422      	add	r2, r4
 8003576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003578:	e105      	b.n	8003786 <UART_SetConfig+0x4d6>
 800357a:	bf00      	nop
 800357c:	40011000 	.word	0x40011000
 8003580:	40011400 	.word	0x40011400
 8003584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358c:	2200      	movs	r2, #0
 800358e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800359a:	4642      	mov	r2, r8
 800359c:	464b      	mov	r3, r9
 800359e:	1891      	adds	r1, r2, r2
 80035a0:	6239      	str	r1, [r7, #32]
 80035a2:	415b      	adcs	r3, r3
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035aa:	4641      	mov	r1, r8
 80035ac:	1854      	adds	r4, r2, r1
 80035ae:	4649      	mov	r1, r9
 80035b0:	eb43 0501 	adc.w	r5, r3, r1
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	00eb      	lsls	r3, r5, #3
 80035be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035c2:	00e2      	lsls	r2, r4, #3
 80035c4:	4614      	mov	r4, r2
 80035c6:	461d      	mov	r5, r3
 80035c8:	4643      	mov	r3, r8
 80035ca:	18e3      	adds	r3, r4, r3
 80035cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035d0:	464b      	mov	r3, r9
 80035d2:	eb45 0303 	adc.w	r3, r5, r3
 80035d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035f6:	4629      	mov	r1, r5
 80035f8:	008b      	lsls	r3, r1, #2
 80035fa:	4621      	mov	r1, r4
 80035fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003600:	4621      	mov	r1, r4
 8003602:	008a      	lsls	r2, r1, #2
 8003604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003608:	f7fc fe5a 	bl	80002c0 <__aeabi_uldivmod>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4b60      	ldr	r3, [pc, #384]	; (8003794 <UART_SetConfig+0x4e4>)
 8003612:	fba3 2302 	umull	r2, r3, r3, r2
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	011c      	lsls	r4, r3, #4
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	61b9      	str	r1, [r7, #24]
 8003634:	415b      	adcs	r3, r3
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800363c:	4641      	mov	r1, r8
 800363e:	1851      	adds	r1, r2, r1
 8003640:	6139      	str	r1, [r7, #16]
 8003642:	4649      	mov	r1, r9
 8003644:	414b      	adcs	r3, r1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003654:	4659      	mov	r1, fp
 8003656:	00cb      	lsls	r3, r1, #3
 8003658:	4651      	mov	r1, sl
 800365a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365e:	4651      	mov	r1, sl
 8003660:	00ca      	lsls	r2, r1, #3
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	4603      	mov	r3, r0
 8003668:	4642      	mov	r2, r8
 800366a:	189b      	adds	r3, r3, r2
 800366c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003670:	464b      	mov	r3, r9
 8003672:	460a      	mov	r2, r1
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	67bb      	str	r3, [r7, #120]	; 0x78
 8003686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003694:	4649      	mov	r1, r9
 8003696:	008b      	lsls	r3, r1, #2
 8003698:	4641      	mov	r1, r8
 800369a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800369e:	4641      	mov	r1, r8
 80036a0:	008a      	lsls	r2, r1, #2
 80036a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036a6:	f7fc fe0b 	bl	80002c0 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <UART_SetConfig+0x4e4>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	; 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	3332      	adds	r3, #50	; 0x32
 80036c2:	4a34      	ldr	r2, [pc, #208]	; (8003794 <UART_SetConfig+0x4e4>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ce:	441c      	add	r4, r3
 80036d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d4:	2200      	movs	r2, #0
 80036d6:	673b      	str	r3, [r7, #112]	; 0x70
 80036d8:	677a      	str	r2, [r7, #116]	; 0x74
 80036da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036de:	4642      	mov	r2, r8
 80036e0:	464b      	mov	r3, r9
 80036e2:	1891      	adds	r1, r2, r2
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	415b      	adcs	r3, r3
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ee:	4641      	mov	r1, r8
 80036f0:	1851      	adds	r1, r2, r1
 80036f2:	6039      	str	r1, [r7, #0]
 80036f4:	4649      	mov	r1, r9
 80036f6:	414b      	adcs	r3, r1
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003706:	4659      	mov	r1, fp
 8003708:	00cb      	lsls	r3, r1, #3
 800370a:	4651      	mov	r1, sl
 800370c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003710:	4651      	mov	r1, sl
 8003712:	00ca      	lsls	r2, r1, #3
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	4603      	mov	r3, r0
 800371a:	4642      	mov	r2, r8
 800371c:	189b      	adds	r3, r3, r2
 800371e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003720:	464b      	mov	r3, r9
 8003722:	460a      	mov	r2, r1
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	663b      	str	r3, [r7, #96]	; 0x60
 8003734:	667a      	str	r2, [r7, #100]	; 0x64
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003742:	4649      	mov	r1, r9
 8003744:	008b      	lsls	r3, r1, #2
 8003746:	4641      	mov	r1, r8
 8003748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800374c:	4641      	mov	r1, r8
 800374e:	008a      	lsls	r2, r1, #2
 8003750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003754:	f7fc fdb4 	bl	80002c0 <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <UART_SetConfig+0x4e4>)
 800375e:	fba3 1302 	umull	r1, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2164      	movs	r1, #100	; 0x64
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	4a08      	ldr	r2, [pc, #32]	; (8003794 <UART_SetConfig+0x4e4>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4422      	add	r2, r4
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800378c:	46bd      	mov	sp, r7
 800378e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003792:	bf00      	nop
 8003794:	51eb851f 	.word	0x51eb851f

08003798 <__errno>:
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <__errno+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000048 	.word	0x20000048

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	4d0d      	ldr	r5, [pc, #52]	; (80037dc <__libc_init_array+0x38>)
 80037a8:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037aa:	1b64      	subs	r4, r4, r5
 80037ac:	10a4      	asrs	r4, r4, #2
 80037ae:	2600      	movs	r6, #0
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	4d0b      	ldr	r5, [pc, #44]	; (80037e4 <__libc_init_array+0x40>)
 80037b6:	4c0c      	ldr	r4, [pc, #48]	; (80037e8 <__libc_init_array+0x44>)
 80037b8:	f000 fc8e 	bl	80040d8 <_init>
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	2600      	movs	r6, #0
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	08004150 	.word	0x08004150
 80037e0:	08004150 	.word	0x08004150
 80037e4:	08004150 	.word	0x08004150
 80037e8:	08004154 	.word	0x08004154

080037ec <memset>:
 80037ec:	4402      	add	r2, r0
 80037ee:	4603      	mov	r3, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <siprintf>:
 80037fc:	b40e      	push	{r1, r2, r3}
 80037fe:	b500      	push	{lr}
 8003800:	b09c      	sub	sp, #112	; 0x70
 8003802:	ab1d      	add	r3, sp, #116	; 0x74
 8003804:	9002      	str	r0, [sp, #8]
 8003806:	9006      	str	r0, [sp, #24]
 8003808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800380c:	4809      	ldr	r0, [pc, #36]	; (8003834 <siprintf+0x38>)
 800380e:	9107      	str	r1, [sp, #28]
 8003810:	9104      	str	r1, [sp, #16]
 8003812:	4909      	ldr	r1, [pc, #36]	; (8003838 <siprintf+0x3c>)
 8003814:	f853 2b04 	ldr.w	r2, [r3], #4
 8003818:	9105      	str	r1, [sp, #20]
 800381a:	6800      	ldr	r0, [r0, #0]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	a902      	add	r1, sp, #8
 8003820:	f000 f868 	bl	80038f4 <_svfiprintf_r>
 8003824:	9b02      	ldr	r3, [sp, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	b01c      	add	sp, #112	; 0x70
 800382c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003830:	b003      	add	sp, #12
 8003832:	4770      	bx	lr
 8003834:	20000048 	.word	0x20000048
 8003838:	ffff0208 	.word	0xffff0208

0800383c <__ssputs_r>:
 800383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	688e      	ldr	r6, [r1, #8]
 8003842:	429e      	cmp	r6, r3
 8003844:	4682      	mov	sl, r0
 8003846:	460c      	mov	r4, r1
 8003848:	4690      	mov	r8, r2
 800384a:	461f      	mov	r7, r3
 800384c:	d838      	bhi.n	80038c0 <__ssputs_r+0x84>
 800384e:	898a      	ldrh	r2, [r1, #12]
 8003850:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003854:	d032      	beq.n	80038bc <__ssputs_r+0x80>
 8003856:	6825      	ldr	r5, [r4, #0]
 8003858:	6909      	ldr	r1, [r1, #16]
 800385a:	eba5 0901 	sub.w	r9, r5, r1
 800385e:	6965      	ldr	r5, [r4, #20]
 8003860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003868:	3301      	adds	r3, #1
 800386a:	444b      	add	r3, r9
 800386c:	106d      	asrs	r5, r5, #1
 800386e:	429d      	cmp	r5, r3
 8003870:	bf38      	it	cc
 8003872:	461d      	movcc	r5, r3
 8003874:	0553      	lsls	r3, r2, #21
 8003876:	d531      	bpl.n	80038dc <__ssputs_r+0xa0>
 8003878:	4629      	mov	r1, r5
 800387a:	f000 fb63 	bl	8003f44 <_malloc_r>
 800387e:	4606      	mov	r6, r0
 8003880:	b950      	cbnz	r0, 8003898 <__ssputs_r+0x5c>
 8003882:	230c      	movs	r3, #12
 8003884:	f8ca 3000 	str.w	r3, [sl]
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	6921      	ldr	r1, [r4, #16]
 800389a:	464a      	mov	r2, r9
 800389c:	f000 fabe 	bl	8003e1c <memcpy>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	6126      	str	r6, [r4, #16]
 80038ae:	6165      	str	r5, [r4, #20]
 80038b0:	444e      	add	r6, r9
 80038b2:	eba5 0509 	sub.w	r5, r5, r9
 80038b6:	6026      	str	r6, [r4, #0]
 80038b8:	60a5      	str	r5, [r4, #8]
 80038ba:	463e      	mov	r6, r7
 80038bc:	42be      	cmp	r6, r7
 80038be:	d900      	bls.n	80038c2 <__ssputs_r+0x86>
 80038c0:	463e      	mov	r6, r7
 80038c2:	6820      	ldr	r0, [r4, #0]
 80038c4:	4632      	mov	r2, r6
 80038c6:	4641      	mov	r1, r8
 80038c8:	f000 fab6 	bl	8003e38 <memmove>
 80038cc:	68a3      	ldr	r3, [r4, #8]
 80038ce:	1b9b      	subs	r3, r3, r6
 80038d0:	60a3      	str	r3, [r4, #8]
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4433      	add	r3, r6
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2000      	movs	r0, #0
 80038da:	e7db      	b.n	8003894 <__ssputs_r+0x58>
 80038dc:	462a      	mov	r2, r5
 80038de:	f000 fba5 	bl	800402c <_realloc_r>
 80038e2:	4606      	mov	r6, r0
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1e1      	bne.n	80038ac <__ssputs_r+0x70>
 80038e8:	6921      	ldr	r1, [r4, #16]
 80038ea:	4650      	mov	r0, sl
 80038ec:	f000 fabe 	bl	8003e6c <_free_r>
 80038f0:	e7c7      	b.n	8003882 <__ssputs_r+0x46>
	...

080038f4 <_svfiprintf_r>:
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	4698      	mov	r8, r3
 80038fa:	898b      	ldrh	r3, [r1, #12]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	b09d      	sub	sp, #116	; 0x74
 8003900:	4607      	mov	r7, r0
 8003902:	460d      	mov	r5, r1
 8003904:	4614      	mov	r4, r2
 8003906:	d50e      	bpl.n	8003926 <_svfiprintf_r+0x32>
 8003908:	690b      	ldr	r3, [r1, #16]
 800390a:	b963      	cbnz	r3, 8003926 <_svfiprintf_r+0x32>
 800390c:	2140      	movs	r1, #64	; 0x40
 800390e:	f000 fb19 	bl	8003f44 <_malloc_r>
 8003912:	6028      	str	r0, [r5, #0]
 8003914:	6128      	str	r0, [r5, #16]
 8003916:	b920      	cbnz	r0, 8003922 <_svfiprintf_r+0x2e>
 8003918:	230c      	movs	r3, #12
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	e0d1      	b.n	8003ac6 <_svfiprintf_r+0x1d2>
 8003922:	2340      	movs	r3, #64	; 0x40
 8003924:	616b      	str	r3, [r5, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	9309      	str	r3, [sp, #36]	; 0x24
 800392a:	2320      	movs	r3, #32
 800392c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003930:	f8cd 800c 	str.w	r8, [sp, #12]
 8003934:	2330      	movs	r3, #48	; 0x30
 8003936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ae0 <_svfiprintf_r+0x1ec>
 800393a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800393e:	f04f 0901 	mov.w	r9, #1
 8003942:	4623      	mov	r3, r4
 8003944:	469a      	mov	sl, r3
 8003946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800394a:	b10a      	cbz	r2, 8003950 <_svfiprintf_r+0x5c>
 800394c:	2a25      	cmp	r2, #37	; 0x25
 800394e:	d1f9      	bne.n	8003944 <_svfiprintf_r+0x50>
 8003950:	ebba 0b04 	subs.w	fp, sl, r4
 8003954:	d00b      	beq.n	800396e <_svfiprintf_r+0x7a>
 8003956:	465b      	mov	r3, fp
 8003958:	4622      	mov	r2, r4
 800395a:	4629      	mov	r1, r5
 800395c:	4638      	mov	r0, r7
 800395e:	f7ff ff6d 	bl	800383c <__ssputs_r>
 8003962:	3001      	adds	r0, #1
 8003964:	f000 80aa 	beq.w	8003abc <_svfiprintf_r+0x1c8>
 8003968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800396a:	445a      	add	r2, fp
 800396c:	9209      	str	r2, [sp, #36]	; 0x24
 800396e:	f89a 3000 	ldrb.w	r3, [sl]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80a2 	beq.w	8003abc <_svfiprintf_r+0x1c8>
 8003978:	2300      	movs	r3, #0
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003982:	f10a 0a01 	add.w	sl, sl, #1
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398e:	931a      	str	r3, [sp, #104]	; 0x68
 8003990:	4654      	mov	r4, sl
 8003992:	2205      	movs	r2, #5
 8003994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003998:	4851      	ldr	r0, [pc, #324]	; (8003ae0 <_svfiprintf_r+0x1ec>)
 800399a:	f7fc fc41 	bl	8000220 <memchr>
 800399e:	9a04      	ldr	r2, [sp, #16]
 80039a0:	b9d8      	cbnz	r0, 80039da <_svfiprintf_r+0xe6>
 80039a2:	06d0      	lsls	r0, r2, #27
 80039a4:	bf44      	itt	mi
 80039a6:	2320      	movmi	r3, #32
 80039a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ac:	0711      	lsls	r1, r2, #28
 80039ae:	bf44      	itt	mi
 80039b0:	232b      	movmi	r3, #43	; 0x2b
 80039b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039b6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ba:	2b2a      	cmp	r3, #42	; 0x2a
 80039bc:	d015      	beq.n	80039ea <_svfiprintf_r+0xf6>
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	4654      	mov	r4, sl
 80039c2:	2000      	movs	r0, #0
 80039c4:	f04f 0c0a 	mov.w	ip, #10
 80039c8:	4621      	mov	r1, r4
 80039ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ce:	3b30      	subs	r3, #48	; 0x30
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	d94e      	bls.n	8003a72 <_svfiprintf_r+0x17e>
 80039d4:	b1b0      	cbz	r0, 8003a04 <_svfiprintf_r+0x110>
 80039d6:	9207      	str	r2, [sp, #28]
 80039d8:	e014      	b.n	8003a04 <_svfiprintf_r+0x110>
 80039da:	eba0 0308 	sub.w	r3, r0, r8
 80039de:	fa09 f303 	lsl.w	r3, r9, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	46a2      	mov	sl, r4
 80039e8:	e7d2      	b.n	8003990 <_svfiprintf_r+0x9c>
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	9103      	str	r1, [sp, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfbb      	ittet	lt
 80039f6:	425b      	neglt	r3, r3
 80039f8:	f042 0202 	orrlt.w	r2, r2, #2
 80039fc:	9307      	strge	r3, [sp, #28]
 80039fe:	9307      	strlt	r3, [sp, #28]
 8003a00:	bfb8      	it	lt
 8003a02:	9204      	strlt	r2, [sp, #16]
 8003a04:	7823      	ldrb	r3, [r4, #0]
 8003a06:	2b2e      	cmp	r3, #46	; 0x2e
 8003a08:	d10c      	bne.n	8003a24 <_svfiprintf_r+0x130>
 8003a0a:	7863      	ldrb	r3, [r4, #1]
 8003a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a0e:	d135      	bne.n	8003a7c <_svfiprintf_r+0x188>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfb8      	it	lt
 8003a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a20:	3402      	adds	r4, #2
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003af0 <_svfiprintf_r+0x1fc>
 8003a28:	7821      	ldrb	r1, [r4, #0]
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	f7fc fbf7 	bl	8000220 <memchr>
 8003a32:	b140      	cbz	r0, 8003a46 <_svfiprintf_r+0x152>
 8003a34:	2340      	movs	r3, #64	; 0x40
 8003a36:	eba0 000a 	sub.w	r0, r0, sl
 8003a3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	4303      	orrs	r3, r0
 8003a42:	3401      	adds	r4, #1
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a4a:	4826      	ldr	r0, [pc, #152]	; (8003ae4 <_svfiprintf_r+0x1f0>)
 8003a4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a50:	2206      	movs	r2, #6
 8003a52:	f7fc fbe5 	bl	8000220 <memchr>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d038      	beq.n	8003acc <_svfiprintf_r+0x1d8>
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <_svfiprintf_r+0x1f4>)
 8003a5c:	bb1b      	cbnz	r3, 8003aa6 <_svfiprintf_r+0x1b2>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	3307      	adds	r3, #7
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	3308      	adds	r3, #8
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6c:	4433      	add	r3, r6
 8003a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a70:	e767      	b.n	8003942 <_svfiprintf_r+0x4e>
 8003a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a76:	460c      	mov	r4, r1
 8003a78:	2001      	movs	r0, #1
 8003a7a:	e7a5      	b.n	80039c8 <_svfiprintf_r+0xd4>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	3401      	adds	r4, #1
 8003a80:	9305      	str	r3, [sp, #20]
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 0c0a 	mov.w	ip, #10
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a8e:	3a30      	subs	r2, #48	; 0x30
 8003a90:	2a09      	cmp	r2, #9
 8003a92:	d903      	bls.n	8003a9c <_svfiprintf_r+0x1a8>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0c5      	beq.n	8003a24 <_svfiprintf_r+0x130>
 8003a98:	9105      	str	r1, [sp, #20]
 8003a9a:	e7c3      	b.n	8003a24 <_svfiprintf_r+0x130>
 8003a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e7f0      	b.n	8003a88 <_svfiprintf_r+0x194>
 8003aa6:	ab03      	add	r3, sp, #12
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	462a      	mov	r2, r5
 8003aac:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <_svfiprintf_r+0x1f8>)
 8003aae:	a904      	add	r1, sp, #16
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f3af 8000 	nop.w
 8003ab6:	1c42      	adds	r2, r0, #1
 8003ab8:	4606      	mov	r6, r0
 8003aba:	d1d6      	bne.n	8003a6a <_svfiprintf_r+0x176>
 8003abc:	89ab      	ldrh	r3, [r5, #12]
 8003abe:	065b      	lsls	r3, r3, #25
 8003ac0:	f53f af2c 	bmi.w	800391c <_svfiprintf_r+0x28>
 8003ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac6:	b01d      	add	sp, #116	; 0x74
 8003ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003acc:	ab03      	add	r3, sp, #12
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	462a      	mov	r2, r5
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <_svfiprintf_r+0x1f8>)
 8003ad4:	a904      	add	r1, sp, #16
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	f000 f87a 	bl	8003bd0 <_printf_i>
 8003adc:	e7eb      	b.n	8003ab6 <_svfiprintf_r+0x1c2>
 8003ade:	bf00      	nop
 8003ae0:	08004114 	.word	0x08004114
 8003ae4:	0800411e 	.word	0x0800411e
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	0800383d 	.word	0x0800383d
 8003af0:	0800411a 	.word	0x0800411a

08003af4 <_printf_common>:
 8003af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af8:	4616      	mov	r6, r2
 8003afa:	4699      	mov	r9, r3
 8003afc:	688a      	ldr	r2, [r1, #8]
 8003afe:	690b      	ldr	r3, [r1, #16]
 8003b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bfb8      	it	lt
 8003b08:	4613      	movlt	r3, r2
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b10:	4607      	mov	r7, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	b10a      	cbz	r2, 8003b1a <_printf_common+0x26>
 8003b16:	3301      	adds	r3, #1
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	0699      	lsls	r1, r3, #26
 8003b1e:	bf42      	ittt	mi
 8003b20:	6833      	ldrmi	r3, [r6, #0]
 8003b22:	3302      	addmi	r3, #2
 8003b24:	6033      	strmi	r3, [r6, #0]
 8003b26:	6825      	ldr	r5, [r4, #0]
 8003b28:	f015 0506 	ands.w	r5, r5, #6
 8003b2c:	d106      	bne.n	8003b3c <_printf_common+0x48>
 8003b2e:	f104 0a19 	add.w	sl, r4, #25
 8003b32:	68e3      	ldr	r3, [r4, #12]
 8003b34:	6832      	ldr	r2, [r6, #0]
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	dc26      	bgt.n	8003b8a <_printf_common+0x96>
 8003b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b40:	1e13      	subs	r3, r2, #0
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	bf18      	it	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	0692      	lsls	r2, r2, #26
 8003b4a:	d42b      	bmi.n	8003ba4 <_printf_common+0xb0>
 8003b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b50:	4649      	mov	r1, r9
 8003b52:	4638      	mov	r0, r7
 8003b54:	47c0      	blx	r8
 8003b56:	3001      	adds	r0, #1
 8003b58:	d01e      	beq.n	8003b98 <_printf_common+0xa4>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	68e5      	ldr	r5, [r4, #12]
 8003b5e:	6832      	ldr	r2, [r6, #0]
 8003b60:	f003 0306 	and.w	r3, r3, #6
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	bf08      	it	eq
 8003b68:	1aad      	subeq	r5, r5, r2
 8003b6a:	68a3      	ldr	r3, [r4, #8]
 8003b6c:	6922      	ldr	r2, [r4, #16]
 8003b6e:	bf0c      	ite	eq
 8003b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b74:	2500      	movne	r5, #0
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bfc4      	itt	gt
 8003b7a:	1a9b      	subgt	r3, r3, r2
 8003b7c:	18ed      	addgt	r5, r5, r3
 8003b7e:	2600      	movs	r6, #0
 8003b80:	341a      	adds	r4, #26
 8003b82:	42b5      	cmp	r5, r6
 8003b84:	d11a      	bne.n	8003bbc <_printf_common+0xc8>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e008      	b.n	8003b9c <_printf_common+0xa8>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4652      	mov	r2, sl
 8003b8e:	4649      	mov	r1, r9
 8003b90:	4638      	mov	r0, r7
 8003b92:	47c0      	blx	r8
 8003b94:	3001      	adds	r0, #1
 8003b96:	d103      	bne.n	8003ba0 <_printf_common+0xac>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	e7c6      	b.n	8003b32 <_printf_common+0x3e>
 8003ba4:	18e1      	adds	r1, r4, r3
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	2030      	movs	r0, #48	; 0x30
 8003baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bae:	4422      	add	r2, r4
 8003bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bb8:	3302      	adds	r3, #2
 8003bba:	e7c7      	b.n	8003b4c <_printf_common+0x58>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c0      	blx	r8
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d0e6      	beq.n	8003b98 <_printf_common+0xa4>
 8003bca:	3601      	adds	r6, #1
 8003bcc:	e7d9      	b.n	8003b82 <_printf_common+0x8e>
	...

08003bd0 <_printf_i>:
 8003bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd4:	7e0f      	ldrb	r7, [r1, #24]
 8003bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bd8:	2f78      	cmp	r7, #120	; 0x78
 8003bda:	4691      	mov	r9, r2
 8003bdc:	4680      	mov	r8, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	469a      	mov	sl, r3
 8003be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003be6:	d807      	bhi.n	8003bf8 <_printf_i+0x28>
 8003be8:	2f62      	cmp	r7, #98	; 0x62
 8003bea:	d80a      	bhi.n	8003c02 <_printf_i+0x32>
 8003bec:	2f00      	cmp	r7, #0
 8003bee:	f000 80d8 	beq.w	8003da2 <_printf_i+0x1d2>
 8003bf2:	2f58      	cmp	r7, #88	; 0x58
 8003bf4:	f000 80a3 	beq.w	8003d3e <_printf_i+0x16e>
 8003bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c00:	e03a      	b.n	8003c78 <_printf_i+0xa8>
 8003c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c06:	2b15      	cmp	r3, #21
 8003c08:	d8f6      	bhi.n	8003bf8 <_printf_i+0x28>
 8003c0a:	a101      	add	r1, pc, #4	; (adr r1, 8003c10 <_printf_i+0x40>)
 8003c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c10:	08003c69 	.word	0x08003c69
 8003c14:	08003c7d 	.word	0x08003c7d
 8003c18:	08003bf9 	.word	0x08003bf9
 8003c1c:	08003bf9 	.word	0x08003bf9
 8003c20:	08003bf9 	.word	0x08003bf9
 8003c24:	08003bf9 	.word	0x08003bf9
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003bf9 	.word	0x08003bf9
 8003c30:	08003bf9 	.word	0x08003bf9
 8003c34:	08003bf9 	.word	0x08003bf9
 8003c38:	08003bf9 	.word	0x08003bf9
 8003c3c:	08003d89 	.word	0x08003d89
 8003c40:	08003cad 	.word	0x08003cad
 8003c44:	08003d6b 	.word	0x08003d6b
 8003c48:	08003bf9 	.word	0x08003bf9
 8003c4c:	08003bf9 	.word	0x08003bf9
 8003c50:	08003dab 	.word	0x08003dab
 8003c54:	08003bf9 	.word	0x08003bf9
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003bf9 	.word	0x08003bf9
 8003c60:	08003bf9 	.word	0x08003bf9
 8003c64:	08003d73 	.word	0x08003d73
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	1d1a      	adds	r2, r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	602a      	str	r2, [r5, #0]
 8003c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0a3      	b.n	8003dc4 <_printf_i+0x1f4>
 8003c7c:	6820      	ldr	r0, [r4, #0]
 8003c7e:	6829      	ldr	r1, [r5, #0]
 8003c80:	0606      	lsls	r6, r0, #24
 8003c82:	f101 0304 	add.w	r3, r1, #4
 8003c86:	d50a      	bpl.n	8003c9e <_printf_i+0xce>
 8003c88:	680e      	ldr	r6, [r1, #0]
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	2e00      	cmp	r6, #0
 8003c8e:	da03      	bge.n	8003c98 <_printf_i+0xc8>
 8003c90:	232d      	movs	r3, #45	; 0x2d
 8003c92:	4276      	negs	r6, r6
 8003c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c98:	485e      	ldr	r0, [pc, #376]	; (8003e14 <_printf_i+0x244>)
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	e019      	b.n	8003cd2 <_printf_i+0x102>
 8003c9e:	680e      	ldr	r6, [r1, #0]
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ca6:	bf18      	it	ne
 8003ca8:	b236      	sxthne	r6, r6
 8003caa:	e7ef      	b.n	8003c8c <_printf_i+0xbc>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	6820      	ldr	r0, [r4, #0]
 8003cb0:	1d19      	adds	r1, r3, #4
 8003cb2:	6029      	str	r1, [r5, #0]
 8003cb4:	0601      	lsls	r1, r0, #24
 8003cb6:	d501      	bpl.n	8003cbc <_printf_i+0xec>
 8003cb8:	681e      	ldr	r6, [r3, #0]
 8003cba:	e002      	b.n	8003cc2 <_printf_i+0xf2>
 8003cbc:	0646      	lsls	r6, r0, #25
 8003cbe:	d5fb      	bpl.n	8003cb8 <_printf_i+0xe8>
 8003cc0:	881e      	ldrh	r6, [r3, #0]
 8003cc2:	4854      	ldr	r0, [pc, #336]	; (8003e14 <_printf_i+0x244>)
 8003cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2308      	moveq	r3, #8
 8003cca:	230a      	movne	r3, #10
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cd2:	6865      	ldr	r5, [r4, #4]
 8003cd4:	60a5      	str	r5, [r4, #8]
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	bfa2      	ittt	ge
 8003cda:	6821      	ldrge	r1, [r4, #0]
 8003cdc:	f021 0104 	bicge.w	r1, r1, #4
 8003ce0:	6021      	strge	r1, [r4, #0]
 8003ce2:	b90e      	cbnz	r6, 8003ce8 <_printf_i+0x118>
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	d04d      	beq.n	8003d84 <_printf_i+0x1b4>
 8003ce8:	4615      	mov	r5, r2
 8003cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cee:	fb03 6711 	mls	r7, r3, r1, r6
 8003cf2:	5dc7      	ldrb	r7, [r0, r7]
 8003cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cf8:	4637      	mov	r7, r6
 8003cfa:	42bb      	cmp	r3, r7
 8003cfc:	460e      	mov	r6, r1
 8003cfe:	d9f4      	bls.n	8003cea <_printf_i+0x11a>
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d10b      	bne.n	8003d1c <_printf_i+0x14c>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	07de      	lsls	r6, r3, #31
 8003d08:	d508      	bpl.n	8003d1c <_printf_i+0x14c>
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	6861      	ldr	r1, [r4, #4]
 8003d0e:	4299      	cmp	r1, r3
 8003d10:	bfde      	ittt	le
 8003d12:	2330      	movle	r3, #48	; 0x30
 8003d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d1c:	1b52      	subs	r2, r2, r5
 8003d1e:	6122      	str	r2, [r4, #16]
 8003d20:	f8cd a000 	str.w	sl, [sp]
 8003d24:	464b      	mov	r3, r9
 8003d26:	aa03      	add	r2, sp, #12
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	f7ff fee2 	bl	8003af4 <_printf_common>
 8003d30:	3001      	adds	r0, #1
 8003d32:	d14c      	bne.n	8003dce <_printf_i+0x1fe>
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	b004      	add	sp, #16
 8003d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3e:	4835      	ldr	r0, [pc, #212]	; (8003e14 <_printf_i+0x244>)
 8003d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d44:	6829      	ldr	r1, [r5, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d4c:	6029      	str	r1, [r5, #0]
 8003d4e:	061d      	lsls	r5, r3, #24
 8003d50:	d514      	bpl.n	8003d7c <_printf_i+0x1ac>
 8003d52:	07df      	lsls	r7, r3, #31
 8003d54:	bf44      	itt	mi
 8003d56:	f043 0320 	orrmi.w	r3, r3, #32
 8003d5a:	6023      	strmi	r3, [r4, #0]
 8003d5c:	b91e      	cbnz	r6, 8003d66 <_printf_i+0x196>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f023 0320 	bic.w	r3, r3, #32
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	2310      	movs	r3, #16
 8003d68:	e7b0      	b.n	8003ccc <_printf_i+0xfc>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	2378      	movs	r3, #120	; 0x78
 8003d74:	4828      	ldr	r0, [pc, #160]	; (8003e18 <_printf_i+0x248>)
 8003d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d7a:	e7e3      	b.n	8003d44 <_printf_i+0x174>
 8003d7c:	0659      	lsls	r1, r3, #25
 8003d7e:	bf48      	it	mi
 8003d80:	b2b6      	uxthmi	r6, r6
 8003d82:	e7e6      	b.n	8003d52 <_printf_i+0x182>
 8003d84:	4615      	mov	r5, r2
 8003d86:	e7bb      	b.n	8003d00 <_printf_i+0x130>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	6826      	ldr	r6, [r4, #0]
 8003d8c:	6961      	ldr	r1, [r4, #20]
 8003d8e:	1d18      	adds	r0, r3, #4
 8003d90:	6028      	str	r0, [r5, #0]
 8003d92:	0635      	lsls	r5, r6, #24
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	d501      	bpl.n	8003d9c <_printf_i+0x1cc>
 8003d98:	6019      	str	r1, [r3, #0]
 8003d9a:	e002      	b.n	8003da2 <_printf_i+0x1d2>
 8003d9c:	0670      	lsls	r0, r6, #25
 8003d9e:	d5fb      	bpl.n	8003d98 <_printf_i+0x1c8>
 8003da0:	8019      	strh	r1, [r3, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	4615      	mov	r5, r2
 8003da8:	e7ba      	b.n	8003d20 <_printf_i+0x150>
 8003daa:	682b      	ldr	r3, [r5, #0]
 8003dac:	1d1a      	adds	r2, r3, #4
 8003dae:	602a      	str	r2, [r5, #0]
 8003db0:	681d      	ldr	r5, [r3, #0]
 8003db2:	6862      	ldr	r2, [r4, #4]
 8003db4:	2100      	movs	r1, #0
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fc fa32 	bl	8000220 <memchr>
 8003dbc:	b108      	cbz	r0, 8003dc2 <_printf_i+0x1f2>
 8003dbe:	1b40      	subs	r0, r0, r5
 8003dc0:	6060      	str	r0, [r4, #4]
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	6123      	str	r3, [r4, #16]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dcc:	e7a8      	b.n	8003d20 <_printf_i+0x150>
 8003dce:	6923      	ldr	r3, [r4, #16]
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	47d0      	blx	sl
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d0ab      	beq.n	8003d34 <_printf_i+0x164>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	079b      	lsls	r3, r3, #30
 8003de0:	d413      	bmi.n	8003e0a <_printf_i+0x23a>
 8003de2:	68e0      	ldr	r0, [r4, #12]
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	4298      	cmp	r0, r3
 8003de8:	bfb8      	it	lt
 8003dea:	4618      	movlt	r0, r3
 8003dec:	e7a4      	b.n	8003d38 <_printf_i+0x168>
 8003dee:	2301      	movs	r3, #1
 8003df0:	4632      	mov	r2, r6
 8003df2:	4649      	mov	r1, r9
 8003df4:	4640      	mov	r0, r8
 8003df6:	47d0      	blx	sl
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d09b      	beq.n	8003d34 <_printf_i+0x164>
 8003dfc:	3501      	adds	r5, #1
 8003dfe:	68e3      	ldr	r3, [r4, #12]
 8003e00:	9903      	ldr	r1, [sp, #12]
 8003e02:	1a5b      	subs	r3, r3, r1
 8003e04:	42ab      	cmp	r3, r5
 8003e06:	dcf2      	bgt.n	8003dee <_printf_i+0x21e>
 8003e08:	e7eb      	b.n	8003de2 <_printf_i+0x212>
 8003e0a:	2500      	movs	r5, #0
 8003e0c:	f104 0619 	add.w	r6, r4, #25
 8003e10:	e7f5      	b.n	8003dfe <_printf_i+0x22e>
 8003e12:	bf00      	nop
 8003e14:	08004125 	.word	0x08004125
 8003e18:	08004136 	.word	0x08004136

08003e1c <memcpy>:
 8003e1c:	440a      	add	r2, r1
 8003e1e:	4291      	cmp	r1, r2
 8003e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e24:	d100      	bne.n	8003e28 <memcpy+0xc>
 8003e26:	4770      	bx	lr
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e32:	4291      	cmp	r1, r2
 8003e34:	d1f9      	bne.n	8003e2a <memcpy+0xe>
 8003e36:	bd10      	pop	{r4, pc}

08003e38 <memmove>:
 8003e38:	4288      	cmp	r0, r1
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	eb01 0402 	add.w	r4, r1, r2
 8003e40:	d902      	bls.n	8003e48 <memmove+0x10>
 8003e42:	4284      	cmp	r4, r0
 8003e44:	4623      	mov	r3, r4
 8003e46:	d807      	bhi.n	8003e58 <memmove+0x20>
 8003e48:	1e43      	subs	r3, r0, #1
 8003e4a:	42a1      	cmp	r1, r4
 8003e4c:	d008      	beq.n	8003e60 <memmove+0x28>
 8003e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e56:	e7f8      	b.n	8003e4a <memmove+0x12>
 8003e58:	4402      	add	r2, r0
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	428a      	cmp	r2, r1
 8003e5e:	d100      	bne.n	8003e62 <memmove+0x2a>
 8003e60:	bd10      	pop	{r4, pc}
 8003e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e6a:	e7f7      	b.n	8003e5c <memmove+0x24>

08003e6c <_free_r>:
 8003e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e6e:	2900      	cmp	r1, #0
 8003e70:	d044      	beq.n	8003efc <_free_r+0x90>
 8003e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e76:	9001      	str	r0, [sp, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e7e:	bfb8      	it	lt
 8003e80:	18e4      	addlt	r4, r4, r3
 8003e82:	f000 f913 	bl	80040ac <__malloc_lock>
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <_free_r+0x94>)
 8003e88:	9801      	ldr	r0, [sp, #4]
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	b933      	cbnz	r3, 8003e9c <_free_r+0x30>
 8003e8e:	6063      	str	r3, [r4, #4]
 8003e90:	6014      	str	r4, [r2, #0]
 8003e92:	b003      	add	sp, #12
 8003e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e98:	f000 b90e 	b.w	80040b8 <__malloc_unlock>
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	d908      	bls.n	8003eb2 <_free_r+0x46>
 8003ea0:	6825      	ldr	r5, [r4, #0]
 8003ea2:	1961      	adds	r1, r4, r5
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	bf01      	itttt	eq
 8003ea8:	6819      	ldreq	r1, [r3, #0]
 8003eaa:	685b      	ldreq	r3, [r3, #4]
 8003eac:	1949      	addeq	r1, r1, r5
 8003eae:	6021      	streq	r1, [r4, #0]
 8003eb0:	e7ed      	b.n	8003e8e <_free_r+0x22>
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b10b      	cbz	r3, 8003ebc <_free_r+0x50>
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d9fa      	bls.n	8003eb2 <_free_r+0x46>
 8003ebc:	6811      	ldr	r1, [r2, #0]
 8003ebe:	1855      	adds	r5, r2, r1
 8003ec0:	42a5      	cmp	r5, r4
 8003ec2:	d10b      	bne.n	8003edc <_free_r+0x70>
 8003ec4:	6824      	ldr	r4, [r4, #0]
 8003ec6:	4421      	add	r1, r4
 8003ec8:	1854      	adds	r4, r2, r1
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	d1e0      	bne.n	8003e92 <_free_r+0x26>
 8003ed0:	681c      	ldr	r4, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	6053      	str	r3, [r2, #4]
 8003ed6:	4421      	add	r1, r4
 8003ed8:	6011      	str	r1, [r2, #0]
 8003eda:	e7da      	b.n	8003e92 <_free_r+0x26>
 8003edc:	d902      	bls.n	8003ee4 <_free_r+0x78>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	6003      	str	r3, [r0, #0]
 8003ee2:	e7d6      	b.n	8003e92 <_free_r+0x26>
 8003ee4:	6825      	ldr	r5, [r4, #0]
 8003ee6:	1961      	adds	r1, r4, r5
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf04      	itt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	6063      	str	r3, [r4, #4]
 8003ef2:	bf04      	itt	eq
 8003ef4:	1949      	addeq	r1, r1, r5
 8003ef6:	6021      	streq	r1, [r4, #0]
 8003ef8:	6054      	str	r4, [r2, #4]
 8003efa:	e7ca      	b.n	8003e92 <_free_r+0x26>
 8003efc:	b003      	add	sp, #12
 8003efe:	bd30      	pop	{r4, r5, pc}
 8003f00:	200050dc 	.word	0x200050dc

08003f04 <sbrk_aligned>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	4e0e      	ldr	r6, [pc, #56]	; (8003f40 <sbrk_aligned+0x3c>)
 8003f08:	460c      	mov	r4, r1
 8003f0a:	6831      	ldr	r1, [r6, #0]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	b911      	cbnz	r1, 8003f16 <sbrk_aligned+0x12>
 8003f10:	f000 f8bc 	bl	800408c <_sbrk_r>
 8003f14:	6030      	str	r0, [r6, #0]
 8003f16:	4621      	mov	r1, r4
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 f8b7 	bl	800408c <_sbrk_r>
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	d00a      	beq.n	8003f38 <sbrk_aligned+0x34>
 8003f22:	1cc4      	adds	r4, r0, #3
 8003f24:	f024 0403 	bic.w	r4, r4, #3
 8003f28:	42a0      	cmp	r0, r4
 8003f2a:	d007      	beq.n	8003f3c <sbrk_aligned+0x38>
 8003f2c:	1a21      	subs	r1, r4, r0
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 f8ac 	bl	800408c <_sbrk_r>
 8003f34:	3001      	adds	r0, #1
 8003f36:	d101      	bne.n	8003f3c <sbrk_aligned+0x38>
 8003f38:	f04f 34ff 	mov.w	r4, #4294967295
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	200050e0 	.word	0x200050e0

08003f44 <_malloc_r>:
 8003f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f48:	1ccd      	adds	r5, r1, #3
 8003f4a:	f025 0503 	bic.w	r5, r5, #3
 8003f4e:	3508      	adds	r5, #8
 8003f50:	2d0c      	cmp	r5, #12
 8003f52:	bf38      	it	cc
 8003f54:	250c      	movcc	r5, #12
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	4607      	mov	r7, r0
 8003f5a:	db01      	blt.n	8003f60 <_malloc_r+0x1c>
 8003f5c:	42a9      	cmp	r1, r5
 8003f5e:	d905      	bls.n	8003f6c <_malloc_r+0x28>
 8003f60:	230c      	movs	r3, #12
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	2600      	movs	r6, #0
 8003f66:	4630      	mov	r0, r6
 8003f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f6c:	4e2e      	ldr	r6, [pc, #184]	; (8004028 <_malloc_r+0xe4>)
 8003f6e:	f000 f89d 	bl	80040ac <__malloc_lock>
 8003f72:	6833      	ldr	r3, [r6, #0]
 8003f74:	461c      	mov	r4, r3
 8003f76:	bb34      	cbnz	r4, 8003fc6 <_malloc_r+0x82>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	f7ff ffc2 	bl	8003f04 <sbrk_aligned>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	4604      	mov	r4, r0
 8003f84:	d14d      	bne.n	8004022 <_malloc_r+0xde>
 8003f86:	6834      	ldr	r4, [r6, #0]
 8003f88:	4626      	mov	r6, r4
 8003f8a:	2e00      	cmp	r6, #0
 8003f8c:	d140      	bne.n	8004010 <_malloc_r+0xcc>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	4631      	mov	r1, r6
 8003f92:	4638      	mov	r0, r7
 8003f94:	eb04 0803 	add.w	r8, r4, r3
 8003f98:	f000 f878 	bl	800408c <_sbrk_r>
 8003f9c:	4580      	cmp	r8, r0
 8003f9e:	d13a      	bne.n	8004016 <_malloc_r+0xd2>
 8003fa0:	6821      	ldr	r1, [r4, #0]
 8003fa2:	3503      	adds	r5, #3
 8003fa4:	1a6d      	subs	r5, r5, r1
 8003fa6:	f025 0503 	bic.w	r5, r5, #3
 8003faa:	3508      	adds	r5, #8
 8003fac:	2d0c      	cmp	r5, #12
 8003fae:	bf38      	it	cc
 8003fb0:	250c      	movcc	r5, #12
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4638      	mov	r0, r7
 8003fb6:	f7ff ffa5 	bl	8003f04 <sbrk_aligned>
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d02b      	beq.n	8004016 <_malloc_r+0xd2>
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	442b      	add	r3, r5
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	e00e      	b.n	8003fe4 <_malloc_r+0xa0>
 8003fc6:	6822      	ldr	r2, [r4, #0]
 8003fc8:	1b52      	subs	r2, r2, r5
 8003fca:	d41e      	bmi.n	800400a <_malloc_r+0xc6>
 8003fcc:	2a0b      	cmp	r2, #11
 8003fce:	d916      	bls.n	8003ffe <_malloc_r+0xba>
 8003fd0:	1961      	adds	r1, r4, r5
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	6025      	str	r5, [r4, #0]
 8003fd6:	bf18      	it	ne
 8003fd8:	6059      	strne	r1, [r3, #4]
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	bf08      	it	eq
 8003fde:	6031      	streq	r1, [r6, #0]
 8003fe0:	5162      	str	r2, [r4, r5]
 8003fe2:	604b      	str	r3, [r1, #4]
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f104 060b 	add.w	r6, r4, #11
 8003fea:	f000 f865 	bl	80040b8 <__malloc_unlock>
 8003fee:	f026 0607 	bic.w	r6, r6, #7
 8003ff2:	1d23      	adds	r3, r4, #4
 8003ff4:	1af2      	subs	r2, r6, r3
 8003ff6:	d0b6      	beq.n	8003f66 <_malloc_r+0x22>
 8003ff8:	1b9b      	subs	r3, r3, r6
 8003ffa:	50a3      	str	r3, [r4, r2]
 8003ffc:	e7b3      	b.n	8003f66 <_malloc_r+0x22>
 8003ffe:	6862      	ldr	r2, [r4, #4]
 8004000:	42a3      	cmp	r3, r4
 8004002:	bf0c      	ite	eq
 8004004:	6032      	streq	r2, [r6, #0]
 8004006:	605a      	strne	r2, [r3, #4]
 8004008:	e7ec      	b.n	8003fe4 <_malloc_r+0xa0>
 800400a:	4623      	mov	r3, r4
 800400c:	6864      	ldr	r4, [r4, #4]
 800400e:	e7b2      	b.n	8003f76 <_malloc_r+0x32>
 8004010:	4634      	mov	r4, r6
 8004012:	6876      	ldr	r6, [r6, #4]
 8004014:	e7b9      	b.n	8003f8a <_malloc_r+0x46>
 8004016:	230c      	movs	r3, #12
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4638      	mov	r0, r7
 800401c:	f000 f84c 	bl	80040b8 <__malloc_unlock>
 8004020:	e7a1      	b.n	8003f66 <_malloc_r+0x22>
 8004022:	6025      	str	r5, [r4, #0]
 8004024:	e7de      	b.n	8003fe4 <_malloc_r+0xa0>
 8004026:	bf00      	nop
 8004028:	200050dc 	.word	0x200050dc

0800402c <_realloc_r>:
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004030:	4680      	mov	r8, r0
 8004032:	4614      	mov	r4, r2
 8004034:	460e      	mov	r6, r1
 8004036:	b921      	cbnz	r1, 8004042 <_realloc_r+0x16>
 8004038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403c:	4611      	mov	r1, r2
 800403e:	f7ff bf81 	b.w	8003f44 <_malloc_r>
 8004042:	b92a      	cbnz	r2, 8004050 <_realloc_r+0x24>
 8004044:	f7ff ff12 	bl	8003e6c <_free_r>
 8004048:	4625      	mov	r5, r4
 800404a:	4628      	mov	r0, r5
 800404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004050:	f000 f838 	bl	80040c4 <_malloc_usable_size_r>
 8004054:	4284      	cmp	r4, r0
 8004056:	4607      	mov	r7, r0
 8004058:	d802      	bhi.n	8004060 <_realloc_r+0x34>
 800405a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800405e:	d812      	bhi.n	8004086 <_realloc_r+0x5a>
 8004060:	4621      	mov	r1, r4
 8004062:	4640      	mov	r0, r8
 8004064:	f7ff ff6e 	bl	8003f44 <_malloc_r>
 8004068:	4605      	mov	r5, r0
 800406a:	2800      	cmp	r0, #0
 800406c:	d0ed      	beq.n	800404a <_realloc_r+0x1e>
 800406e:	42bc      	cmp	r4, r7
 8004070:	4622      	mov	r2, r4
 8004072:	4631      	mov	r1, r6
 8004074:	bf28      	it	cs
 8004076:	463a      	movcs	r2, r7
 8004078:	f7ff fed0 	bl	8003e1c <memcpy>
 800407c:	4631      	mov	r1, r6
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fef4 	bl	8003e6c <_free_r>
 8004084:	e7e1      	b.n	800404a <_realloc_r+0x1e>
 8004086:	4635      	mov	r5, r6
 8004088:	e7df      	b.n	800404a <_realloc_r+0x1e>
	...

0800408c <_sbrk_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d06      	ldr	r5, [pc, #24]	; (80040a8 <_sbrk_r+0x1c>)
 8004090:	2300      	movs	r3, #0
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fefa 	bl	8000e90 <_sbrk>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_sbrk_r+0x1a>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_sbrk_r+0x1a>
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	200050e4 	.word	0x200050e4

080040ac <__malloc_lock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_lock+0x8>)
 80040ae:	f000 b811 	b.w	80040d4 <__retarget_lock_acquire_recursive>
 80040b2:	bf00      	nop
 80040b4:	200050e8 	.word	0x200050e8

080040b8 <__malloc_unlock>:
 80040b8:	4801      	ldr	r0, [pc, #4]	; (80040c0 <__malloc_unlock+0x8>)
 80040ba:	f000 b80c 	b.w	80040d6 <__retarget_lock_release_recursive>
 80040be:	bf00      	nop
 80040c0:	200050e8 	.word	0x200050e8

080040c4 <_malloc_usable_size_r>:
 80040c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c8:	1f18      	subs	r0, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bfbc      	itt	lt
 80040ce:	580b      	ldrlt	r3, [r1, r0]
 80040d0:	18c0      	addlt	r0, r0, r3
 80040d2:	4770      	bx	lr

080040d4 <__retarget_lock_acquire_recursive>:
 80040d4:	4770      	bx	lr

080040d6 <__retarget_lock_release_recursive>:
 80040d6:	4770      	bx	lr

080040d8 <_init>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

080040e4 <_fini>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	bf00      	nop
 80040e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ea:	bc08      	pop	{r3}
 80040ec:	469e      	mov	lr, r3
 80040ee:	4770      	bx	lr


uclab_hf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f8  080040f8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005000  200000ac  080041ac  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050ac  080041ac  000250ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa24  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2e  00000000  00000000  0002fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00031930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00032750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022302  00000000  00000000  000334b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010228  00000000  00000000  000557ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a7b  00000000  00000000  000659e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013845d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  001384b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004084 	.word	0x08004084

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	08004084 	.word	0x08004084

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Write7segsel>:


//is7segsel0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
//is7segsel1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
void Write7segsel(GPIO_PinState sel1, GPIO_PinState sel0)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71bb      	strb	r3, [r7, #6]
	if(sel0 == GPIO_PIN_SET)
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d106      	bne.n	80005e8 <Write7segsel+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <Write7segsel+0x58>)
 80005e2:	f001 f99f 	bl	8001924 <HAL_GPIO_WritePin>
 80005e6:	e005      	b.n	80005f4 <Write7segsel+0x30>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <Write7segsel+0x58>)
 80005f0:	f001 f998 	bl	8001924 <HAL_GPIO_WritePin>

	if(sel1 == GPIO_PIN_SET)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d106      	bne.n	8000608 <Write7segsel+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <Write7segsel+0x58>)
 8000602:	f001 f98f 	bl	8001924 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}
 8000606:	e005      	b.n	8000614 <Write7segsel+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <Write7segsel+0x58>)
 8000610:	f001 f988 	bl	8001924 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020000 	.word	0x40020000

08000620 <SensorInit>:

uint8_t sensorINT2_CTRLAddress = 0x0E;
uint8_t sensorINT2_CTRLData = 0x80;

void SensorInit()
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	484d      	ldr	r0, [pc, #308]	; (8000760 <SensorInit+0x140>)
 800062c:	f001 f97a 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL1_XLAddress, 1, -1);
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	2201      	movs	r2, #1
 8000636:	494b      	ldr	r1, [pc, #300]	; (8000764 <SensorInit+0x144>)
 8000638:	484b      	ldr	r0, [pc, #300]	; (8000768 <SensorInit+0x148>)
 800063a:	f002 f816 	bl	800266a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL1_XLData, 1, -1);
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	2201      	movs	r2, #1
 8000644:	4949      	ldr	r1, [pc, #292]	; (800076c <SensorInit+0x14c>)
 8000646:	4848      	ldr	r0, [pc, #288]	; (8000768 <SensorInit+0x148>)
 8000648:	f002 f80f 	bl	800266a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	4843      	ldr	r0, [pc, #268]	; (8000760 <SensorInit+0x140>)
 8000654:	f001 f966 	bl	8001924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	4840      	ldr	r0, [pc, #256]	; (8000760 <SensorInit+0x140>)
 8000660:	f001 f960 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL10_CAddress, 1, -1);
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2201      	movs	r2, #1
 800066a:	4941      	ldr	r1, [pc, #260]	; (8000770 <SensorInit+0x150>)
 800066c:	483e      	ldr	r0, [pc, #248]	; (8000768 <SensorInit+0x148>)
 800066e:	f001 fffc 	bl	800266a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL10_CData, 1, -1);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2201      	movs	r2, #1
 8000678:	493e      	ldr	r1, [pc, #248]	; (8000774 <SensorInit+0x154>)
 800067a:	483b      	ldr	r0, [pc, #236]	; (8000768 <SensorInit+0x148>)
 800067c:	f001 fff5 	bl	800266a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4836      	ldr	r0, [pc, #216]	; (8000760 <SensorInit+0x140>)
 8000688:	f001 f94c 	bl	8001924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	4833      	ldr	r0, [pc, #204]	; (8000760 <SensorInit+0x140>)
 8000694:	f001 f946 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorTAPCFGAddress, 1, -1);
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	2201      	movs	r2, #1
 800069e:	4936      	ldr	r1, [pc, #216]	; (8000778 <SensorInit+0x158>)
 80006a0:	4831      	ldr	r0, [pc, #196]	; (8000768 <SensorInit+0x148>)
 80006a2:	f001 ffe2 	bl	800266a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorTAPCFGData, 1, -1);
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
 80006aa:	2201      	movs	r2, #1
 80006ac:	4933      	ldr	r1, [pc, #204]	; (800077c <SensorInit+0x15c>)
 80006ae:	482e      	ldr	r0, [pc, #184]	; (8000768 <SensorInit+0x148>)
 80006b0:	f001 ffdb 	bl	800266a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	4829      	ldr	r0, [pc, #164]	; (8000760 <SensorInit+0x140>)
 80006bc:	f001 f932 	bl	8001924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	4826      	ldr	r0, [pc, #152]	; (8000760 <SensorInit+0x140>)
 80006c8:	f001 f92c 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorINT1_CTRLAddress, 1, -1);
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2201      	movs	r2, #1
 80006d2:	492b      	ldr	r1, [pc, #172]	; (8000780 <SensorInit+0x160>)
 80006d4:	4824      	ldr	r0, [pc, #144]	; (8000768 <SensorInit+0x148>)
 80006d6:	f001 ffc8 	bl	800266a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorINT1_CTRLData, 1, -1);
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	2201      	movs	r2, #1
 80006e0:	4928      	ldr	r1, [pc, #160]	; (8000784 <SensorInit+0x164>)
 80006e2:	4821      	ldr	r0, [pc, #132]	; (8000768 <SensorInit+0x148>)
 80006e4:	f001 ffc1 	bl	800266a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	481c      	ldr	r0, [pc, #112]	; (8000760 <SensorInit+0x140>)
 80006f0:	f001 f918 	bl	8001924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <SensorInit+0x140>)
 80006fc:	f001 f912 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorSTEP_COUNT_DELTAAddress, 1, -1);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2201      	movs	r2, #1
 8000706:	4920      	ldr	r1, [pc, #128]	; (8000788 <SensorInit+0x168>)
 8000708:	4817      	ldr	r0, [pc, #92]	; (8000768 <SensorInit+0x148>)
 800070a:	f001 ffae 	bl	800266a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorSTEP_COUNT_DELTAData, 1, -1);
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2201      	movs	r2, #1
 8000714:	491d      	ldr	r1, [pc, #116]	; (800078c <SensorInit+0x16c>)
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <SensorInit+0x148>)
 8000718:	f001 ffa7 	bl	800266a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	480f      	ldr	r0, [pc, #60]	; (8000760 <SensorInit+0x140>)
 8000724:	f001 f8fe 	bl	8001924 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	480c      	ldr	r0, [pc, #48]	; (8000760 <SensorInit+0x140>)
 8000730:	f001 f8f8 	bl	8001924 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorINT2_CTRLAddress, 1, -1);
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	2201      	movs	r2, #1
 800073a:	4915      	ldr	r1, [pc, #84]	; (8000790 <SensorInit+0x170>)
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <SensorInit+0x148>)
 800073e:	f001 ff94 	bl	800266a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorINT2_CTRLData, 1, -1);
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2201      	movs	r2, #1
 8000748:	4912      	ldr	r1, [pc, #72]	; (8000794 <SensorInit+0x174>)
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <SensorInit+0x148>)
 800074c:	f001 ff8d 	bl	800266a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <SensorInit+0x140>)
 8000758:	f001 f8e4 	bl	8001924 <HAL_GPIO_WritePin>


}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020800 	.word	0x40020800
 8000764:	20000034 	.word	0x20000034
 8000768:	20004f64 	.word	0x20004f64
 800076c:	20000035 	.word	0x20000035
 8000770:	20000032 	.word	0x20000032
 8000774:	20000033 	.word	0x20000033
 8000778:	20000030 	.word	0x20000030
 800077c:	20000031 	.word	0x20000031
 8000780:	2000002e 	.word	0x2000002e
 8000784:	2000002f 	.word	0x2000002f
 8000788:	20000036 	.word	0x20000036
 800078c:	20000037 	.word	0x20000037
 8000790:	20000038 	.word	0x20000038
 8000794:	20000039 	.word	0x20000039

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 fd92 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f830 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 f97a 	bl	8000a9c <MX_GPIO_Init>
  MX_SPI2_Init();
 80007a8:	f000 f89a 	bl	80008e0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80007ac:	f000 f94c 	bl	8000a48 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80007b0:	f000 f8cc 	bl	800094c <MX_SPI3_Init>
  MX_TIM10_Init();
 80007b4:	f000 f900 	bl	80009b8 <MX_TIM10_Init>
  MX_TIM11_Init();
 80007b8:	f000 f922 	bl	8000a00 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <main+0x5c>)
 80007be:	f002 f9ab 	bl	8002b18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80007c2:	480d      	ldr	r0, [pc, #52]	; (80007f8 <main+0x60>)
 80007c4:	f002 f9a8 	bl	8002b18 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ce:	480b      	ldr	r0, [pc, #44]	; (80007fc <main+0x64>)
 80007d0:	f001 f8a8 	bl	8001924 <HAL_GPIO_WritePin>
  SensorInit();
 80007d4:	f7ff ff24 	bl	8000620 <SensorInit>

  //LE engedelyezes
 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	4808      	ldr	r0, [pc, #32]	; (8000800 <main+0x68>)
 80007e0:	f001 f8a0 	bl	8001924 <HAL_GPIO_WritePin>

 		  //OE engedelyezes
 		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <main+0x64>)
 80007ec:	f001 f89a 	bl	8001924 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x58>
 80007f2:	bf00      	nop
 80007f4:	20004fbc 	.word	0x20004fbc
 80007f8:	20005004 	.word	0x20005004
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020000 	.word	0x40020000

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 ffc0 	bl	8003798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <SystemClock_Config+0xd4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a29      	ldr	r2, [pc, #164]	; (80008d8 <SystemClock_Config+0xd4>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <SystemClock_Config+0xd4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <SystemClock_Config+0xd8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <SystemClock_Config+0xd8>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <SystemClock_Config+0xd8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	2310      	movs	r3, #16
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000878:	2310      	movs	r3, #16
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800087c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000880:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000882:	2304      	movs	r3, #4
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fbc2 	bl	800201c <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089e:	f000 fad9 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f862 	bl	8001988 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ca:	f000 fac3 	bl	8000e54 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_SPI2_Init+0x64>)
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_SPI2_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI2_Init+0x64>)
 80008ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI2_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_SPI2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI2_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI2_Init+0x64>)
 800090c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000910:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI2_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_SPI2_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI2_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_SPI2_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI2_Init+0x64>)
 800092c:	220a      	movs	r2, #10
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_SPI2_Init+0x64>)
 8000932:	f001 fe11 	bl	8002558 <HAL_SPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800093c:	f000 fa8a 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20004f0c 	.word	0x20004f0c
 8000948:	40003800 	.word	0x40003800

0800094c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <MX_SPI3_Init+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000958:	f44f 7282 	mov.w	r2, #260	; 0x104
 800095c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_SPI3_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000980:	2208      	movs	r2, #8
 8000982:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_SPI3_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_SPI3_Init+0x64>)
 8000998:	220a      	movs	r2, #10
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_SPI3_Init+0x64>)
 800099e:	f001 fddb 	bl	8002558 <HAL_SPI_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80009a8:	f000 fa54 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20004f64 	.word	0x20004f64
 80009b4:	40003c00 	.word	0x40003c00

080009b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <MX_TIM10_Init+0x44>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000 - 1;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009c8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10 - 1;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009d2:	2209      	movs	r2, #9
 80009d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_TIM10_Init+0x40>)
 80009e4:	f002 f848 	bl	8002a78 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80009ee:	f000 fa31 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20004fbc 	.word	0x20004fbc
 80009fc:	40014400 	.word	0x40014400

08000a00 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <MX_TIM11_Init+0x44>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8000 - 1;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a0c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a10:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000 - 1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a1e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_TIM11_Init+0x40>)
 8000a2e:	f002 f823 	bl	8002a78 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000a38:	f000 fa0c 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20005004 	.word	0x20005004
 8000a44:	40014800 	.word	0x40014800

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a80:	f002 fa9e 	bl	8002fc0 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f9e3 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000504c 	.word	0x2000504c
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b50      	ldr	r3, [pc, #320]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a4f      	ldr	r2, [pc, #316]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a41      	ldr	r2, [pc, #260]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a3a      	ldr	r2, [pc, #232]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b38      	ldr	r3, [pc, #224]	; (8000bf8 <MX_GPIO_Init+0x15c>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8000b28:	4834      	ldr	r0, [pc, #208]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000b2a:	f000 fefb 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b34:	4832      	ldr	r0, [pc, #200]	; (8000c00 <MX_GPIO_Init+0x164>)
 8000b36:	f000 fef5 	bl	8001924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	482b      	ldr	r0, [pc, #172]	; (8000c00 <MX_GPIO_Init+0x164>)
 8000b52:	f000 fd3b 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b56:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4823      	ldr	r0, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000b70:	f000 fd2c 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b74:	2340      	movs	r3, #64	; 0x40
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	481d      	ldr	r0, [pc, #116]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000b88:	f000 fd20 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000ba2:	f000 fd13 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4810      	ldr	r0, [pc, #64]	; (8000c00 <MX_GPIO_Init+0x164>)
 8000bc0:	f000 fd04 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_GPIO_Init+0x160>)
 8000bdc:	f000 fcf6 	bl	80015cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2017      	movs	r0, #23
 8000be6:	f000 fcba 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bea:	2017      	movs	r0, #23
 8000bec:	f000 fcd3 	bl	8001596 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020800 	.word	0x40020800

08000c04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a57      	ldr	r2, [pc, #348]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	f040 809d 	bne.w	8000d50 <HAL_TIM_PeriodElapsedCallback+0x14c>
	{
		if(is7segsel1 == GPIO_PIN_RESET && is7segsel0 == GPIO_PIN_RESET)
 8000c16:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d110      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000c1e:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10c      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				Write7segsel(GPIO_PIN_RESET, GPIO_PIN_SET);
 8000c26:	2101      	movs	r1, #1
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fccb 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display2[digitindex2], 1, 0);
 8000c2e:	4b52      	ldr	r3, [pc, #328]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a52      	ldr	r2, [pc, #328]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000c34:	1899      	adds	r1, r3, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4851      	ldr	r0, [pc, #324]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000c3c:	f001 fd15 	bl	800266a <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_RESET && is7segsel0 == GPIO_PIN_SET)
 8000c40:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d110      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x66>
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d10c      	bne.n	8000c6a <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				Write7segsel(GPIO_PIN_SET, GPIO_PIN_RESET);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2001      	movs	r0, #1
 8000c54:	f7ff fcb6 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display1[digitindex1], 1, 0);
 8000c58:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c5e:	1899      	adds	r1, r3, r2
 8000c60:	2300      	movs	r3, #0
 8000c62:	2201      	movs	r2, #1
 8000c64:	4846      	ldr	r0, [pc, #280]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000c66:	f001 fd00 	bl	800266a <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_SET && is7segsel0 == GPIO_PIN_RESET)
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d110      	bne.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000c72:	4b40      	ldr	r3, [pc, #256]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10c      	bne.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x90>
			{
				Write7segsel(GPIO_PIN_SET, GPIO_PIN_SET);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fca1 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display0[digitindex0], 1, 0);
 8000c82:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a42      	ldr	r2, [pc, #264]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000c88:	1899      	adds	r1, r3, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	483c      	ldr	r0, [pc, #240]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000c90:	f001 fceb 	bl	800266a <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_SET && is7segsel0 == GPIO_PIN_SET)
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d110      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0xba>
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10c      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				Write7segsel(GPIO_PIN_RESET, GPIO_PIN_RESET);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff fc8c 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display3[digitindex3], 1, 0);
 8000cac:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a39      	ldr	r2, [pc, #228]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000cb2:	1899      	adds	r1, r3, r2
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4831      	ldr	r0, [pc, #196]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000cba:	f001 fcd6 	bl	800266a <HAL_SPI_Transmit>
			}


			is7segsel0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	4836      	ldr	r0, [pc, #216]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cc4:	f000 fe16 	bl	80018f4 <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000cce:	701a      	strb	r2, [r3, #0]
			is7segsel1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8000cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd4:	4831      	ldr	r0, [pc, #196]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000cd6:	f000 fe0d 	bl	80018f4 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ce0:	701a      	strb	r2, [r3, #0]
		//LED villogtatás
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		if(digitindex0 == 10)
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d132      	bne.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			digitindex0 = 0;
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]

			if(digitindex1 != 9)
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	d005      	beq.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x100>
			{
				digitindex1++;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e025      	b.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x14c>
			}
			else
			{
				digitindex1 = 0;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]

				if(digitindex2 != 9)
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b09      	cmp	r3, #9
 8000d10:	d005      	beq.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x11a>
				{
					digitindex2++;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	e018      	b.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x14c>
				}
				else
				{
					digitindex2 = 0;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]

					if(digitindex3 != 9)
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	d005      	beq.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x134>
					{
						digitindex3++;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x14c>
					}
					else
					{
						digitindex0 = 0;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
						digitindex1 = 0;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
						digitindex2 = 0;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
						digitindex3 = 0;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}

	if(htim == &htim11)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d105      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x160>
		{
			time++;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d62:	801a      	strh	r2, [r3, #0]
		}

}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20004fbc 	.word	0x20004fbc
 8000d70:	20005091 	.word	0x20005091
 8000d74:	20005090 	.word	0x20005090
 8000d78:	200000d0 	.word	0x200000d0
 8000d7c:	20000018 	.word	0x20000018
 8000d80:	20004f0c 	.word	0x20004f0c
 8000d84:	200000cc 	.word	0x200000cc
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	200000c8 	.word	0x200000c8
 8000d90:	20000000 	.word	0x20000000
 8000d94:	200000d4 	.word	0x200000d4
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	20005004 	.word	0x20005004
 8000da4:	20004ef8 	.word	0x20004ef8

08000da8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9)
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db8:	d124      	bne.n	8000e04 <HAL_GPIO_EXTI_Callback+0x5c>
	{
		//increasing the step counter
		digitindex0++;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x84>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x84>)
 8000dc2:	6013      	str	r3, [r2, #0]

		steptimes[steptimesindex] = time;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x88>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000dcc:	8819      	ldrh	r1, [r3, #0]
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x90>)
 8000dd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		//usarttemp = steptimes[steptimesindex] / 1000;

		//test after some calculations bases on experiments
		//steptimes[steptimesindex] = (steptimes[steptimesindex]) / 9;

		sprintf(timestampstr, "%d\r\n", time);
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4918      	ldr	r1, [pc, #96]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x94>)
 8000ddc:	4818      	ldr	r0, [pc, #96]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x98>)
 8000dde:	f002 fce3 	bl	80037a8 <siprintf>


		HAL_UART_Transmit(&huart2, (uint8_t*) timestampstr, strlen(timestampstr), -1);
 8000de2:	4817      	ldr	r0, [pc, #92]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x98>)
 8000de4:	f7ff fa14 	bl	8000210 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	4913      	ldr	r1, [pc, #76]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x98>)
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000df4:	f002 f931 	bl	800305a <HAL_UART_Transmit>
		//HAL_UART_Transmit(&huart2, &CR, 1, 0); //carriage return on the terminal
		//HAL_UART_Transmit(&huart2, &NL, 1, 0); //new line on the terminal

		//of course we have to increment the index
		steptimesindex++;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x88>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e02:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_7)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	2b80      	cmp	r3, #128	; 0x80
 8000e08:	d10b      	bne.n	8000e22 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		digitindex0 = 0;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x84>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
		digitindex1 = 0;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
		digitindex2 = 0;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
		digitindex3 = 0;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
	}
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000c8 	.word	0x200000c8
 8000e30:	20004ef6 	.word	0x20004ef6
 8000e34:	20004ef8 	.word	0x20004ef8
 8000e38:	200000d8 	.word	0x200000d8
 8000e3c:	0800409c 	.word	0x0800409c
 8000e40:	20004efc 	.word	0x20004efc
 8000e44:	2000504c 	.word	0x2000504c
 8000e48:	200000cc 	.word	0x200000cc
 8000e4c:	200000d0 	.word	0x200000d0
 8000e50:	200000d4 	.word	0x200000d4

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f000 fb52 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a51      	ldr	r2, [pc, #324]	; (8001014 <HAL_SPI_MspInit+0x164>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d14b      	bne.n	8000f6a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	4b50      	ldr	r3, [pc, #320]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a4f      	ldr	r2, [pc, #316]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a41      	ldr	r2, [pc, #260]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f26:	2302      	movs	r3, #2
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000f36:	2307      	movs	r3, #7
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4836      	ldr	r0, [pc, #216]	; (800101c <HAL_SPI_MspInit+0x16c>)
 8000f42:	f000 fb43 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f58:	2305      	movs	r3, #5
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	482f      	ldr	r0, [pc, #188]	; (8001020 <HAL_SPI_MspInit+0x170>)
 8000f64:	f000 fb32 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f68:	e04f      	b.n	800100a <HAL_SPI_MspInit+0x15a>
  else if(hspi->Instance==SPI3)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	; (8001024 <HAL_SPI_MspInit+0x174>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d14a      	bne.n	800100a <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a18      	ldr	r2, [pc, #96]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_SPI_MspInit+0x168>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480f      	ldr	r0, [pc, #60]	; (8001020 <HAL_SPI_MspInit+0x170>)
 8000fe4:	f000 faf2 	bl	80015cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fe8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_SPI_MspInit+0x16c>)
 8001006:	f000 fae1 	bl	80015cc <HAL_GPIO_Init>
}
 800100a:	bf00      	nop
 800100c:	3738      	adds	r7, #56	; 0x38
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40003800 	.word	0x40003800
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020400 	.word	0x40020400
 8001024:	40003c00 	.word	0x40003c00

08001028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_TIM_Base_MspInit+0x80>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d116      	bne.n	8001068 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_TIM_Base_MspInit+0x84>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <HAL_TIM_Base_MspInit+0x84>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_TIM_Base_MspInit+0x84>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2019      	movs	r0, #25
 800105c:	f000 fa7f 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001060:	2019      	movs	r0, #25
 8001062:	f000 fa98 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001066:	e01a      	b.n	800109e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_TIM_Base_MspInit+0x88>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d115      	bne.n	800109e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_TIM_Base_MspInit+0x84>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_TIM_Base_MspInit+0x84>)
 800107c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_Base_MspInit+0x84>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	201a      	movs	r0, #26
 8001094:	f000 fa63 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001098:	201a      	movs	r0, #26
 800109a:	f000 fa7c 	bl	8001596 <HAL_NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40014400 	.word	0x40014400
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40014800 	.word	0x40014800

080010b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_UART_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12b      	bne.n	800112e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_UART_MspInit+0x88>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_UART_MspInit+0x88>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_UART_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_UART_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <HAL_UART_MspInit+0x88>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_UART_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110e:	230c      	movs	r3, #12
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_UART_MspInit+0x8c>)
 800112a:	f000 fa4f 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f8ea 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800119c:	2080      	movs	r0, #128	; 0x80
 800119e:	f000 fbdb 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011a6:	f000 fbd7 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80011aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ae:	f000 fbd3 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80011be:	f001 fd1b 	bl	8002bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20004fbc 	.word	0x20004fbc

080011cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80011d2:	f001 fd11 	bl	8002bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20005004 	.word	0x20005004

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f002 fa98 	bl	8003744 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20020000 	.word	0x20020000
 8001240:	00000400 	.word	0x00000400
 8001244:	20005094 	.word	0x20005094
 8001248:	200050b0 	.word	0x200050b0

0800124c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001276:	490e      	ldr	r1, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800128c:	4c0b      	ldr	r4, [pc, #44]	; (80012bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800129a:	f7ff ffd7 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129e:	f002 fa57 	bl	8003750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fa79 	bl	8000798 <main>
  bx  lr    
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80012b4:	08004100 	.word	0x08004100
  ldr r2, =_sbss
 80012b8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80012bc:	200050ac 	.word	0x200050ac

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_Init+0x40>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_Init+0x40>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_Init+0x40>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f92b 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fdb2 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f943 	bl	80015b2 <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 f90b 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000003c 	.word	0x2000003c
 8001360:	20000044 	.word	0x20000044
 8001364:	20000040 	.word	0x20000040

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000044 	.word	0x20000044
 800138c:	20005098 	.word	0x20005098

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20005098 	.word	0x20005098

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	e165      	b.n	80018b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	429a      	cmp	r2, r3
 8001602:	f040 8154 	bne.w	80018ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d005      	beq.n	800161e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	2b02      	cmp	r3, #2
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d123      	bne.n	8001710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	08da      	lsrs	r2, r3, #3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3208      	adds	r2, #8
 80016d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	08da      	lsrs	r2, r3, #3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3208      	adds	r2, #8
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0203 	and.w	r2, r3, #3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80ae 	beq.w	80018ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a5c      	ldr	r2, [pc, #368]	; (80018cc <HAL_GPIO_Init+0x300>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176e:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_GPIO_Init+0x304>)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	220f      	movs	r2, #15
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x308>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d025      	beq.n	80017e6 <HAL_GPIO_Init+0x21a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <HAL_GPIO_Init+0x30c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01f      	beq.n	80017e2 <HAL_GPIO_Init+0x216>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <HAL_GPIO_Init+0x310>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d019      	beq.n	80017de <HAL_GPIO_Init+0x212>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x314>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_GPIO_Init+0x318>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00d      	beq.n	80017d6 <HAL_GPIO_Init+0x20a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <HAL_GPIO_Init+0x31c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d007      	beq.n	80017d2 <HAL_GPIO_Init+0x206>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x320>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_GPIO_Init+0x202>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00c      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e00a      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x21c>
 80017e6:	2300      	movs	r3, #0
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f002 0203 	and.w	r2, r2, #3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001806:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182a:	4a31      	ldr	r2, [pc, #196]	; (80018f0 <HAL_GPIO_Init+0x324>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001830:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001854:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_GPIO_Init+0x324>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x324>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_GPIO_Init+0x324>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b0f      	cmp	r3, #15
 80018b8:	f67f ae96 	bls.w	80015e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	e001      	b.n	8001916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001916:	7bfb      	ldrb	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001934:	787b      	ldrb	r3, [r7, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	041a      	lsls	r2, r3, #16
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	619a      	str	r2, [r3, #24]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fa16 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cc      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 030f 	and.w	r3, r3, #15
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d90c      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b63      	ldr	r3, [pc, #396]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b8      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	494d      	ldr	r1, [pc, #308]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d044      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e067      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4934      	ldr	r1, [pc, #208]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff fc8a 	bl	8001390 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff fc86 	bl	8001390 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e04f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d20c      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e032      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4916      	ldr	r1, [pc, #88]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f855 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490a      	ldr	r1, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbea 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00
 8001b44:	40023800 	.word	0x40023800
 8001b48:	080040a4 	.word	0x080040a4
 8001b4c:	2000003c 	.word	0x2000003c
 8001b50:	20000040 	.word	0x20000040

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000003c 	.word	0x2000003c

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	080040b4 	.word	0x080040b4

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b98:	f7ff ffdc 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0b5b      	lsrs	r3, r3, #13
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4903      	ldr	r1, [pc, #12]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	080040b4 	.word	0x080040b4

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b0ae      	sub	sp, #184	; 0xb8
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be2:	4bcb      	ldr	r3, [pc, #812]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	f200 8206 	bhi.w	8001ffc <HAL_RCC_GetSysClockFreq+0x440>
 8001bf0:	a201      	add	r2, pc, #4	; (adr r2, 8001bf8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf6:	bf00      	nop
 8001bf8:	08001c2d 	.word	0x08001c2d
 8001bfc:	08001ffd 	.word	0x08001ffd
 8001c00:	08001ffd 	.word	0x08001ffd
 8001c04:	08001ffd 	.word	0x08001ffd
 8001c08:	08001c35 	.word	0x08001c35
 8001c0c:	08001ffd 	.word	0x08001ffd
 8001c10:	08001ffd 	.word	0x08001ffd
 8001c14:	08001ffd 	.word	0x08001ffd
 8001c18:	08001c3d 	.word	0x08001c3d
 8001c1c:	08001ffd 	.word	0x08001ffd
 8001c20:	08001ffd 	.word	0x08001ffd
 8001c24:	08001ffd 	.word	0x08001ffd
 8001c28:	08001e2d 	.word	0x08001e2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4bb9      	ldr	r3, [pc, #740]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c32:	e1e7      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c34:	4bb8      	ldr	r3, [pc, #736]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c3a:	e1e3      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c3c:	4bb4      	ldr	r3, [pc, #720]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c48:	4bb1      	ldr	r3, [pc, #708]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d071      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c54:	4bae      	ldr	r3, [pc, #696]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	462b      	mov	r3, r5
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4621      	mov	r1, r4
 8001c94:	1a51      	subs	r1, r2, r1
 8001c96:	6439      	str	r1, [r7, #64]	; 0x40
 8001c98:	4629      	mov	r1, r5
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001cac:	4649      	mov	r1, r9
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb6:	4641      	mov	r1, r8
 8001cb8:	018a      	lsls	r2, r1, #6
 8001cba:	4641      	mov	r1, r8
 8001cbc:	1a51      	subs	r1, r2, r1
 8001cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	00cb      	lsls	r3, r1, #3
 8001cd8:	4641      	mov	r1, r8
 8001cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cde:	4641      	mov	r1, r8
 8001ce0:	00ca      	lsls	r2, r1, #3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4622      	mov	r2, r4
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
 8001cee:	462b      	mov	r3, r5
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	eb42 0303 	adc.w	r3, r2, r3
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d04:	4629      	mov	r1, r5
 8001d06:	024b      	lsls	r3, r1, #9
 8001d08:	4621      	mov	r1, r4
 8001d0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d0e:	4621      	mov	r1, r4
 8001d10:	024a      	lsls	r2, r1, #9
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d28:	f7fe faca 	bl	80002c0 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d36:	e067      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d52:	2300      	movs	r3, #0
 8001d54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	462b      	mov	r3, r5
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0159      	lsls	r1, r3, #5
 8001d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6c:	0150      	lsls	r0, r2, #5
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4621      	mov	r1, r4
 8001d74:	1a51      	subs	r1, r2, r1
 8001d76:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d78:	4629      	mov	r1, r5
 8001d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	4641      	mov	r1, r8
 8001d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d96:	4641      	mov	r1, r8
 8001d98:	018a      	lsls	r2, r1, #6
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da0:	4649      	mov	r1, r9
 8001da2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001db2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001db6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dba:	4692      	mov	sl, r2
 8001dbc:	469b      	mov	fp, r3
 8001dbe:	4623      	mov	r3, r4
 8001dc0:	eb1a 0303 	adds.w	r3, sl, r3
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	462b      	mov	r3, r5
 8001dc8:	eb4b 0303 	adc.w	r3, fp, r3
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001dda:	4629      	mov	r1, r5
 8001ddc:	028b      	lsls	r3, r1, #10
 8001dde:	4621      	mov	r1, r4
 8001de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001de4:	4621      	mov	r1, r4
 8001de6:	028a      	lsls	r2, r1, #10
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df0:	2200      	movs	r2, #0
 8001df2:	673b      	str	r3, [r7, #112]	; 0x70
 8001df4:	677a      	str	r2, [r7, #116]	; 0x74
 8001df6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001dfa:	f7fe fa61 	bl	80002c0 <__aeabi_uldivmod>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4613      	mov	r3, r2
 8001e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e2a:	e0eb      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2c:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d06b      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e56:	663b      	str	r3, [r7, #96]	; 0x60
 8001e58:	2300      	movs	r3, #0
 8001e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e60:	4622      	mov	r2, r4
 8001e62:	462b      	mov	r3, r5
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	0159      	lsls	r1, r3, #5
 8001e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e72:	0150      	lsls	r0, r2, #5
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4621      	mov	r1, r4
 8001e7a:	1a51      	subs	r1, r2, r1
 8001e7c:	61b9      	str	r1, [r7, #24]
 8001e7e:	4629      	mov	r1, r5
 8001e80:	eb63 0301 	sbc.w	r3, r3, r1
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e92:	4659      	mov	r1, fp
 8001e94:	018b      	lsls	r3, r1, #6
 8001e96:	4651      	mov	r1, sl
 8001e98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e9c:	4651      	mov	r1, sl
 8001e9e:	018a      	lsls	r2, r1, #6
 8001ea0:	4651      	mov	r1, sl
 8001ea2:	ebb2 0801 	subs.w	r8, r2, r1
 8001ea6:	4659      	mov	r1, fp
 8001ea8:	eb63 0901 	sbc.w	r9, r3, r1
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ebc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	4699      	mov	r9, r3
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	eb18 0303 	adds.w	r3, r8, r3
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	462b      	mov	r3, r5
 8001ece:	eb49 0303 	adc.w	r3, r9, r3
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	024b      	lsls	r3, r1, #9
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eea:	4621      	mov	r1, r4
 8001eec:	024a      	lsls	r2, r1, #9
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001efa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001efc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f00:	f7fe f9de 	bl	80002c0 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f0e:	e065      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x420>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	099b      	lsrs	r3, r3, #6
 8001f22:	2200      	movs	r2, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	4611      	mov	r1, r2
 8001f28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001f2e:	2300      	movs	r3, #0
 8001f30:	657b      	str	r3, [r7, #84]	; 0x54
 8001f32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f36:	4642      	mov	r2, r8
 8001f38:	464b      	mov	r3, r9
 8001f3a:	f04f 0000 	mov.w	r0, #0
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	0159      	lsls	r1, r3, #5
 8001f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f48:	0150      	lsls	r0, r2, #5
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4641      	mov	r1, r8
 8001f50:	1a51      	subs	r1, r2, r1
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	4649      	mov	r1, r9
 8001f56:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f68:	4659      	mov	r1, fp
 8001f6a:	018b      	lsls	r3, r1, #6
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f72:	4651      	mov	r1, sl
 8001f74:	018a      	lsls	r2, r1, #6
 8001f76:	4651      	mov	r1, sl
 8001f78:	1a54      	subs	r4, r2, r1
 8001f7a:	4659      	mov	r1, fp
 8001f7c:	eb63 0501 	sbc.w	r5, r3, r1
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	00eb      	lsls	r3, r5, #3
 8001f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8e:	00e2      	lsls	r2, r4, #3
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	4643      	mov	r3, r8
 8001f96:	18e3      	adds	r3, r4, r3
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fae:	4629      	mov	r1, r5
 8001fb0:	028b      	lsls	r3, r1, #10
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb8:	4621      	mov	r1, r4
 8001fba:	028a      	lsls	r2, r1, #10
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fc8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001fca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fce:	f7fe f977 	bl	80002c0 <__aeabi_uldivmod>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	0f1b      	lsrs	r3, r3, #28
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ffa:	e003      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002002:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002008:	4618      	mov	r0, r3
 800200a:	37b8      	adds	r7, #184	; 0xb8
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	00f42400 	.word	0x00f42400

0800201c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e28d      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8083 	beq.w	8002142 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800203c:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b04      	cmp	r3, #4
 8002046:	d019      	beq.n	800207c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002048:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002050:	2b08      	cmp	r3, #8
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002054:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x124>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e25a      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x90>
 800209e:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a7b      	ldr	r2, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xcc>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0xb4>
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a75      	ldr	r2, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a72      	ldr	r2, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xcc>
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6e      	ldr	r2, [pc, #440]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6b      	ldr	r2, [pc, #428]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f94e 	bl	8001390 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff f94a 	bl	8001390 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e21f      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xdc>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff f93a 	bl	8001390 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff f936 	bl	8001390 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e20b      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x104>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d06f      	beq.n	800222e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800214e:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d017      	beq.n	800218a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800215a:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d105      	bne.n	8002172 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d11c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b44      	ldr	r3, [pc, #272]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x186>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e1d3      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4937      	ldr	r1, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	e03a      	b.n	800222e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_RCC_OscConfig+0x278>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff f8e3 	bl	8001390 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff f8df 	bl	8001390 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1b4      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4925      	ldr	r1, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x278>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7ff f8c2 	bl	8001390 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002210:	f7ff f8be 	bl	8001390 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e193      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d036      	beq.n	80022a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff f8a2 	bl	8001390 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002250:	f7ff f89e 	bl	8001390 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e173      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x234>
 800226e:	e01b      	b.n	80022a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002276:	f7ff f88b 	bl	8001390 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	e00e      	b.n	800229c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227e:	f7ff f887 	bl	8001390 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d907      	bls.n	800229c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e15c      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
 8002290:	40023800 	.word	0x40023800
 8002294:	42470000 	.word	0x42470000
 8002298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b8a      	ldr	r3, [pc, #552]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1ea      	bne.n	800227e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8097 	beq.w	80023e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b83      	ldr	r3, [pc, #524]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a7e      	ldr	r2, [pc, #504]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b7c      	ldr	r3, [pc, #496]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b79      	ldr	r3, [pc, #484]	; (80024cc <HAL_RCC_OscConfig+0x4b0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x4b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a75      	ldr	r2, [pc, #468]	; (80024cc <HAL_RCC_OscConfig+0x4b0>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f847 	bl	8001390 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff f843 	bl	8001390 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e118      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x4b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x31e>
 800232c:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a65      	ldr	r2, [pc, #404]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	e01c      	b.n	8002374 <HAL_RCC_OscConfig+0x358>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b05      	cmp	r3, #5
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x340>
 8002342:	4b61      	ldr	r3, [pc, #388]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	4b5e      	ldr	r3, [pc, #376]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a5d      	ldr	r2, [pc, #372]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x358>
 800235c:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a56      	ldr	r2, [pc, #344]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7ff f808 	bl	8001390 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	e00a      	b.n	800239a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002384:	f7ff f804 	bl	8001390 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0d7      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0ee      	beq.n	8002384 <HAL_RCC_OscConfig+0x368>
 80023a6:	e014      	b.n	80023d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7fe fff2 	bl	8001390 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b0:	f7fe ffee 	bl	8001390 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e0c1      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ee      	bne.n	80023b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a3a      	ldr	r2, [pc, #232]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80ad 	beq.w	8002548 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ee:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d060      	beq.n	80024bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d145      	bne.n	800248e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <HAL_RCC_OscConfig+0x4b4>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe ffc2 	bl	8001390 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe ffbe 	bl	8001390 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e093      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	491b      	ldr	r1, [pc, #108]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x4b4>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe ff93 	bl	8001390 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe ff8f 	bl	8001390 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e064      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x452>
 800248c:	e05c      	b.n	8002548 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_OscConfig+0x4b4>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe ff7c 	bl	8001390 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe ff78 	bl	8001390 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04d      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x480>
 80024ba:	e045      	b.n	8002548 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e040      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40007000 	.word	0x40007000
 80024d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x538>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d030      	beq.n	8002544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d129      	bne.n	8002544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d122      	bne.n	8002544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002504:	4013      	ands	r3, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800250a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800250c:	4293      	cmp	r3, r2
 800250e:	d119      	bne.n	8002544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	3b01      	subs	r3, #1
 800251e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d10f      	bne.n	8002544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07b      	b.n	8002662 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800257a:	d009      	beq.n	8002590 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
 8002582:	e005      	b.n	8002590 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fc80 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002614:	ea42 0103 	orr.w	r1, r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0104 	and.w	r1, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f003 0210 	and.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002650:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b088      	sub	sp, #32
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_SPI_Transmit+0x22>
 8002688:	2302      	movs	r3, #2
 800268a:	e126      	b.n	80028da <HAL_SPI_Transmit+0x270>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002694:	f7fe fe7c 	bl	8001390 <HAL_GetTick>
 8002698:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d002      	beq.n	80026b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026aa:	2302      	movs	r3, #2
 80026ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026ae:	e10b      	b.n	80028c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_SPI_Transmit+0x52>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026c0:	e102      	b.n	80028c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2203      	movs	r2, #3
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	88fa      	ldrh	r2, [r7, #6]
 80026da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002708:	d10f      	bne.n	800272a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002718:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002728:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d007      	beq.n	8002748 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002750:	d14b      	bne.n	80027ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_SPI_Transmit+0xf6>
 800275a:	8afb      	ldrh	r3, [r7, #22]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d13e      	bne.n	80027de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	881a      	ldrh	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	1c9a      	adds	r2, r3, #2
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002784:	e02b      	b.n	80027de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d112      	bne.n	80027ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	881a      	ldrh	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	1c9a      	adds	r2, r3, #2
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80027b8:	e011      	b.n	80027de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ba:	f7fe fde9 	bl	8001390 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d803      	bhi.n	80027d2 <HAL_SPI_Transmit+0x168>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d102      	bne.n	80027d8 <HAL_SPI_Transmit+0x16e>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027dc:	e074      	b.n	80028c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ce      	bne.n	8002786 <HAL_SPI_Transmit+0x11c>
 80027e8:	e04c      	b.n	8002884 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_SPI_Transmit+0x18e>
 80027f2:	8afb      	ldrh	r3, [r7, #22]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d140      	bne.n	800287a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800281e:	e02c      	b.n	800287a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d113      	bne.n	8002856 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	7812      	ldrb	r2, [r2, #0]
 800283a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	86da      	strh	r2, [r3, #54]	; 0x36
 8002854:	e011      	b.n	800287a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002856:	f7fe fd9b 	bl	8001390 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d803      	bhi.n	800286e <HAL_SPI_Transmit+0x204>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286c:	d102      	bne.n	8002874 <HAL_SPI_Transmit+0x20a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002878:	e026      	b.n	80028c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1cd      	bne.n	8002820 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	6839      	ldr	r1, [r7, #0]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8b3 	bl	80029f4 <SPI_EndRxTxTransaction>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77fb      	strb	r3, [r7, #31]
 80028c4:	e000      	b.n	80028c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80028c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028f4:	f7fe fd4c 	bl	8001390 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	4413      	add	r3, r2
 8002902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002904:	f7fe fd44 	bl	8001390 <HAL_GetTick>
 8002908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	015b      	lsls	r3, r3, #5
 8002910:	0d1b      	lsrs	r3, r3, #20
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800291a:	e054      	b.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002922:	d050      	beq.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002924:	f7fe fd34 	bl	8001390 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	429a      	cmp	r2, r3
 8002932:	d902      	bls.n	800293a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d13d      	bne.n	80029b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002952:	d111      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295c:	d004      	beq.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	d107      	bne.n	8002978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002980:	d10f      	bne.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e017      	b.n	80029e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d19b      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000003c 	.word	0x2000003c

080029f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <SPI_EndRxTxTransaction+0x7c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <SPI_EndRxTxTransaction+0x80>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0d5b      	lsrs	r3, r3, #21
 8002a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a1e:	d112      	bne.n	8002a46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff ff5a 	bl	80028e4 <SPI_WaitFlagStateUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e00f      	b.n	8002a66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d0f2      	beq.n	8002a46 <SPI_EndRxTxTransaction+0x52>
 8002a60:	e000      	b.n	8002a64 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a62:	bf00      	nop
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000003c 	.word	0x2000003c
 8002a74:	165e9f81 	.word	0x165e9f81

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e041      	b.n	8002b0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fac2 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f000 f9ce 	bl	8002e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e04e      	b.n	8002bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d022      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5a:	d01d      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d018      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_TIM_Base_Start_IT+0xd4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d009      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x80>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d010      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	e007      	b.n	8002bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40001800 	.word	0x40001800

08002bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0202 	mvn.w	r2, #2
 8002c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8ee 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8e0 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f8f1 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0204 	mvn.w	r2, #4
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8c4 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8b6 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8c7 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0208 	mvn.w	r2, #8
 8002ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f89a 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f88c 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f89d 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0210 	mvn.w	r2, #16
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2208      	movs	r2, #8
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f870 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f862 	bl	8002e08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f873 	bl	8002e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0201 	mvn.w	r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd ff44 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b80      	cmp	r3, #128	; 0x80
 8002d88:	d10e      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d107      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f902 	bl	8002fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f838 	bl	8002e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0220 	mvn.w	r2, #32
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8cc 	bl	8002f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a40      	ldr	r2, [pc, #256]	; (8002f6c <TIM_Base_SetConfig+0x114>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d00f      	beq.n	8002e98 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <TIM_Base_SetConfig+0x118>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00b      	beq.n	8002e98 <TIM_Base_SetConfig+0x40>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <TIM_Base_SetConfig+0x11c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <TIM_Base_SetConfig+0x40>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <TIM_Base_SetConfig+0x120>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a3a      	ldr	r2, [pc, #232]	; (8002f7c <TIM_Base_SetConfig+0x124>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d108      	bne.n	8002eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <TIM_Base_SetConfig+0x114>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d02b      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb8:	d027      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <TIM_Base_SetConfig+0x118>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d023      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	; (8002f74 <TIM_Base_SetConfig+0x11c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01f      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <TIM_Base_SetConfig+0x120>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01b      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <TIM_Base_SetConfig+0x124>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d017      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a28      	ldr	r2, [pc, #160]	; (8002f80 <TIM_Base_SetConfig+0x128>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <TIM_Base_SetConfig+0x12c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00f      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <TIM_Base_SetConfig+0x130>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a25      	ldr	r2, [pc, #148]	; (8002f8c <TIM_Base_SetConfig+0x134>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d007      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <TIM_Base_SetConfig+0x138>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d003      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <TIM_Base_SetConfig+0x13c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d108      	bne.n	8002f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <TIM_Base_SetConfig+0x114>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_Base_SetConfig+0xf8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <TIM_Base_SetConfig+0x124>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	615a      	str	r2, [r3, #20]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010000 	.word	0x40010000
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800
 8002f8c:	40001800 	.word	0x40001800
 8002f90:	40001c00 	.word	0x40001c00
 8002f94:	40002000 	.word	0x40002000

08002f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e03f      	b.n	8003052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f864 	bl	80010b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f929 	bl	800325c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	d17c      	bne.n	8003174 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_UART_Transmit+0x2c>
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e075      	b.n	8003176 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_UART_Transmit+0x3e>
 8003094:	2302      	movs	r3, #2
 8003096:	e06e      	b.n	8003176 <HAL_UART_Transmit+0x11c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2221      	movs	r2, #33	; 0x21
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ae:	f7fe f96f 	bl	8001390 <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d108      	bne.n	80030dc <HAL_UART_Transmit+0x82>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e003      	b.n	80030e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030ec:	e02a      	b.n	8003144 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f840 	bl	800317e <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e036      	b.n	8003176 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10b      	bne.n	8003126 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800311c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	3302      	adds	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	e007      	b.n	8003136 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	3301      	adds	r3, #1
 8003134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1cf      	bne.n	80030ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f810 	bl	800317e <UART_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e006      	b.n	8003176 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b090      	sub	sp, #64	; 0x40
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	e050      	b.n	8003232 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d04c      	beq.n	8003232 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <UART_WaitOnFlagUntilTimeout+0x30>
 800319e:	f7fe f8f7 	bl	8001390 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d241      	bcs.n	8003232 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ce:	637a      	str	r2, [r7, #52]	; 0x34
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	613b      	str	r3, [r7, #16]
   return(result);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3314      	adds	r3, #20
 8003200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003202:	623a      	str	r2, [r7, #32]
 8003204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e00f      	b.n	8003252 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	429a      	cmp	r2, r3
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	429a      	cmp	r2, r3
 800324e:	d09f      	beq.n	8003190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3740      	adds	r7, #64	; 0x40
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800325c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003260:	b0c0      	sub	sp, #256	; 0x100
 8003262:	af00      	add	r7, sp, #0
 8003264:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	68d9      	ldr	r1, [r3, #12]
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	ea40 0301 	orr.w	r3, r0, r1
 8003284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	431a      	orrs	r2, r3
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032b4:	f021 010c 	bic.w	r1, r1, #12
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032c2:	430b      	orrs	r3, r1
 80032c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	6999      	ldr	r1, [r3, #24]
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	ea40 0301 	orr.w	r3, r0, r1
 80032e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b8f      	ldr	r3, [pc, #572]	; (8003528 <UART_SetConfig+0x2cc>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d005      	beq.n	80032fc <UART_SetConfig+0xa0>
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b8d      	ldr	r3, [pc, #564]	; (800352c <UART_SetConfig+0x2d0>)
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d104      	bne.n	8003306 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7fe fc4a 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8003300:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003304:	e003      	b.n	800330e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003306:	f7fe fc31 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 800330a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	f040 810c 	bne.w	8003534 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800331c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003326:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800332a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	1891      	adds	r1, r2, r2
 8003334:	65b9      	str	r1, [r7, #88]	; 0x58
 8003336:	415b      	adcs	r3, r3
 8003338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800333e:	4621      	mov	r1, r4
 8003340:	eb12 0801 	adds.w	r8, r2, r1
 8003344:	4629      	mov	r1, r5
 8003346:	eb43 0901 	adc.w	r9, r3, r1
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800335e:	4690      	mov	r8, r2
 8003360:	4699      	mov	r9, r3
 8003362:	4623      	mov	r3, r4
 8003364:	eb18 0303 	adds.w	r3, r8, r3
 8003368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800336c:	462b      	mov	r3, r5
 800336e:	eb49 0303 	adc.w	r3, r9, r3
 8003372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003382:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800338a:	460b      	mov	r3, r1
 800338c:	18db      	adds	r3, r3, r3
 800338e:	653b      	str	r3, [r7, #80]	; 0x50
 8003390:	4613      	mov	r3, r2
 8003392:	eb42 0303 	adc.w	r3, r2, r3
 8003396:	657b      	str	r3, [r7, #84]	; 0x54
 8003398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800339c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033a0:	f7fc ff8e 	bl	80002c0 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4b61      	ldr	r3, [pc, #388]	; (8003530 <UART_SetConfig+0x2d4>)
 80033aa:	fba3 2302 	umull	r2, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	011c      	lsls	r4, r3, #4
 80033b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	1891      	adds	r1, r2, r2
 80033ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80033cc:	415b      	adcs	r3, r3
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033d4:	4641      	mov	r1, r8
 80033d6:	eb12 0a01 	adds.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb43 0b01 	adc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f4:	4692      	mov	sl, r2
 80033f6:	469b      	mov	fp, r3
 80033f8:	4643      	mov	r3, r8
 80033fa:	eb1a 0303 	adds.w	r3, sl, r3
 80033fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003402:	464b      	mov	r3, r9
 8003404:	eb4b 0303 	adc.w	r3, fp, r3
 8003408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003418:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800341c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003420:	460b      	mov	r3, r1
 8003422:	18db      	adds	r3, r3, r3
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
 8003426:	4613      	mov	r3, r2
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	647b      	str	r3, [r7, #68]	; 0x44
 800342e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003436:	f7fc ff43 	bl	80002c0 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4611      	mov	r1, r2
 8003440:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <UART_SetConfig+0x2d4>)
 8003442:	fba3 2301 	umull	r2, r3, r3, r1
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2264      	movs	r2, #100	; 0x64
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	1acb      	subs	r3, r1, r3
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <UART_SetConfig+0x2d4>)
 8003458:	fba3 2302 	umull	r2, r3, r3, r2
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003464:	441c      	add	r4, r3
 8003466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800346a:	2200      	movs	r2, #0
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003470:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	1891      	adds	r1, r2, r2
 800347e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003480:	415b      	adcs	r3, r3
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003488:	4641      	mov	r1, r8
 800348a:	1851      	adds	r1, r2, r1
 800348c:	6339      	str	r1, [r7, #48]	; 0x30
 800348e:	4649      	mov	r1, r9
 8003490:	414b      	adcs	r3, r1
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034a0:	4659      	mov	r1, fp
 80034a2:	00cb      	lsls	r3, r1, #3
 80034a4:	4651      	mov	r1, sl
 80034a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034aa:	4651      	mov	r1, sl
 80034ac:	00ca      	lsls	r2, r1, #3
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	4642      	mov	r2, r8
 80034b6:	189b      	adds	r3, r3, r2
 80034b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034bc:	464b      	mov	r3, r9
 80034be:	460a      	mov	r2, r1
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034dc:	460b      	mov	r3, r1
 80034de:	18db      	adds	r3, r3, r3
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e2:	4613      	mov	r3, r2
 80034e4:	eb42 0303 	adc.w	r3, r2, r3
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034f2:	f7fc fee5 	bl	80002c0 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <UART_SetConfig+0x2d4>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	2164      	movs	r1, #100	; 0x64
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	3332      	adds	r3, #50	; 0x32
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <UART_SetConfig+0x2d4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	f003 0207 	and.w	r2, r3, #7
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4422      	add	r2, r4
 8003522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003524:	e105      	b.n	8003732 <UART_SetConfig+0x4d6>
 8003526:	bf00      	nop
 8003528:	40011000 	.word	0x40011000
 800352c:	40011400 	.word	0x40011400
 8003530:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003538:	2200      	movs	r2, #0
 800353a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800353e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003542:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003546:	4642      	mov	r2, r8
 8003548:	464b      	mov	r3, r9
 800354a:	1891      	adds	r1, r2, r2
 800354c:	6239      	str	r1, [r7, #32]
 800354e:	415b      	adcs	r3, r3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003556:	4641      	mov	r1, r8
 8003558:	1854      	adds	r4, r2, r1
 800355a:	4649      	mov	r1, r9
 800355c:	eb43 0501 	adc.w	r5, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	00eb      	lsls	r3, r5, #3
 800356a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800356e:	00e2      	lsls	r2, r4, #3
 8003570:	4614      	mov	r4, r2
 8003572:	461d      	mov	r5, r3
 8003574:	4643      	mov	r3, r8
 8003576:	18e3      	adds	r3, r4, r3
 8003578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800357c:	464b      	mov	r3, r9
 800357e:	eb45 0303 	adc.w	r3, r5, r3
 8003582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035a2:	4629      	mov	r1, r5
 80035a4:	008b      	lsls	r3, r1, #2
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ac:	4621      	mov	r1, r4
 80035ae:	008a      	lsls	r2, r1, #2
 80035b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035b4:	f7fc fe84 	bl	80002c0 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4b60      	ldr	r3, [pc, #384]	; (8003740 <UART_SetConfig+0x4e4>)
 80035be:	fba3 2302 	umull	r2, r3, r3, r2
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	011c      	lsls	r4, r3, #4
 80035c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035d8:	4642      	mov	r2, r8
 80035da:	464b      	mov	r3, r9
 80035dc:	1891      	adds	r1, r2, r2
 80035de:	61b9      	str	r1, [r7, #24]
 80035e0:	415b      	adcs	r3, r3
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e8:	4641      	mov	r1, r8
 80035ea:	1851      	adds	r1, r2, r1
 80035ec:	6139      	str	r1, [r7, #16]
 80035ee:	4649      	mov	r1, r9
 80035f0:	414b      	adcs	r3, r1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003600:	4659      	mov	r1, fp
 8003602:	00cb      	lsls	r3, r1, #3
 8003604:	4651      	mov	r1, sl
 8003606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360a:	4651      	mov	r1, sl
 800360c:	00ca      	lsls	r2, r1, #3
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	4603      	mov	r3, r0
 8003614:	4642      	mov	r2, r8
 8003616:	189b      	adds	r3, r3, r2
 8003618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800361c:	464b      	mov	r3, r9
 800361e:	460a      	mov	r2, r1
 8003620:	eb42 0303 	adc.w	r3, r2, r3
 8003624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	67bb      	str	r3, [r7, #120]	; 0x78
 8003632:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003640:	4649      	mov	r1, r9
 8003642:	008b      	lsls	r3, r1, #2
 8003644:	4641      	mov	r1, r8
 8003646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364a:	4641      	mov	r1, r8
 800364c:	008a      	lsls	r2, r1, #2
 800364e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003652:	f7fc fe35 	bl	80002c0 <__aeabi_uldivmod>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <UART_SetConfig+0x4e4>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	; 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	3332      	adds	r3, #50	; 0x32
 800366e:	4a34      	ldr	r2, [pc, #208]	; (8003740 <UART_SetConfig+0x4e4>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367a:	441c      	add	r4, r3
 800367c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003680:	2200      	movs	r2, #0
 8003682:	673b      	str	r3, [r7, #112]	; 0x70
 8003684:	677a      	str	r2, [r7, #116]	; 0x74
 8003686:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800368a:	4642      	mov	r2, r8
 800368c:	464b      	mov	r3, r9
 800368e:	1891      	adds	r1, r2, r2
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	415b      	adcs	r3, r3
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800369a:	4641      	mov	r1, r8
 800369c:	1851      	adds	r1, r2, r1
 800369e:	6039      	str	r1, [r7, #0]
 80036a0:	4649      	mov	r1, r9
 80036a2:	414b      	adcs	r3, r1
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036b2:	4659      	mov	r1, fp
 80036b4:	00cb      	lsls	r3, r1, #3
 80036b6:	4651      	mov	r1, sl
 80036b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036bc:	4651      	mov	r1, sl
 80036be:	00ca      	lsls	r2, r1, #3
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	4603      	mov	r3, r0
 80036c6:	4642      	mov	r2, r8
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80036cc:	464b      	mov	r3, r9
 80036ce:	460a      	mov	r2, r1
 80036d0:	eb42 0303 	adc.w	r3, r2, r3
 80036d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	663b      	str	r3, [r7, #96]	; 0x60
 80036e0:	667a      	str	r2, [r7, #100]	; 0x64
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036ee:	4649      	mov	r1, r9
 80036f0:	008b      	lsls	r3, r1, #2
 80036f2:	4641      	mov	r1, r8
 80036f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f8:	4641      	mov	r1, r8
 80036fa:	008a      	lsls	r2, r1, #2
 80036fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003700:	f7fc fdde 	bl	80002c0 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <UART_SetConfig+0x4e4>)
 800370a:	fba3 1302 	umull	r1, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2164      	movs	r1, #100	; 0x64
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	3332      	adds	r3, #50	; 0x32
 800371c:	4a08      	ldr	r2, [pc, #32]	; (8003740 <UART_SetConfig+0x4e4>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	f003 020f 	and.w	r2, r3, #15
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4422      	add	r2, r4
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800373e:	bf00      	nop
 8003740:	51eb851f 	.word	0x51eb851f

08003744 <__errno>:
 8003744:	4b01      	ldr	r3, [pc, #4]	; (800374c <__errno+0x8>)
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000048 	.word	0x20000048

08003750 <__libc_init_array>:
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	4d0d      	ldr	r5, [pc, #52]	; (8003788 <__libc_init_array+0x38>)
 8003754:	4c0d      	ldr	r4, [pc, #52]	; (800378c <__libc_init_array+0x3c>)
 8003756:	1b64      	subs	r4, r4, r5
 8003758:	10a4      	asrs	r4, r4, #2
 800375a:	2600      	movs	r6, #0
 800375c:	42a6      	cmp	r6, r4
 800375e:	d109      	bne.n	8003774 <__libc_init_array+0x24>
 8003760:	4d0b      	ldr	r5, [pc, #44]	; (8003790 <__libc_init_array+0x40>)
 8003762:	4c0c      	ldr	r4, [pc, #48]	; (8003794 <__libc_init_array+0x44>)
 8003764:	f000 fc8e 	bl	8004084 <_init>
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	2600      	movs	r6, #0
 800376e:	42a6      	cmp	r6, r4
 8003770:	d105      	bne.n	800377e <__libc_init_array+0x2e>
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	f855 3b04 	ldr.w	r3, [r5], #4
 8003778:	4798      	blx	r3
 800377a:	3601      	adds	r6, #1
 800377c:	e7ee      	b.n	800375c <__libc_init_array+0xc>
 800377e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003782:	4798      	blx	r3
 8003784:	3601      	adds	r6, #1
 8003786:	e7f2      	b.n	800376e <__libc_init_array+0x1e>
 8003788:	080040f8 	.word	0x080040f8
 800378c:	080040f8 	.word	0x080040f8
 8003790:	080040f8 	.word	0x080040f8
 8003794:	080040fc 	.word	0x080040fc

08003798 <memset>:
 8003798:	4402      	add	r2, r0
 800379a:	4603      	mov	r3, r0
 800379c:	4293      	cmp	r3, r2
 800379e:	d100      	bne.n	80037a2 <memset+0xa>
 80037a0:	4770      	bx	lr
 80037a2:	f803 1b01 	strb.w	r1, [r3], #1
 80037a6:	e7f9      	b.n	800379c <memset+0x4>

080037a8 <siprintf>:
 80037a8:	b40e      	push	{r1, r2, r3}
 80037aa:	b500      	push	{lr}
 80037ac:	b09c      	sub	sp, #112	; 0x70
 80037ae:	ab1d      	add	r3, sp, #116	; 0x74
 80037b0:	9002      	str	r0, [sp, #8]
 80037b2:	9006      	str	r0, [sp, #24]
 80037b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037b8:	4809      	ldr	r0, [pc, #36]	; (80037e0 <siprintf+0x38>)
 80037ba:	9107      	str	r1, [sp, #28]
 80037bc:	9104      	str	r1, [sp, #16]
 80037be:	4909      	ldr	r1, [pc, #36]	; (80037e4 <siprintf+0x3c>)
 80037c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037c4:	9105      	str	r1, [sp, #20]
 80037c6:	6800      	ldr	r0, [r0, #0]
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	a902      	add	r1, sp, #8
 80037cc:	f000 f868 	bl	80038a0 <_svfiprintf_r>
 80037d0:	9b02      	ldr	r3, [sp, #8]
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	b01c      	add	sp, #112	; 0x70
 80037d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037dc:	b003      	add	sp, #12
 80037de:	4770      	bx	lr
 80037e0:	20000048 	.word	0x20000048
 80037e4:	ffff0208 	.word	0xffff0208

080037e8 <__ssputs_r>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	688e      	ldr	r6, [r1, #8]
 80037ee:	429e      	cmp	r6, r3
 80037f0:	4682      	mov	sl, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	4690      	mov	r8, r2
 80037f6:	461f      	mov	r7, r3
 80037f8:	d838      	bhi.n	800386c <__ssputs_r+0x84>
 80037fa:	898a      	ldrh	r2, [r1, #12]
 80037fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003800:	d032      	beq.n	8003868 <__ssputs_r+0x80>
 8003802:	6825      	ldr	r5, [r4, #0]
 8003804:	6909      	ldr	r1, [r1, #16]
 8003806:	eba5 0901 	sub.w	r9, r5, r1
 800380a:	6965      	ldr	r5, [r4, #20]
 800380c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003814:	3301      	adds	r3, #1
 8003816:	444b      	add	r3, r9
 8003818:	106d      	asrs	r5, r5, #1
 800381a:	429d      	cmp	r5, r3
 800381c:	bf38      	it	cc
 800381e:	461d      	movcc	r5, r3
 8003820:	0553      	lsls	r3, r2, #21
 8003822:	d531      	bpl.n	8003888 <__ssputs_r+0xa0>
 8003824:	4629      	mov	r1, r5
 8003826:	f000 fb63 	bl	8003ef0 <_malloc_r>
 800382a:	4606      	mov	r6, r0
 800382c:	b950      	cbnz	r0, 8003844 <__ssputs_r+0x5c>
 800382e:	230c      	movs	r3, #12
 8003830:	f8ca 3000 	str.w	r3, [sl]
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383a:	81a3      	strh	r3, [r4, #12]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003844:	6921      	ldr	r1, [r4, #16]
 8003846:	464a      	mov	r2, r9
 8003848:	f000 fabe 	bl	8003dc8 <memcpy>
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003856:	81a3      	strh	r3, [r4, #12]
 8003858:	6126      	str	r6, [r4, #16]
 800385a:	6165      	str	r5, [r4, #20]
 800385c:	444e      	add	r6, r9
 800385e:	eba5 0509 	sub.w	r5, r5, r9
 8003862:	6026      	str	r6, [r4, #0]
 8003864:	60a5      	str	r5, [r4, #8]
 8003866:	463e      	mov	r6, r7
 8003868:	42be      	cmp	r6, r7
 800386a:	d900      	bls.n	800386e <__ssputs_r+0x86>
 800386c:	463e      	mov	r6, r7
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	4632      	mov	r2, r6
 8003872:	4641      	mov	r1, r8
 8003874:	f000 fab6 	bl	8003de4 <memmove>
 8003878:	68a3      	ldr	r3, [r4, #8]
 800387a:	1b9b      	subs	r3, r3, r6
 800387c:	60a3      	str	r3, [r4, #8]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	4433      	add	r3, r6
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	2000      	movs	r0, #0
 8003886:	e7db      	b.n	8003840 <__ssputs_r+0x58>
 8003888:	462a      	mov	r2, r5
 800388a:	f000 fba5 	bl	8003fd8 <_realloc_r>
 800388e:	4606      	mov	r6, r0
 8003890:	2800      	cmp	r0, #0
 8003892:	d1e1      	bne.n	8003858 <__ssputs_r+0x70>
 8003894:	6921      	ldr	r1, [r4, #16]
 8003896:	4650      	mov	r0, sl
 8003898:	f000 fabe 	bl	8003e18 <_free_r>
 800389c:	e7c7      	b.n	800382e <__ssputs_r+0x46>
	...

080038a0 <_svfiprintf_r>:
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	4698      	mov	r8, r3
 80038a6:	898b      	ldrh	r3, [r1, #12]
 80038a8:	061b      	lsls	r3, r3, #24
 80038aa:	b09d      	sub	sp, #116	; 0x74
 80038ac:	4607      	mov	r7, r0
 80038ae:	460d      	mov	r5, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	d50e      	bpl.n	80038d2 <_svfiprintf_r+0x32>
 80038b4:	690b      	ldr	r3, [r1, #16]
 80038b6:	b963      	cbnz	r3, 80038d2 <_svfiprintf_r+0x32>
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	f000 fb19 	bl	8003ef0 <_malloc_r>
 80038be:	6028      	str	r0, [r5, #0]
 80038c0:	6128      	str	r0, [r5, #16]
 80038c2:	b920      	cbnz	r0, 80038ce <_svfiprintf_r+0x2e>
 80038c4:	230c      	movs	r3, #12
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	e0d1      	b.n	8003a72 <_svfiprintf_r+0x1d2>
 80038ce:	2340      	movs	r3, #64	; 0x40
 80038d0:	616b      	str	r3, [r5, #20]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9309      	str	r3, [sp, #36]	; 0x24
 80038d6:	2320      	movs	r3, #32
 80038d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80038e0:	2330      	movs	r3, #48	; 0x30
 80038e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a8c <_svfiprintf_r+0x1ec>
 80038e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ea:	f04f 0901 	mov.w	r9, #1
 80038ee:	4623      	mov	r3, r4
 80038f0:	469a      	mov	sl, r3
 80038f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038f6:	b10a      	cbz	r2, 80038fc <_svfiprintf_r+0x5c>
 80038f8:	2a25      	cmp	r2, #37	; 0x25
 80038fa:	d1f9      	bne.n	80038f0 <_svfiprintf_r+0x50>
 80038fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003900:	d00b      	beq.n	800391a <_svfiprintf_r+0x7a>
 8003902:	465b      	mov	r3, fp
 8003904:	4622      	mov	r2, r4
 8003906:	4629      	mov	r1, r5
 8003908:	4638      	mov	r0, r7
 800390a:	f7ff ff6d 	bl	80037e8 <__ssputs_r>
 800390e:	3001      	adds	r0, #1
 8003910:	f000 80aa 	beq.w	8003a68 <_svfiprintf_r+0x1c8>
 8003914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003916:	445a      	add	r2, fp
 8003918:	9209      	str	r2, [sp, #36]	; 0x24
 800391a:	f89a 3000 	ldrb.w	r3, [sl]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80a2 	beq.w	8003a68 <_svfiprintf_r+0x1c8>
 8003924:	2300      	movs	r3, #0
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800392e:	f10a 0a01 	add.w	sl, sl, #1
 8003932:	9304      	str	r3, [sp, #16]
 8003934:	9307      	str	r3, [sp, #28]
 8003936:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800393a:	931a      	str	r3, [sp, #104]	; 0x68
 800393c:	4654      	mov	r4, sl
 800393e:	2205      	movs	r2, #5
 8003940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003944:	4851      	ldr	r0, [pc, #324]	; (8003a8c <_svfiprintf_r+0x1ec>)
 8003946:	f7fc fc6b 	bl	8000220 <memchr>
 800394a:	9a04      	ldr	r2, [sp, #16]
 800394c:	b9d8      	cbnz	r0, 8003986 <_svfiprintf_r+0xe6>
 800394e:	06d0      	lsls	r0, r2, #27
 8003950:	bf44      	itt	mi
 8003952:	2320      	movmi	r3, #32
 8003954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003958:	0711      	lsls	r1, r2, #28
 800395a:	bf44      	itt	mi
 800395c:	232b      	movmi	r3, #43	; 0x2b
 800395e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003962:	f89a 3000 	ldrb.w	r3, [sl]
 8003966:	2b2a      	cmp	r3, #42	; 0x2a
 8003968:	d015      	beq.n	8003996 <_svfiprintf_r+0xf6>
 800396a:	9a07      	ldr	r2, [sp, #28]
 800396c:	4654      	mov	r4, sl
 800396e:	2000      	movs	r0, #0
 8003970:	f04f 0c0a 	mov.w	ip, #10
 8003974:	4621      	mov	r1, r4
 8003976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800397a:	3b30      	subs	r3, #48	; 0x30
 800397c:	2b09      	cmp	r3, #9
 800397e:	d94e      	bls.n	8003a1e <_svfiprintf_r+0x17e>
 8003980:	b1b0      	cbz	r0, 80039b0 <_svfiprintf_r+0x110>
 8003982:	9207      	str	r2, [sp, #28]
 8003984:	e014      	b.n	80039b0 <_svfiprintf_r+0x110>
 8003986:	eba0 0308 	sub.w	r3, r0, r8
 800398a:	fa09 f303 	lsl.w	r3, r9, r3
 800398e:	4313      	orrs	r3, r2
 8003990:	9304      	str	r3, [sp, #16]
 8003992:	46a2      	mov	sl, r4
 8003994:	e7d2      	b.n	800393c <_svfiprintf_r+0x9c>
 8003996:	9b03      	ldr	r3, [sp, #12]
 8003998:	1d19      	adds	r1, r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	9103      	str	r1, [sp, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bfbb      	ittet	lt
 80039a2:	425b      	neglt	r3, r3
 80039a4:	f042 0202 	orrlt.w	r2, r2, #2
 80039a8:	9307      	strge	r3, [sp, #28]
 80039aa:	9307      	strlt	r3, [sp, #28]
 80039ac:	bfb8      	it	lt
 80039ae:	9204      	strlt	r2, [sp, #16]
 80039b0:	7823      	ldrb	r3, [r4, #0]
 80039b2:	2b2e      	cmp	r3, #46	; 0x2e
 80039b4:	d10c      	bne.n	80039d0 <_svfiprintf_r+0x130>
 80039b6:	7863      	ldrb	r3, [r4, #1]
 80039b8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ba:	d135      	bne.n	8003a28 <_svfiprintf_r+0x188>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	9203      	str	r2, [sp, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bfb8      	it	lt
 80039c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80039cc:	3402      	adds	r4, #2
 80039ce:	9305      	str	r3, [sp, #20]
 80039d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a9c <_svfiprintf_r+0x1fc>
 80039d4:	7821      	ldrb	r1, [r4, #0]
 80039d6:	2203      	movs	r2, #3
 80039d8:	4650      	mov	r0, sl
 80039da:	f7fc fc21 	bl	8000220 <memchr>
 80039de:	b140      	cbz	r0, 80039f2 <_svfiprintf_r+0x152>
 80039e0:	2340      	movs	r3, #64	; 0x40
 80039e2:	eba0 000a 	sub.w	r0, r0, sl
 80039e6:	fa03 f000 	lsl.w	r0, r3, r0
 80039ea:	9b04      	ldr	r3, [sp, #16]
 80039ec:	4303      	orrs	r3, r0
 80039ee:	3401      	adds	r4, #1
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f6:	4826      	ldr	r0, [pc, #152]	; (8003a90 <_svfiprintf_r+0x1f0>)
 80039f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039fc:	2206      	movs	r2, #6
 80039fe:	f7fc fc0f 	bl	8000220 <memchr>
 8003a02:	2800      	cmp	r0, #0
 8003a04:	d038      	beq.n	8003a78 <_svfiprintf_r+0x1d8>
 8003a06:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <_svfiprintf_r+0x1f4>)
 8003a08:	bb1b      	cbnz	r3, 8003a52 <_svfiprintf_r+0x1b2>
 8003a0a:	9b03      	ldr	r3, [sp, #12]
 8003a0c:	3307      	adds	r3, #7
 8003a0e:	f023 0307 	bic.w	r3, r3, #7
 8003a12:	3308      	adds	r3, #8
 8003a14:	9303      	str	r3, [sp, #12]
 8003a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a18:	4433      	add	r3, r6
 8003a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1c:	e767      	b.n	80038ee <_svfiprintf_r+0x4e>
 8003a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a22:	460c      	mov	r4, r1
 8003a24:	2001      	movs	r0, #1
 8003a26:	e7a5      	b.n	8003974 <_svfiprintf_r+0xd4>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	3401      	adds	r4, #1
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f04f 0c0a 	mov.w	ip, #10
 8003a34:	4620      	mov	r0, r4
 8003a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a3a:	3a30      	subs	r2, #48	; 0x30
 8003a3c:	2a09      	cmp	r2, #9
 8003a3e:	d903      	bls.n	8003a48 <_svfiprintf_r+0x1a8>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0c5      	beq.n	80039d0 <_svfiprintf_r+0x130>
 8003a44:	9105      	str	r1, [sp, #20]
 8003a46:	e7c3      	b.n	80039d0 <_svfiprintf_r+0x130>
 8003a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e7f0      	b.n	8003a34 <_svfiprintf_r+0x194>
 8003a52:	ab03      	add	r3, sp, #12
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	462a      	mov	r2, r5
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <_svfiprintf_r+0x1f8>)
 8003a5a:	a904      	add	r1, sp, #16
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f3af 8000 	nop.w
 8003a62:	1c42      	adds	r2, r0, #1
 8003a64:	4606      	mov	r6, r0
 8003a66:	d1d6      	bne.n	8003a16 <_svfiprintf_r+0x176>
 8003a68:	89ab      	ldrh	r3, [r5, #12]
 8003a6a:	065b      	lsls	r3, r3, #25
 8003a6c:	f53f af2c 	bmi.w	80038c8 <_svfiprintf_r+0x28>
 8003a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a72:	b01d      	add	sp, #116	; 0x74
 8003a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a78:	ab03      	add	r3, sp, #12
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	462a      	mov	r2, r5
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <_svfiprintf_r+0x1f8>)
 8003a80:	a904      	add	r1, sp, #16
 8003a82:	4638      	mov	r0, r7
 8003a84:	f000 f87a 	bl	8003b7c <_printf_i>
 8003a88:	e7eb      	b.n	8003a62 <_svfiprintf_r+0x1c2>
 8003a8a:	bf00      	nop
 8003a8c:	080040bc 	.word	0x080040bc
 8003a90:	080040c6 	.word	0x080040c6
 8003a94:	00000000 	.word	0x00000000
 8003a98:	080037e9 	.word	0x080037e9
 8003a9c:	080040c2 	.word	0x080040c2

08003aa0 <_printf_common>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	4699      	mov	r9, r3
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfb8      	it	lt
 8003ab4:	4613      	movlt	r3, r2
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003abc:	4607      	mov	r7, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_printf_common+0x26>
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	6833      	ldrmi	r3, [r6, #0]
 8003ace:	3302      	addmi	r3, #2
 8003ad0:	6033      	strmi	r3, [r6, #0]
 8003ad2:	6825      	ldr	r5, [r4, #0]
 8003ad4:	f015 0506 	ands.w	r5, r5, #6
 8003ad8:	d106      	bne.n	8003ae8 <_printf_common+0x48>
 8003ada:	f104 0a19 	add.w	sl, r4, #25
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	6832      	ldr	r2, [r6, #0]
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dc26      	bgt.n	8003b36 <_printf_common+0x96>
 8003ae8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003aec:	1e13      	subs	r3, r2, #0
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	bf18      	it	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	0692      	lsls	r2, r2, #26
 8003af6:	d42b      	bmi.n	8003b50 <_printf_common+0xb0>
 8003af8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003afc:	4649      	mov	r1, r9
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c0      	blx	r8
 8003b02:	3001      	adds	r0, #1
 8003b04:	d01e      	beq.n	8003b44 <_printf_common+0xa4>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	68e5      	ldr	r5, [r4, #12]
 8003b0a:	6832      	ldr	r2, [r6, #0]
 8003b0c:	f003 0306 	and.w	r3, r3, #6
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	bf08      	it	eq
 8003b14:	1aad      	subeq	r5, r5, r2
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	6922      	ldr	r2, [r4, #16]
 8003b1a:	bf0c      	ite	eq
 8003b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b20:	2500      	movne	r5, #0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bfc4      	itt	gt
 8003b26:	1a9b      	subgt	r3, r3, r2
 8003b28:	18ed      	addgt	r5, r5, r3
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	341a      	adds	r4, #26
 8003b2e:	42b5      	cmp	r5, r6
 8003b30:	d11a      	bne.n	8003b68 <_printf_common+0xc8>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e008      	b.n	8003b48 <_printf_common+0xa8>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c0      	blx	r8
 8003b40:	3001      	adds	r0, #1
 8003b42:	d103      	bne.n	8003b4c <_printf_common+0xac>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7c6      	b.n	8003ade <_printf_common+0x3e>
 8003b50:	18e1      	adds	r1, r4, r3
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	2030      	movs	r0, #48	; 0x30
 8003b56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b5a:	4422      	add	r2, r4
 8003b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b64:	3302      	adds	r3, #2
 8003b66:	e7c7      	b.n	8003af8 <_printf_common+0x58>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c0      	blx	r8
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0e6      	beq.n	8003b44 <_printf_common+0xa4>
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7d9      	b.n	8003b2e <_printf_common+0x8e>
	...

08003b7c <_printf_i>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	7e0f      	ldrb	r7, [r1, #24]
 8003b82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b84:	2f78      	cmp	r7, #120	; 0x78
 8003b86:	4691      	mov	r9, r2
 8003b88:	4680      	mov	r8, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b92:	d807      	bhi.n	8003ba4 <_printf_i+0x28>
 8003b94:	2f62      	cmp	r7, #98	; 0x62
 8003b96:	d80a      	bhi.n	8003bae <_printf_i+0x32>
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	f000 80d8 	beq.w	8003d4e <_printf_i+0x1d2>
 8003b9e:	2f58      	cmp	r7, #88	; 0x58
 8003ba0:	f000 80a3 	beq.w	8003cea <_printf_i+0x16e>
 8003ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bac:	e03a      	b.n	8003c24 <_printf_i+0xa8>
 8003bae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bb2:	2b15      	cmp	r3, #21
 8003bb4:	d8f6      	bhi.n	8003ba4 <_printf_i+0x28>
 8003bb6:	a101      	add	r1, pc, #4	; (adr r1, 8003bbc <_printf_i+0x40>)
 8003bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c29 	.word	0x08003c29
 8003bc4:	08003ba5 	.word	0x08003ba5
 8003bc8:	08003ba5 	.word	0x08003ba5
 8003bcc:	08003ba5 	.word	0x08003ba5
 8003bd0:	08003ba5 	.word	0x08003ba5
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003ba5 	.word	0x08003ba5
 8003bdc:	08003ba5 	.word	0x08003ba5
 8003be0:	08003ba5 	.word	0x08003ba5
 8003be4:	08003ba5 	.word	0x08003ba5
 8003be8:	08003d35 	.word	0x08003d35
 8003bec:	08003c59 	.word	0x08003c59
 8003bf0:	08003d17 	.word	0x08003d17
 8003bf4:	08003ba5 	.word	0x08003ba5
 8003bf8:	08003ba5 	.word	0x08003ba5
 8003bfc:	08003d57 	.word	0x08003d57
 8003c00:	08003ba5 	.word	0x08003ba5
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003ba5 	.word	0x08003ba5
 8003c0c:	08003ba5 	.word	0x08003ba5
 8003c10:	08003d1f 	.word	0x08003d1f
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	602a      	str	r2, [r5, #0]
 8003c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a3      	b.n	8003d70 <_printf_i+0x1f4>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	6829      	ldr	r1, [r5, #0]
 8003c2c:	0606      	lsls	r6, r0, #24
 8003c2e:	f101 0304 	add.w	r3, r1, #4
 8003c32:	d50a      	bpl.n	8003c4a <_printf_i+0xce>
 8003c34:	680e      	ldr	r6, [r1, #0]
 8003c36:	602b      	str	r3, [r5, #0]
 8003c38:	2e00      	cmp	r6, #0
 8003c3a:	da03      	bge.n	8003c44 <_printf_i+0xc8>
 8003c3c:	232d      	movs	r3, #45	; 0x2d
 8003c3e:	4276      	negs	r6, r6
 8003c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c44:	485e      	ldr	r0, [pc, #376]	; (8003dc0 <_printf_i+0x244>)
 8003c46:	230a      	movs	r3, #10
 8003c48:	e019      	b.n	8003c7e <_printf_i+0x102>
 8003c4a:	680e      	ldr	r6, [r1, #0]
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c52:	bf18      	it	ne
 8003c54:	b236      	sxthne	r6, r6
 8003c56:	e7ef      	b.n	8003c38 <_printf_i+0xbc>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	6820      	ldr	r0, [r4, #0]
 8003c5c:	1d19      	adds	r1, r3, #4
 8003c5e:	6029      	str	r1, [r5, #0]
 8003c60:	0601      	lsls	r1, r0, #24
 8003c62:	d501      	bpl.n	8003c68 <_printf_i+0xec>
 8003c64:	681e      	ldr	r6, [r3, #0]
 8003c66:	e002      	b.n	8003c6e <_printf_i+0xf2>
 8003c68:	0646      	lsls	r6, r0, #25
 8003c6a:	d5fb      	bpl.n	8003c64 <_printf_i+0xe8>
 8003c6c:	881e      	ldrh	r6, [r3, #0]
 8003c6e:	4854      	ldr	r0, [pc, #336]	; (8003dc0 <_printf_i+0x244>)
 8003c70:	2f6f      	cmp	r7, #111	; 0x6f
 8003c72:	bf0c      	ite	eq
 8003c74:	2308      	moveq	r3, #8
 8003c76:	230a      	movne	r3, #10
 8003c78:	2100      	movs	r1, #0
 8003c7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c7e:	6865      	ldr	r5, [r4, #4]
 8003c80:	60a5      	str	r5, [r4, #8]
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	bfa2      	ittt	ge
 8003c86:	6821      	ldrge	r1, [r4, #0]
 8003c88:	f021 0104 	bicge.w	r1, r1, #4
 8003c8c:	6021      	strge	r1, [r4, #0]
 8003c8e:	b90e      	cbnz	r6, 8003c94 <_printf_i+0x118>
 8003c90:	2d00      	cmp	r5, #0
 8003c92:	d04d      	beq.n	8003d30 <_printf_i+0x1b4>
 8003c94:	4615      	mov	r5, r2
 8003c96:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c9a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ca4:	4637      	mov	r7, r6
 8003ca6:	42bb      	cmp	r3, r7
 8003ca8:	460e      	mov	r6, r1
 8003caa:	d9f4      	bls.n	8003c96 <_printf_i+0x11a>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d10b      	bne.n	8003cc8 <_printf_i+0x14c>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	07de      	lsls	r6, r3, #31
 8003cb4:	d508      	bpl.n	8003cc8 <_printf_i+0x14c>
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	6861      	ldr	r1, [r4, #4]
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	bfde      	ittt	le
 8003cbe:	2330      	movle	r3, #48	; 0x30
 8003cc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cc8:	1b52      	subs	r2, r2, r5
 8003cca:	6122      	str	r2, [r4, #16]
 8003ccc:	f8cd a000 	str.w	sl, [sp]
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	aa03      	add	r2, sp, #12
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	f7ff fee2 	bl	8003aa0 <_printf_common>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d14c      	bne.n	8003d7a <_printf_i+0x1fe>
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	b004      	add	sp, #16
 8003ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cea:	4835      	ldr	r0, [pc, #212]	; (8003dc0 <_printf_i+0x244>)
 8003cec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003cf0:	6829      	ldr	r1, [r5, #0]
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cf8:	6029      	str	r1, [r5, #0]
 8003cfa:	061d      	lsls	r5, r3, #24
 8003cfc:	d514      	bpl.n	8003d28 <_printf_i+0x1ac>
 8003cfe:	07df      	lsls	r7, r3, #31
 8003d00:	bf44      	itt	mi
 8003d02:	f043 0320 	orrmi.w	r3, r3, #32
 8003d06:	6023      	strmi	r3, [r4, #0]
 8003d08:	b91e      	cbnz	r6, 8003d12 <_printf_i+0x196>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	f023 0320 	bic.w	r3, r3, #32
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	2310      	movs	r3, #16
 8003d14:	e7b0      	b.n	8003c78 <_printf_i+0xfc>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	f043 0320 	orr.w	r3, r3, #32
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	2378      	movs	r3, #120	; 0x78
 8003d20:	4828      	ldr	r0, [pc, #160]	; (8003dc4 <_printf_i+0x248>)
 8003d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d26:	e7e3      	b.n	8003cf0 <_printf_i+0x174>
 8003d28:	0659      	lsls	r1, r3, #25
 8003d2a:	bf48      	it	mi
 8003d2c:	b2b6      	uxthmi	r6, r6
 8003d2e:	e7e6      	b.n	8003cfe <_printf_i+0x182>
 8003d30:	4615      	mov	r5, r2
 8003d32:	e7bb      	b.n	8003cac <_printf_i+0x130>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	6826      	ldr	r6, [r4, #0]
 8003d38:	6961      	ldr	r1, [r4, #20]
 8003d3a:	1d18      	adds	r0, r3, #4
 8003d3c:	6028      	str	r0, [r5, #0]
 8003d3e:	0635      	lsls	r5, r6, #24
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	d501      	bpl.n	8003d48 <_printf_i+0x1cc>
 8003d44:	6019      	str	r1, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <_printf_i+0x1d2>
 8003d48:	0670      	lsls	r0, r6, #25
 8003d4a:	d5fb      	bpl.n	8003d44 <_printf_i+0x1c8>
 8003d4c:	8019      	strh	r1, [r3, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6123      	str	r3, [r4, #16]
 8003d52:	4615      	mov	r5, r2
 8003d54:	e7ba      	b.n	8003ccc <_printf_i+0x150>
 8003d56:	682b      	ldr	r3, [r5, #0]
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	681d      	ldr	r5, [r3, #0]
 8003d5e:	6862      	ldr	r2, [r4, #4]
 8003d60:	2100      	movs	r1, #0
 8003d62:	4628      	mov	r0, r5
 8003d64:	f7fc fa5c 	bl	8000220 <memchr>
 8003d68:	b108      	cbz	r0, 8003d6e <_printf_i+0x1f2>
 8003d6a:	1b40      	subs	r0, r0, r5
 8003d6c:	6060      	str	r0, [r4, #4]
 8003d6e:	6863      	ldr	r3, [r4, #4]
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	2300      	movs	r3, #0
 8003d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d78:	e7a8      	b.n	8003ccc <_printf_i+0x150>
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4649      	mov	r1, r9
 8003d80:	4640      	mov	r0, r8
 8003d82:	47d0      	blx	sl
 8003d84:	3001      	adds	r0, #1
 8003d86:	d0ab      	beq.n	8003ce0 <_printf_i+0x164>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	079b      	lsls	r3, r3, #30
 8003d8c:	d413      	bmi.n	8003db6 <_printf_i+0x23a>
 8003d8e:	68e0      	ldr	r0, [r4, #12]
 8003d90:	9b03      	ldr	r3, [sp, #12]
 8003d92:	4298      	cmp	r0, r3
 8003d94:	bfb8      	it	lt
 8003d96:	4618      	movlt	r0, r3
 8003d98:	e7a4      	b.n	8003ce4 <_printf_i+0x168>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4649      	mov	r1, r9
 8003da0:	4640      	mov	r0, r8
 8003da2:	47d0      	blx	sl
 8003da4:	3001      	adds	r0, #1
 8003da6:	d09b      	beq.n	8003ce0 <_printf_i+0x164>
 8003da8:	3501      	adds	r5, #1
 8003daa:	68e3      	ldr	r3, [r4, #12]
 8003dac:	9903      	ldr	r1, [sp, #12]
 8003dae:	1a5b      	subs	r3, r3, r1
 8003db0:	42ab      	cmp	r3, r5
 8003db2:	dcf2      	bgt.n	8003d9a <_printf_i+0x21e>
 8003db4:	e7eb      	b.n	8003d8e <_printf_i+0x212>
 8003db6:	2500      	movs	r5, #0
 8003db8:	f104 0619 	add.w	r6, r4, #25
 8003dbc:	e7f5      	b.n	8003daa <_printf_i+0x22e>
 8003dbe:	bf00      	nop
 8003dc0:	080040cd 	.word	0x080040cd
 8003dc4:	080040de 	.word	0x080040de

08003dc8 <memcpy>:
 8003dc8:	440a      	add	r2, r1
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dd0:	d100      	bne.n	8003dd4 <memcpy+0xc>
 8003dd2:	4770      	bx	lr
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dde:	4291      	cmp	r1, r2
 8003de0:	d1f9      	bne.n	8003dd6 <memcpy+0xe>
 8003de2:	bd10      	pop	{r4, pc}

08003de4 <memmove>:
 8003de4:	4288      	cmp	r0, r1
 8003de6:	b510      	push	{r4, lr}
 8003de8:	eb01 0402 	add.w	r4, r1, r2
 8003dec:	d902      	bls.n	8003df4 <memmove+0x10>
 8003dee:	4284      	cmp	r4, r0
 8003df0:	4623      	mov	r3, r4
 8003df2:	d807      	bhi.n	8003e04 <memmove+0x20>
 8003df4:	1e43      	subs	r3, r0, #1
 8003df6:	42a1      	cmp	r1, r4
 8003df8:	d008      	beq.n	8003e0c <memmove+0x28>
 8003dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e02:	e7f8      	b.n	8003df6 <memmove+0x12>
 8003e04:	4402      	add	r2, r0
 8003e06:	4601      	mov	r1, r0
 8003e08:	428a      	cmp	r2, r1
 8003e0a:	d100      	bne.n	8003e0e <memmove+0x2a>
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e16:	e7f7      	b.n	8003e08 <memmove+0x24>

08003e18 <_free_r>:
 8003e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	d044      	beq.n	8003ea8 <_free_r+0x90>
 8003e1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e22:	9001      	str	r0, [sp, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f1a1 0404 	sub.w	r4, r1, #4
 8003e2a:	bfb8      	it	lt
 8003e2c:	18e4      	addlt	r4, r4, r3
 8003e2e:	f000 f913 	bl	8004058 <__malloc_lock>
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <_free_r+0x94>)
 8003e34:	9801      	ldr	r0, [sp, #4]
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	b933      	cbnz	r3, 8003e48 <_free_r+0x30>
 8003e3a:	6063      	str	r3, [r4, #4]
 8003e3c:	6014      	str	r4, [r2, #0]
 8003e3e:	b003      	add	sp, #12
 8003e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e44:	f000 b90e 	b.w	8004064 <__malloc_unlock>
 8003e48:	42a3      	cmp	r3, r4
 8003e4a:	d908      	bls.n	8003e5e <_free_r+0x46>
 8003e4c:	6825      	ldr	r5, [r4, #0]
 8003e4e:	1961      	adds	r1, r4, r5
 8003e50:	428b      	cmp	r3, r1
 8003e52:	bf01      	itttt	eq
 8003e54:	6819      	ldreq	r1, [r3, #0]
 8003e56:	685b      	ldreq	r3, [r3, #4]
 8003e58:	1949      	addeq	r1, r1, r5
 8003e5a:	6021      	streq	r1, [r4, #0]
 8003e5c:	e7ed      	b.n	8003e3a <_free_r+0x22>
 8003e5e:	461a      	mov	r2, r3
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b10b      	cbz	r3, 8003e68 <_free_r+0x50>
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	d9fa      	bls.n	8003e5e <_free_r+0x46>
 8003e68:	6811      	ldr	r1, [r2, #0]
 8003e6a:	1855      	adds	r5, r2, r1
 8003e6c:	42a5      	cmp	r5, r4
 8003e6e:	d10b      	bne.n	8003e88 <_free_r+0x70>
 8003e70:	6824      	ldr	r4, [r4, #0]
 8003e72:	4421      	add	r1, r4
 8003e74:	1854      	adds	r4, r2, r1
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	d1e0      	bne.n	8003e3e <_free_r+0x26>
 8003e7c:	681c      	ldr	r4, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	6053      	str	r3, [r2, #4]
 8003e82:	4421      	add	r1, r4
 8003e84:	6011      	str	r1, [r2, #0]
 8003e86:	e7da      	b.n	8003e3e <_free_r+0x26>
 8003e88:	d902      	bls.n	8003e90 <_free_r+0x78>
 8003e8a:	230c      	movs	r3, #12
 8003e8c:	6003      	str	r3, [r0, #0]
 8003e8e:	e7d6      	b.n	8003e3e <_free_r+0x26>
 8003e90:	6825      	ldr	r5, [r4, #0]
 8003e92:	1961      	adds	r1, r4, r5
 8003e94:	428b      	cmp	r3, r1
 8003e96:	bf04      	itt	eq
 8003e98:	6819      	ldreq	r1, [r3, #0]
 8003e9a:	685b      	ldreq	r3, [r3, #4]
 8003e9c:	6063      	str	r3, [r4, #4]
 8003e9e:	bf04      	itt	eq
 8003ea0:	1949      	addeq	r1, r1, r5
 8003ea2:	6021      	streq	r1, [r4, #0]
 8003ea4:	6054      	str	r4, [r2, #4]
 8003ea6:	e7ca      	b.n	8003e3e <_free_r+0x26>
 8003ea8:	b003      	add	sp, #12
 8003eaa:	bd30      	pop	{r4, r5, pc}
 8003eac:	2000509c 	.word	0x2000509c

08003eb0 <sbrk_aligned>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4e0e      	ldr	r6, [pc, #56]	; (8003eec <sbrk_aligned+0x3c>)
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	6831      	ldr	r1, [r6, #0]
 8003eb8:	4605      	mov	r5, r0
 8003eba:	b911      	cbnz	r1, 8003ec2 <sbrk_aligned+0x12>
 8003ebc:	f000 f8bc 	bl	8004038 <_sbrk_r>
 8003ec0:	6030      	str	r0, [r6, #0]
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f000 f8b7 	bl	8004038 <_sbrk_r>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	d00a      	beq.n	8003ee4 <sbrk_aligned+0x34>
 8003ece:	1cc4      	adds	r4, r0, #3
 8003ed0:	f024 0403 	bic.w	r4, r4, #3
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d007      	beq.n	8003ee8 <sbrk_aligned+0x38>
 8003ed8:	1a21      	subs	r1, r4, r0
 8003eda:	4628      	mov	r0, r5
 8003edc:	f000 f8ac 	bl	8004038 <_sbrk_r>
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d101      	bne.n	8003ee8 <sbrk_aligned+0x38>
 8003ee4:	f04f 34ff 	mov.w	r4, #4294967295
 8003ee8:	4620      	mov	r0, r4
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	200050a0 	.word	0x200050a0

08003ef0 <_malloc_r>:
 8003ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ef4:	1ccd      	adds	r5, r1, #3
 8003ef6:	f025 0503 	bic.w	r5, r5, #3
 8003efa:	3508      	adds	r5, #8
 8003efc:	2d0c      	cmp	r5, #12
 8003efe:	bf38      	it	cc
 8003f00:	250c      	movcc	r5, #12
 8003f02:	2d00      	cmp	r5, #0
 8003f04:	4607      	mov	r7, r0
 8003f06:	db01      	blt.n	8003f0c <_malloc_r+0x1c>
 8003f08:	42a9      	cmp	r1, r5
 8003f0a:	d905      	bls.n	8003f18 <_malloc_r+0x28>
 8003f0c:	230c      	movs	r3, #12
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	2600      	movs	r6, #0
 8003f12:	4630      	mov	r0, r6
 8003f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f18:	4e2e      	ldr	r6, [pc, #184]	; (8003fd4 <_malloc_r+0xe4>)
 8003f1a:	f000 f89d 	bl	8004058 <__malloc_lock>
 8003f1e:	6833      	ldr	r3, [r6, #0]
 8003f20:	461c      	mov	r4, r3
 8003f22:	bb34      	cbnz	r4, 8003f72 <_malloc_r+0x82>
 8003f24:	4629      	mov	r1, r5
 8003f26:	4638      	mov	r0, r7
 8003f28:	f7ff ffc2 	bl	8003eb0 <sbrk_aligned>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	4604      	mov	r4, r0
 8003f30:	d14d      	bne.n	8003fce <_malloc_r+0xde>
 8003f32:	6834      	ldr	r4, [r6, #0]
 8003f34:	4626      	mov	r6, r4
 8003f36:	2e00      	cmp	r6, #0
 8003f38:	d140      	bne.n	8003fbc <_malloc_r+0xcc>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	4638      	mov	r0, r7
 8003f40:	eb04 0803 	add.w	r8, r4, r3
 8003f44:	f000 f878 	bl	8004038 <_sbrk_r>
 8003f48:	4580      	cmp	r8, r0
 8003f4a:	d13a      	bne.n	8003fc2 <_malloc_r+0xd2>
 8003f4c:	6821      	ldr	r1, [r4, #0]
 8003f4e:	3503      	adds	r5, #3
 8003f50:	1a6d      	subs	r5, r5, r1
 8003f52:	f025 0503 	bic.w	r5, r5, #3
 8003f56:	3508      	adds	r5, #8
 8003f58:	2d0c      	cmp	r5, #12
 8003f5a:	bf38      	it	cc
 8003f5c:	250c      	movcc	r5, #12
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4638      	mov	r0, r7
 8003f62:	f7ff ffa5 	bl	8003eb0 <sbrk_aligned>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d02b      	beq.n	8003fc2 <_malloc_r+0xd2>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	442b      	add	r3, r5
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	e00e      	b.n	8003f90 <_malloc_r+0xa0>
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	1b52      	subs	r2, r2, r5
 8003f76:	d41e      	bmi.n	8003fb6 <_malloc_r+0xc6>
 8003f78:	2a0b      	cmp	r2, #11
 8003f7a:	d916      	bls.n	8003faa <_malloc_r+0xba>
 8003f7c:	1961      	adds	r1, r4, r5
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	6025      	str	r5, [r4, #0]
 8003f82:	bf18      	it	ne
 8003f84:	6059      	strne	r1, [r3, #4]
 8003f86:	6863      	ldr	r3, [r4, #4]
 8003f88:	bf08      	it	eq
 8003f8a:	6031      	streq	r1, [r6, #0]
 8003f8c:	5162      	str	r2, [r4, r5]
 8003f8e:	604b      	str	r3, [r1, #4]
 8003f90:	4638      	mov	r0, r7
 8003f92:	f104 060b 	add.w	r6, r4, #11
 8003f96:	f000 f865 	bl	8004064 <__malloc_unlock>
 8003f9a:	f026 0607 	bic.w	r6, r6, #7
 8003f9e:	1d23      	adds	r3, r4, #4
 8003fa0:	1af2      	subs	r2, r6, r3
 8003fa2:	d0b6      	beq.n	8003f12 <_malloc_r+0x22>
 8003fa4:	1b9b      	subs	r3, r3, r6
 8003fa6:	50a3      	str	r3, [r4, r2]
 8003fa8:	e7b3      	b.n	8003f12 <_malloc_r+0x22>
 8003faa:	6862      	ldr	r2, [r4, #4]
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	bf0c      	ite	eq
 8003fb0:	6032      	streq	r2, [r6, #0]
 8003fb2:	605a      	strne	r2, [r3, #4]
 8003fb4:	e7ec      	b.n	8003f90 <_malloc_r+0xa0>
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	6864      	ldr	r4, [r4, #4]
 8003fba:	e7b2      	b.n	8003f22 <_malloc_r+0x32>
 8003fbc:	4634      	mov	r4, r6
 8003fbe:	6876      	ldr	r6, [r6, #4]
 8003fc0:	e7b9      	b.n	8003f36 <_malloc_r+0x46>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	f000 f84c 	bl	8004064 <__malloc_unlock>
 8003fcc:	e7a1      	b.n	8003f12 <_malloc_r+0x22>
 8003fce:	6025      	str	r5, [r4, #0]
 8003fd0:	e7de      	b.n	8003f90 <_malloc_r+0xa0>
 8003fd2:	bf00      	nop
 8003fd4:	2000509c 	.word	0x2000509c

08003fd8 <_realloc_r>:
 8003fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fdc:	4680      	mov	r8, r0
 8003fde:	4614      	mov	r4, r2
 8003fe0:	460e      	mov	r6, r1
 8003fe2:	b921      	cbnz	r1, 8003fee <_realloc_r+0x16>
 8003fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe8:	4611      	mov	r1, r2
 8003fea:	f7ff bf81 	b.w	8003ef0 <_malloc_r>
 8003fee:	b92a      	cbnz	r2, 8003ffc <_realloc_r+0x24>
 8003ff0:	f7ff ff12 	bl	8003e18 <_free_r>
 8003ff4:	4625      	mov	r5, r4
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffc:	f000 f838 	bl	8004070 <_malloc_usable_size_r>
 8004000:	4284      	cmp	r4, r0
 8004002:	4607      	mov	r7, r0
 8004004:	d802      	bhi.n	800400c <_realloc_r+0x34>
 8004006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800400a:	d812      	bhi.n	8004032 <_realloc_r+0x5a>
 800400c:	4621      	mov	r1, r4
 800400e:	4640      	mov	r0, r8
 8004010:	f7ff ff6e 	bl	8003ef0 <_malloc_r>
 8004014:	4605      	mov	r5, r0
 8004016:	2800      	cmp	r0, #0
 8004018:	d0ed      	beq.n	8003ff6 <_realloc_r+0x1e>
 800401a:	42bc      	cmp	r4, r7
 800401c:	4622      	mov	r2, r4
 800401e:	4631      	mov	r1, r6
 8004020:	bf28      	it	cs
 8004022:	463a      	movcs	r2, r7
 8004024:	f7ff fed0 	bl	8003dc8 <memcpy>
 8004028:	4631      	mov	r1, r6
 800402a:	4640      	mov	r0, r8
 800402c:	f7ff fef4 	bl	8003e18 <_free_r>
 8004030:	e7e1      	b.n	8003ff6 <_realloc_r+0x1e>
 8004032:	4635      	mov	r5, r6
 8004034:	e7df      	b.n	8003ff6 <_realloc_r+0x1e>
	...

08004038 <_sbrk_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d06      	ldr	r5, [pc, #24]	; (8004054 <_sbrk_r+0x1c>)
 800403c:	2300      	movs	r3, #0
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	f7fd f8cc 	bl	80011e0 <_sbrk>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_sbrk_r+0x1a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_sbrk_r+0x1a>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	200050a4 	.word	0x200050a4

08004058 <__malloc_lock>:
 8004058:	4801      	ldr	r0, [pc, #4]	; (8004060 <__malloc_lock+0x8>)
 800405a:	f000 b811 	b.w	8004080 <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	200050a8 	.word	0x200050a8

08004064 <__malloc_unlock>:
 8004064:	4801      	ldr	r0, [pc, #4]	; (800406c <__malloc_unlock+0x8>)
 8004066:	f000 b80c 	b.w	8004082 <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	200050a8 	.word	0x200050a8

08004070 <_malloc_usable_size_r>:
 8004070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004074:	1f18      	subs	r0, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	bfbc      	itt	lt
 800407a:	580b      	ldrlt	r3, [r1, r0]
 800407c:	18c0      	addlt	r0, r0, r3
 800407e:	4770      	bx	lr

08004080 <__retarget_lock_acquire_recursive>:
 8004080:	4770      	bx	lr

08004082 <__retarget_lock_release_recursive>:
 8004082:	4770      	bx	lr

08004084 <_init>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr

08004090 <_fini>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr


uclab_hf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004140  08004140  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005000  200000ac  080041f4  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050ac  080041f4  000250ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c85  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002701  00000000  00000000  00031d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00035318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ee8  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b09  00000000  00000000  00058f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b3d  00000000  00000000  0006baa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004030  00000000  00000000  0013e630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040d0 	.word	0x080040d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	080040d0 	.word	0x080040d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Write7segsel>:
#include "7seg.h"

//Function to write a specific digit on the display
void Write7segsel(GPIO_PinState sel1, GPIO_PinState sel0)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	460a      	mov	r2, r1
 80005ce:	71fb      	strb	r3, [r7, #7]
 80005d0:	4613      	mov	r3, r2
 80005d2:	71bb      	strb	r3, [r7, #6]
	if(sel0 == GPIO_PIN_SET)
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d106      	bne.n	80005e8 <Write7segsel+0x24>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <Write7segsel+0x58>)
 80005e2:	f001 f9c5 	bl	8001970 <HAL_GPIO_WritePin>
 80005e6:	e005      	b.n	80005f4 <Write7segsel+0x30>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <Write7segsel+0x58>)
 80005f0:	f001 f9be 	bl	8001970 <HAL_GPIO_WritePin>

	if(sel1 == GPIO_PIN_SET)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d106      	bne.n	8000608 <Write7segsel+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <Write7segsel+0x58>)
 8000602:	f001 f9b5 	bl	8001970 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}
 8000606:	e005      	b.n	8000614 <Write7segsel+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <Write7segsel+0x58>)
 8000610:	f001 f9ae 	bl	8001970 <HAL_GPIO_WritePin>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020000 	.word	0x40020000

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <MX_GPIO_Init+0x144>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a49      	ldr	r2, [pc, #292]	; (8000764 <MX_GPIO_Init+0x144>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b47      	ldr	r3, [pc, #284]	; (8000764 <MX_GPIO_Init+0x144>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b43      	ldr	r3, [pc, #268]	; (8000764 <MX_GPIO_Init+0x144>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a42      	ldr	r2, [pc, #264]	; (8000764 <MX_GPIO_Init+0x144>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b40      	ldr	r3, [pc, #256]	; (8000764 <MX_GPIO_Init+0x144>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <MX_GPIO_Init+0x144>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a3b      	ldr	r2, [pc, #236]	; (8000764 <MX_GPIO_Init+0x144>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b39      	ldr	r3, [pc, #228]	; (8000764 <MX_GPIO_Init+0x144>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <MX_GPIO_Init+0x144>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <MX_GPIO_Init+0x144>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b32      	ldr	r3, [pc, #200]	; (8000764 <MX_GPIO_Init+0x144>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80006ac:	482e      	ldr	r0, [pc, #184]	; (8000768 <MX_GPIO_Init+0x148>)
 80006ae:	f001 f95f 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006b8:	482c      	ldr	r0, [pc, #176]	; (800076c <MX_GPIO_Init+0x14c>)
 80006ba:	f001 f959 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4825      	ldr	r0, [pc, #148]	; (800076c <MX_GPIO_Init+0x14c>)
 80006d6:	f000 ff9f 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80006da:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	481d      	ldr	r0, [pc, #116]	; (8000768 <MX_GPIO_Init+0x148>)
 80006f4:	f000 ff90 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006f8:	23c0      	movs	r3, #192	; 0xc0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	4816      	ldr	r0, [pc, #88]	; (8000768 <MX_GPIO_Init+0x148>)
 800070e:	f000 ff83 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000712:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4810      	ldr	r0, [pc, #64]	; (800076c <MX_GPIO_Init+0x14c>)
 800072c:	f000 ff74 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000730:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_GPIO_Init+0x148>)
 8000748:	f000 ff66 	bl	8001618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2017      	movs	r0, #23
 8000752:	f000 ff2a 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000756:	2017      	movs	r0, #23
 8000758:	f000 ff43 	bl	80015e2 <HAL_NVIC_EnableIRQ>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020800 	.word	0x40020800

08000770 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
//Callback for the EXTI ITs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
	//If the sensor detects a step, it gives us an IT
	//Here we increase the step counter, save the timestamp and send it on USART to the PC
	if(GPIO_Pin == GPIO_PIN_9)
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000780:	d112      	bne.n	80007a8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		//increasing the step counter
		digitindex0++;
 8000782:	4b33      	ldr	r3, [pc, #204]	; (8000850 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a31      	ldr	r2, [pc, #196]	; (8000850 <HAL_GPIO_EXTI_Callback+0xe0>)
 800078a:	6013      	str	r3, [r2, #0]

		//saving the timestamp
		steptimes[steptimesindex] = time;
 800078c:	4b31      	ldr	r3, [pc, #196]	; (8000854 <HAL_GPIO_EXTI_Callback+0xe4>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b31      	ldr	r3, [pc, #196]	; (8000858 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000794:	8819      	ldrh	r1, [r3, #0]
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <HAL_GPIO_EXTI_Callback+0xec>)
 8000798:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		//sending it out on USART
//		HAL_UART_Transmit(&huart2, (uint8_t*) timestampstr, strlen(timestampstr), -1);

		//of course, at last, we have to increment the index
		steptimesindex++;
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <HAL_GPIO_EXTI_Callback+0xe4>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <HAL_GPIO_EXTI_Callback+0xe4>)
 80007a6:	801a      	strh	r2, [r3, #0]
	}

	//If we push the lower button we have to zero the steps and the timestamps
	if(GPIO_Pin == GPIO_PIN_7)
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	2b80      	cmp	r3, #128	; 0x80
 80007ac:	d11e      	bne.n	80007ec <HAL_GPIO_EXTI_Callback+0x7c>
	{
		digitindex0 = 0;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <HAL_GPIO_EXTI_Callback+0xe0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
		digitindex1 = 0;
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
		digitindex2 = 0;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
		digitindex3 = 0;
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <HAL_GPIO_EXTI_Callback+0xf8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]

		for(int i = 0; i<10000; i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e007      	b.n	80007dc <HAL_GPIO_EXTI_Callback+0x6c>
		{
			steptimes[i] = 0;
 80007cc:	4a23      	ldr	r2, [pc, #140]	; (800085c <HAL_GPIO_EXTI_Callback+0xec>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	2100      	movs	r1, #0
 80007d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i<10000; i++)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	f242 720f 	movw	r2, #9999	; 0x270f
 80007e2:	4293      	cmp	r3, r2
 80007e4:	ddf2      	ble.n	80007cc <HAL_GPIO_EXTI_Callback+0x5c>
		}

		//Optional:
		time = 0;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_GPIO_EXTI_Callback+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	801a      	strh	r2, [r3, #0]
	}

	//If we push the upper button we send the steps and the timestamps out on USART
	if(GPIO_Pin == GPIO_PIN_6)
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	2b40      	cmp	r3, #64	; 0x40
 80007f0:	d129      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0xd6>
	{
		for(int i = 0; i<steptimesindex; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	e016      	b.n	8000826 <HAL_GPIO_EXTI_Callback+0xb6>
			//Putting the steps into a string and sending it out
			//sprintf(steps, "%d", i+1);
			//HAL_UART_Transmit(&huart2, (uint8_t*) steps, strlen(steps), -1);


			sprintf(timestampstr, "%d\n", steptimes[i]);
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <HAL_GPIO_EXTI_Callback+0xec>)
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000800:	461a      	mov	r2, r3
 8000802:	491a      	ldr	r1, [pc, #104]	; (800086c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <HAL_GPIO_EXTI_Callback+0x100>)
 8000806:	f002 fff5 	bl	80037f4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) timestampstr, strlen(timestampstr), -1);
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <HAL_GPIO_EXTI_Callback+0x100>)
 800080c:	f7ff fd00 	bl	8000210 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <HAL_GPIO_EXTI_Callback+0x100>)
 800081a:	4816      	ldr	r0, [pc, #88]	; (8000874 <HAL_GPIO_EXTI_Callback+0x104>)
 800081c:	f002 fc43 	bl	80030a6 <HAL_UART_Transmit>
		for(int i = 0; i<steptimesindex; i++)
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	3301      	adds	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	4293      	cmp	r3, r2
 8000830:	dbe2      	blt.n	80007f8 <HAL_GPIO_EXTI_Callback+0x88>

		}
		//HAL_Delay(100); --> thanks to this, the Nucleo freezes...
		//DIY Delay:
		for(int k = 0; k < 2097151; k++)
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e002      	b.n	800083e <HAL_GPIO_EXTI_Callback+0xce>
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3301      	adds	r3, #1
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_GPIO_EXTI_Callback+0x108>)
 8000842:	4293      	cmp	r3, r2
 8000844:	ddf8      	ble.n	8000838 <HAL_GPIO_EXTI_Callback+0xc8>
		{

		}

	}
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000c8 	.word	0x200000c8
 8000854:	20004ef6 	.word	0x20004ef6
 8000858:	20004ef8 	.word	0x20004ef8
 800085c:	200000d8 	.word	0x200000d8
 8000860:	200000cc 	.word	0x200000cc
 8000864:	200000d0 	.word	0x200000d0
 8000868:	200000d4 	.word	0x200000d4
 800086c:	080040e8 	.word	0x080040e8
 8000870:	20004efc 	.word	0x20004efc
 8000874:	20005054 	.word	0x20005054
 8000878:	001ffffe 	.word	0x001ffffe

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f000 fd46 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f830 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f7ff feca 	bl	8000620 <MX_GPIO_Init>
  MX_SPI2_Init();
 800088c:	f000 f95c 	bl	8000b48 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000890:	f000 fca2 	bl	80011d8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000894:	f000 f98e 	bl	8000bb4 <MX_SPI3_Init>
  MX_TIM10_Init();
 8000898:	f000 fb3e 	bl	8000f18 <MX_TIM10_Init>
  MX_TIM11_Init();
 800089c:	f000 fb60 	bl	8000f60 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //Starting the timers with interrupts
  HAL_TIM_Base_Start_IT(&htim10);
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <main+0x5c>)
 80008a2:	f002 f95f 	bl	8002b64 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <main+0x60>)
 80008a8:	f002 f95c 	bl	8002b64 <HAL_TIM_Base_Start_IT>

  //Disabling the CS for the sensor
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	480b      	ldr	r0, [pc, #44]	; (80008e0 <main+0x64>)
 80008b4:	f001 f85c 	bl	8001970 <HAL_GPIO_WritePin>

  //Initializing the sensor
  SensorInit();
 80008b8:	f000 f88a 	bl	80009d0 <SensorInit>

  //Enable the 7seg displays (we always want to see the steps on it)
  //Shift register LE
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <main+0x68>)
 80008c4:	f001 f854 	bl	8001970 <HAL_GPIO_WritePin>

  //Shift register OE
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <main+0x64>)
 80008d0:	f001 f84e 	bl	8001970 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x58>
 80008d6:	bf00      	nop
 80008d8:	20004fc4 	.word	0x20004fc4
 80008dc:	2000500c 	.word	0x2000500c
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020000 	.word	0x40020000

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2234      	movs	r2, #52	; 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 ff74 	bl	80037e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <SystemClock_Config+0xd4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a29      	ldr	r2, [pc, #164]	; (80009bc <SystemClock_Config+0xd4>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <SystemClock_Config+0xd4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <SystemClock_Config+0xd8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <SystemClock_Config+0xd8>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <SystemClock_Config+0xd8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000950:	2310      	movs	r3, #16
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000954:	2302      	movs	r3, #2
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800095c:	2310      	movs	r3, #16
 800095e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000960:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000966:	2304      	movs	r3, #4
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096e:	2302      	movs	r3, #2
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fb76 	bl	8002068 <HAL_RCC_OscConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000982:	f000 f81f 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000986:	230f      	movs	r3, #15
 8000988:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098a:	2302      	movs	r3, #2
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2102      	movs	r1, #2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 f816 	bl	80019d4 <HAL_RCC_ClockConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ae:	f000 f809 	bl	80009c4 <Error_Handler>
  }
}
 80009b2:	bf00      	nop
 80009b4:	3750      	adds	r7, #80	; 0x50
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <SensorInit>:
#include "sensor.h"

//Function to initialize the sensor
//We write the specific bits to the required registers
void SensorInit()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009da:	484d      	ldr	r0, [pc, #308]	; (8000b10 <SensorInit+0x140>)
 80009dc:	f000 ffc8 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL1_XLAddress, 1, -1);
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	2201      	movs	r2, #1
 80009e6:	494b      	ldr	r1, [pc, #300]	; (8000b14 <SensorInit+0x144>)
 80009e8:	484b      	ldr	r0, [pc, #300]	; (8000b18 <SensorInit+0x148>)
 80009ea:	f001 fe64 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL1_XLData, 1, -1);
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2201      	movs	r2, #1
 80009f4:	4949      	ldr	r1, [pc, #292]	; (8000b1c <SensorInit+0x14c>)
 80009f6:	4848      	ldr	r0, [pc, #288]	; (8000b18 <SensorInit+0x148>)
 80009f8:	f001 fe5d 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a02:	4843      	ldr	r0, [pc, #268]	; (8000b10 <SensorInit+0x140>)
 8000a04:	f000 ffb4 	bl	8001970 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0e:	4840      	ldr	r0, [pc, #256]	; (8000b10 <SensorInit+0x140>)
 8000a10:	f000 ffae 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL10_CAddress, 1, -1);
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4941      	ldr	r1, [pc, #260]	; (8000b20 <SensorInit+0x150>)
 8000a1c:	483e      	ldr	r0, [pc, #248]	; (8000b18 <SensorInit+0x148>)
 8000a1e:	f001 fe4a 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorCTRL10_CData, 1, -1);
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	2201      	movs	r2, #1
 8000a28:	493e      	ldr	r1, [pc, #248]	; (8000b24 <SensorInit+0x154>)
 8000a2a:	483b      	ldr	r0, [pc, #236]	; (8000b18 <SensorInit+0x148>)
 8000a2c:	f001 fe43 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	4836      	ldr	r0, [pc, #216]	; (8000b10 <SensorInit+0x140>)
 8000a38:	f000 ff9a 	bl	8001970 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4833      	ldr	r0, [pc, #204]	; (8000b10 <SensorInit+0x140>)
 8000a44:	f000 ff94 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorTAPCFGAddress, 1, -1);
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4936      	ldr	r1, [pc, #216]	; (8000b28 <SensorInit+0x158>)
 8000a50:	4831      	ldr	r0, [pc, #196]	; (8000b18 <SensorInit+0x148>)
 8000a52:	f001 fe30 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorTAPCFGData, 1, -1);
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4933      	ldr	r1, [pc, #204]	; (8000b2c <SensorInit+0x15c>)
 8000a5e:	482e      	ldr	r0, [pc, #184]	; (8000b18 <SensorInit+0x148>)
 8000a60:	f001 fe29 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4829      	ldr	r0, [pc, #164]	; (8000b10 <SensorInit+0x140>)
 8000a6c:	f000 ff80 	bl	8001970 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a76:	4826      	ldr	r0, [pc, #152]	; (8000b10 <SensorInit+0x140>)
 8000a78:	f000 ff7a 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorINT1_CTRLAddress, 1, -1);
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2201      	movs	r2, #1
 8000a82:	492b      	ldr	r1, [pc, #172]	; (8000b30 <SensorInit+0x160>)
 8000a84:	4824      	ldr	r0, [pc, #144]	; (8000b18 <SensorInit+0x148>)
 8000a86:	f001 fe16 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorINT1_CTRLData, 1, -1);
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4928      	ldr	r1, [pc, #160]	; (8000b34 <SensorInit+0x164>)
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <SensorInit+0x148>)
 8000a94:	f001 fe0f 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9e:	481c      	ldr	r0, [pc, #112]	; (8000b10 <SensorInit+0x140>)
 8000aa0:	f000 ff66 	bl	8001970 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	4819      	ldr	r0, [pc, #100]	; (8000b10 <SensorInit+0x140>)
 8000aac:	f000 ff60 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorSTEP_COUNT_DELTAAddress, 1, -1);
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4920      	ldr	r1, [pc, #128]	; (8000b38 <SensorInit+0x168>)
 8000ab8:	4817      	ldr	r0, [pc, #92]	; (8000b18 <SensorInit+0x148>)
 8000aba:	f001 fdfc 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorSTEP_COUNT_DELTAData, 1, -1);
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	491d      	ldr	r1, [pc, #116]	; (8000b3c <SensorInit+0x16c>)
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <SensorInit+0x148>)
 8000ac8:	f001 fdf5 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <SensorInit+0x140>)
 8000ad4:	f000 ff4c 	bl	8001970 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <SensorInit+0x140>)
 8000ae0:	f000 ff46 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &sensorINT2_CTRLAddress, 1, -1);
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4915      	ldr	r1, [pc, #84]	; (8000b40 <SensorInit+0x170>)
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <SensorInit+0x148>)
 8000aee:	f001 fde2 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &sensorINT2_CTRLData, 1, -1);
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	2201      	movs	r2, #1
 8000af8:	4912      	ldr	r1, [pc, #72]	; (8000b44 <SensorInit+0x174>)
 8000afa:	4807      	ldr	r0, [pc, #28]	; (8000b18 <SensorInit+0x148>)
 8000afc:	f001 fddb 	bl	80026b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b06:	4802      	ldr	r0, [pc, #8]	; (8000b10 <SensorInit+0x140>)
 8000b08:	f000 ff32 	bl	8001970 <HAL_GPIO_WritePin>


}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40020800 	.word	0x40020800
 8000b14:	20000034 	.word	0x20000034
 8000b18:	20004f68 	.word	0x20004f68
 8000b1c:	20000035 	.word	0x20000035
 8000b20:	20000032 	.word	0x20000032
 8000b24:	20000033 	.word	0x20000033
 8000b28:	20000030 	.word	0x20000030
 8000b2c:	20000031 	.word	0x20000031
 8000b30:	2000002e 	.word	0x2000002e
 8000b34:	2000002f 	.word	0x2000002f
 8000b38:	20000036 	.word	0x20000036
 8000b3c:	20000037 	.word	0x20000037
 8000b40:	20000038 	.word	0x20000038
 8000b44:	20000039 	.word	0x20000039

08000b48 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <MX_SPI2_Init+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_SPI2_Init+0x64>)
 8000b9a:	f001 fd03 	bl	80025a4 <HAL_SPI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ba4:	f7ff ff0e 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20004f10 	.word	0x20004f10
 8000bb0:	40003800 	.word	0x40003800

08000bb4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI3_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000be8:	2208      	movs	r2, #8
 8000bea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI3_Init+0x64>)
 8000c06:	f001 fccd 	bl	80025a4 <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c10:	f7ff fed8 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20004f68 	.word	0x20004f68
 8000c1c:	40003c00 	.word	0x40003c00

08000c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a51      	ldr	r2, [pc, #324]	; (8000d84 <HAL_SPI_MspInit+0x164>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d14b      	bne.n	8000cda <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a4f      	ldr	r2, [pc, #316]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b4d      	ldr	r3, [pc, #308]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a41      	ldr	r2, [pc, #260]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b3f      	ldr	r3, [pc, #252]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
 8000c94:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c96:	2302      	movs	r3, #2
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4836      	ldr	r0, [pc, #216]	; (8000d8c <HAL_SPI_MspInit+0x16c>)
 8000cb2:	f000 fcb1 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482f      	ldr	r0, [pc, #188]	; (8000d90 <HAL_SPI_MspInit+0x170>)
 8000cd4:	f000 fca0 	bl	8001618 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cd8:	e04f      	b.n	8000d7a <HAL_SPI_MspInit+0x15a>
  else if(spiHandle->Instance==SPI3)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <HAL_SPI_MspInit+0x174>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d14a      	bne.n	8000d7a <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	4a26      	ldr	r2, [pc, #152]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_SPI_MspInit+0x168>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <HAL_SPI_MspInit+0x170>)
 8000d54:	f000 fc60 	bl	8001618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_SPI_MspInit+0x16c>)
 8000d76:	f000 fc4f 	bl	8001618 <HAL_GPIO_Init>
}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	; 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40003800 	.word	0x40003800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40003c00 	.word	0x40003c00

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f000 fbdc 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 fabe 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e40:	2040      	movs	r0, #64	; 0x40
 8000e42:	f000 fdaf 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e46:	2080      	movs	r0, #128	; 0x80
 8000e48:	f000 fdac 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e50:	f000 fda8 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000e54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e58:	f000 fda4 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e66:	f001 feed 	bl	8002c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20004fc4 	.word	0x20004fc4

08000e74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e7a:	f001 fee3 	bl	8002c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000500c 	.word	0x2000500c

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f002 fc6a 	bl	8003790 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20004fc0 	.word	0x20004fc0
 8000ef0:	200050b0 	.word	0x200050b0

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <MX_TIM10_Init+0x44>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000 - 1;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f24:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f28:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10 - 1;
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f32:	2209      	movs	r2, #9
 8000f34:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_TIM10_Init+0x40>)
 8000f44:	f001 fdbe 	bl	8002ac4 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f4e:	f7ff fd39 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20004fc4 	.word	0x20004fc4
 8000f5c:	40014400 	.word	0x40014400

08000f60 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <MX_TIM11_Init+0x44>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8000 - 1;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f6c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f70:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000 - 1;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f7e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_TIM11_Init+0x40>)
 8000f8e:	f001 fd99 	bl	8002ac4 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000f98:	f7ff fd14 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000500c 	.word	0x2000500c
 8000fa4:	40014800 	.word	0x40014800

08000fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_TIM_Base_MspInit+0x80>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d116      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_TIM_Base_MspInit+0x84>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	; (800102c <HAL_TIM_Base_MspInit+0x84>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2019      	movs	r0, #25
 8000fdc:	f000 fae5 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fe0:	2019      	movs	r0, #25
 8000fe2:	f000 fafe 	bl	80015e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000fe6:	e01a      	b.n	800101e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_TIM_Base_MspInit+0x88>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d115      	bne.n	800101e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_TIM_Base_MspInit+0x84>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_TIM_Base_MspInit+0x84>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_TIM_Base_MspInit+0x84>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	201a      	movs	r0, #26
 8001014:	f000 fac9 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001018:	201a      	movs	r0, #26
 800101a:	f000 fae2 	bl	80015e2 <HAL_NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40014400 	.word	0x40014400
 800102c:	40023800 	.word	0x40023800
 8001030:	40014800 	.word	0x40014800

08001034 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */
//Callback for the timer interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	//1 kHz interrupt to shift between the 4 display and send the numbers to them
	//With this frequency we see the displays as if all of them are lit at the same time
	//(of course just one is lit at a time)
	if(htim == &htim10)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a57      	ldr	r2, [pc, #348]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001040:	4293      	cmp	r3, r2
 8001042:	f040 809d 	bne.w	8001180 <HAL_TIM_PeriodElapsedCallback+0x14c>
	{
		//Shifting between the displays and writing out the data
		if(is7segsel1 == GPIO_PIN_RESET && is7segsel0 == GPIO_PIN_RESET)
 8001046:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d110      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800104e:	4b55      	ldr	r3, [pc, #340]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10c      	bne.n	8001070 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				Write7segsel(GPIO_PIN_RESET, GPIO_PIN_SET);
 8001056:	2101      	movs	r1, #1
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fab3 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display2[digitindex2], 1, 0);
 800105e:	4b52      	ldr	r3, [pc, #328]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001064:	1899      	adds	r1, r3, r2
 8001066:	2300      	movs	r3, #0
 8001068:	2201      	movs	r2, #1
 800106a:	4851      	ldr	r0, [pc, #324]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800106c:	f001 fb23 	bl	80026b6 <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_RESET && is7segsel0 == GPIO_PIN_SET)
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d110      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x66>
 8001078:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10c      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				Write7segsel(GPIO_PIN_SET, GPIO_PIN_RESET);
 8001080:	2100      	movs	r1, #0
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fa9e 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display1[digitindex1], 1, 0);
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800108e:	1899      	adds	r1, r3, r2
 8001090:	2300      	movs	r3, #0
 8001092:	2201      	movs	r2, #1
 8001094:	4846      	ldr	r0, [pc, #280]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001096:	f001 fb0e 	bl	80026b6 <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_SET && is7segsel0 == GPIO_PIN_RESET)
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d110      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x90>
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10c      	bne.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x90>
			{
				Write7segsel(GPIO_PIN_SET, GPIO_PIN_SET);
 80010aa:	2101      	movs	r1, #1
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fa89 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display0[digitindex0], 1, 0);
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a42      	ldr	r2, [pc, #264]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010b8:	1899      	adds	r1, r3, r2
 80010ba:	2300      	movs	r3, #0
 80010bc:	2201      	movs	r2, #1
 80010be:	483c      	ldr	r0, [pc, #240]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010c0:	f001 faf9 	bl	80026b6 <HAL_SPI_Transmit>
			}

			if(is7segsel1 == GPIO_PIN_SET && is7segsel0 == GPIO_PIN_SET)
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d110      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0xba>
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d10c      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				Write7segsel(GPIO_PIN_RESET, GPIO_PIN_RESET);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fa74 	bl	80005c4 <Write7segsel>

				HAL_SPI_Transmit(&hspi2, &display3[digitindex3], 1, 0);
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010e2:	1899      	adds	r1, r3, r2
 80010e4:	2300      	movs	r3, #0
 80010e6:	2201      	movs	r2, #1
 80010e8:	4831      	ldr	r0, [pc, #196]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010ea:	f001 fae4 	bl	80026b6 <HAL_SPI_Transmit>
			}


			is7segsel0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80010ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f2:	4836      	ldr	r0, [pc, #216]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010f4:	f000 fc24 	bl	8001940 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010fe:	701a      	strb	r2, [r3, #0]
			is7segsel1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 8001100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001104:	4831      	ldr	r0, [pc, #196]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001106:	f000 fc1b 	bl	8001940 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001110:	701a      	strb	r2, [r3, #0]

		//Checking if a specific digit reaches the maximum value (9)
		//If a digit reaches 9, then it has to become 0 at the next incrementation and we must increment the higher one
		if(digitindex0 == 10)
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d132      	bne.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			digitindex0 = 0;
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

			if(digitindex1 != 9)
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d005      	beq.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x100>
			{
				digitindex1++;
 8001128:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e025      	b.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x14c>
			}
			else
			{
				digitindex1 = 0;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

				if(digitindex2 != 9)
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b09      	cmp	r3, #9
 8001140:	d005      	beq.n	800114e <HAL_TIM_PeriodElapsedCallback+0x11a>
				{
					digitindex2++;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e018      	b.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x14c>
				}
				else
				{
					digitindex2 = 0;
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

					if(digitindex3 != 9)
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d005      	beq.n	8001168 <HAL_TIM_PeriodElapsedCallback+0x134>
					{
						digitindex3++;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3301      	adds	r3, #1
 8001162:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e00b      	b.n	8001180 <HAL_TIM_PeriodElapsedCallback+0x14c>
					}
					else
					{
						digitindex0 = 0;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x188>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
						digitindex1 = 0;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
						digitindex2 = 0;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
						digitindex3 = 0;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
		}
	}

	//The tim11 generates an interrupt every 1 second, here we just increment the time variable
	//If the sensor detects a step we save the value of this time variable into the detected step's timestamp
	if(htim == &htim11)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d105      	bne.n	8001194 <HAL_TIM_PeriodElapsedCallback+0x160>
		{
			time++;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001192:	801a      	strh	r2, [r3, #0]
		}

}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20004fc4 	.word	0x20004fc4
 80011a0:	20004f0d 	.word	0x20004f0d
 80011a4:	20004f0c 	.word	0x20004f0c
 80011a8:	200000d0 	.word	0x200000d0
 80011ac:	20000018 	.word	0x20000018
 80011b0:	20004f10 	.word	0x20004f10
 80011b4:	200000cc 	.word	0x200000cc
 80011b8:	2000000c 	.word	0x2000000c
 80011bc:	200000c8 	.word	0x200000c8
 80011c0:	20000000 	.word	0x20000000
 80011c4:	200000d4 	.word	0x200000d4
 80011c8:	20000024 	.word	0x20000024
 80011cc:	40020000 	.word	0x40020000
 80011d0:	2000500c 	.word	0x2000500c
 80011d4:	20004ef8 	.word	0x20004ef8

080011d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f001 fefc 	bl	800300c <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f7ff fbd3 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20005054 	.word	0x20005054
 8001228:	40004400 	.word	0x40004400

0800122c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_UART_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <HAL_UART_MspInit+0x88>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_UART_MspInit+0x88>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001296:	2307      	movs	r3, #7
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_UART_MspInit+0x8c>)
 80012a2:	f000 f9b9 	bl	8001618 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40004400 	.word	0x40004400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012c2:	490e      	ldr	r1, [pc, #56]	; (80012fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d8:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e6:	f7ff fe05 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f002 fa57 	bl	800379c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fac5 	bl	800087c <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001300:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 8001304:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001308:	200050ac 	.word	0x200050ac

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_Init+0x40>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_Init+0x40>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x40>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f92b 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fd28 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023c00 	.word	0x40023c00

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f943 	bl	80015fe <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f90b 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000003c 	.word	0x2000003c
 80013ac:	20000044 	.word	0x20000044
 80013b0:	20000040 	.word	0x20000040

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000044 	.word	0x20000044
 80013d8:	20005098 	.word	0x20005098

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20005098 	.word	0x20005098

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff3e 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff8e 	bl	80014e8 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff31 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e165      	b.n	8001900 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 8154 	bne.w	80018fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d005      	beq.n	800166a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	2b02      	cmp	r3, #2
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80ae 	beq.w	80018fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b5d      	ldr	r3, [pc, #372]	; (8001918 <HAL_GPIO_Init+0x300>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a5c      	ldr	r2, [pc, #368]	; (8001918 <HAL_GPIO_Init+0x300>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_GPIO_Init+0x300>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_GPIO_Init+0x304>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4f      	ldr	r2, [pc, #316]	; (8001920 <HAL_GPIO_Init+0x308>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d025      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4e      	ldr	r2, [pc, #312]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01f      	beq.n	800182e <HAL_GPIO_Init+0x216>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_GPIO_Init+0x310>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d019      	beq.n	800182a <HAL_GPIO_Init+0x212>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x314>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4b      	ldr	r2, [pc, #300]	; (8001930 <HAL_GPIO_Init+0x318>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00d      	beq.n	8001822 <HAL_GPIO_Init+0x20a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4a      	ldr	r2, [pc, #296]	; (8001934 <HAL_GPIO_Init+0x31c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d007      	beq.n	800181e <HAL_GPIO_Init+0x206>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a49      	ldr	r2, [pc, #292]	; (8001938 <HAL_GPIO_Init+0x320>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_GPIO_Init+0x202>
 8001816:	2306      	movs	r3, #6
 8001818:	e00c      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 800181a:	2307      	movs	r3, #7
 800181c:	e00a      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 800181e:	2305      	movs	r3, #5
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x21c>
 8001832:	2300      	movs	r3, #0
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001844:	4935      	ldr	r1, [pc, #212]	; (800191c <HAL_GPIO_Init+0x304>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_GPIO_Init+0x324>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a31      	ldr	r2, [pc, #196]	; (800193c <HAL_GPIO_Init+0x324>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HAL_GPIO_Init+0x324>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_GPIO_Init+0x324>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_GPIO_Init+0x324>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_GPIO_Init+0x324>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_GPIO_Init+0x324>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_GPIO_Init+0x324>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	f67f ae96 	bls.w	8001634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	; 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40013800 	.word	0x40013800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40021400 	.word	0x40021400
 8001938:	40021800 	.word	0x40021800
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fed4 	bl	8000770 <HAL_GPIO_EXTI_Callback>
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40013c00 	.word	0x40013c00

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0cc      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d90c      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b65      	ldr	r3, [pc, #404]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0b8      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	494d      	ldr	r1, [pc, #308]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d044      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e067      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4934      	ldr	r1, [pc, #208]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff fc8a 	bl	80013dc <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff fc86 	bl	80013dc <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e04f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d20c      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e032      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b5a:	f000 f855 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	490a      	ldr	r1, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fbea 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023c00 	.word	0x40023c00
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080040ec 	.word	0x080040ec
 8001b98:	2000003c 	.word	0x2000003c
 8001b9c:	20000040 	.word	0x20000040

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000003c 	.word	0x2000003c

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	4903      	ldr	r1, [pc, #12]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bce:	5ccb      	ldrb	r3, [r1, r3]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	080040fc 	.word	0x080040fc

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001be4:	f7ff ffdc 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0b5b      	lsrs	r3, r3, #13
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4903      	ldr	r1, [pc, #12]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	080040fc 	.word	0x080040fc

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0c:	b0ae      	sub	sp, #184	; 0xb8
 8001c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2e:	4bcb      	ldr	r3, [pc, #812]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	f200 8206 	bhi.w	8002048 <HAL_RCC_GetSysClockFreq+0x440>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c79 	.word	0x08001c79
 8001c48:	08002049 	.word	0x08002049
 8001c4c:	08002049 	.word	0x08002049
 8001c50:	08002049 	.word	0x08002049
 8001c54:	08001c81 	.word	0x08001c81
 8001c58:	08002049 	.word	0x08002049
 8001c5c:	08002049 	.word	0x08002049
 8001c60:	08002049 	.word	0x08002049
 8001c64:	08001c89 	.word	0x08001c89
 8001c68:	08002049 	.word	0x08002049
 8001c6c:	08002049 	.word	0x08002049
 8001c70:	08002049 	.word	0x08002049
 8001c74:	08001e79 	.word	0x08001e79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4bb9      	ldr	r3, [pc, #740]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001c7e:	e1e7      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c80:	4bb8      	ldr	r3, [pc, #736]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c86:	e1e3      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c88:	4bb4      	ldr	r3, [pc, #720]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c94:	4bb1      	ldr	r3, [pc, #708]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d071      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	4bae      	ldr	r3, [pc, #696]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001cac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	462b      	mov	r3, r5
 8001cca:	f04f 0000 	mov.w	r0, #0
 8001cce:	f04f 0100 	mov.w	r1, #0
 8001cd2:	0159      	lsls	r1, r3, #5
 8001cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd8:	0150      	lsls	r0, r2, #5
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4621      	mov	r1, r4
 8001ce0:	1a51      	subs	r1, r2, r1
 8001ce2:	6439      	str	r1, [r7, #64]	; 0x40
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d02:	4641      	mov	r1, r8
 8001d04:	018a      	lsls	r2, r1, #6
 8001d06:	4641      	mov	r1, r8
 8001d08:	1a51      	subs	r1, r2, r1
 8001d0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001d20:	4649      	mov	r1, r9
 8001d22:	00cb      	lsls	r3, r1, #3
 8001d24:	4641      	mov	r1, r8
 8001d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	00ca      	lsls	r2, r1, #3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	4603      	mov	r3, r0
 8001d34:	4622      	mov	r2, r4
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
 8001d3a:	462b      	mov	r3, r5
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	eb42 0303 	adc.w	r3, r2, r3
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d50:	4629      	mov	r1, r5
 8001d52:	024b      	lsls	r3, r1, #9
 8001d54:	4621      	mov	r1, r4
 8001d56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	024a      	lsls	r2, r1, #9
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d70:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d74:	f7fe faa4 	bl	80002c0 <__aeabi_uldivmod>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d82:	e067      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d84:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d9e:	2300      	movs	r3, #0
 8001da0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001da2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001da6:	4622      	mov	r2, r4
 8001da8:	462b      	mov	r3, r5
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0159      	lsls	r1, r3, #5
 8001db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db8:	0150      	lsls	r0, r2, #5
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001dd8:	4649      	mov	r1, r9
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	4641      	mov	r1, r8
 8001dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001de2:	4641      	mov	r1, r8
 8001de4:	018a      	lsls	r2, r1, #6
 8001de6:	4641      	mov	r1, r8
 8001de8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dec:	4649      	mov	r1, r9
 8001dee:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dfe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e06:	4692      	mov	sl, r2
 8001e08:	469b      	mov	fp, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	eb1a 0303 	adds.w	r3, sl, r3
 8001e10:	623b      	str	r3, [r7, #32]
 8001e12:	462b      	mov	r3, r5
 8001e14:	eb4b 0303 	adc.w	r3, fp, r3
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001e26:	4629      	mov	r1, r5
 8001e28:	028b      	lsls	r3, r1, #10
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e30:	4621      	mov	r1, r4
 8001e32:	028a      	lsls	r2, r1, #10
 8001e34:	4610      	mov	r0, r2
 8001e36:	4619      	mov	r1, r3
 8001e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	673b      	str	r3, [r7, #112]	; 0x70
 8001e40:	677a      	str	r2, [r7, #116]	; 0x74
 8001e42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e46:	f7fe fa3b 	bl	80002c0 <__aeabi_uldivmod>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4613      	mov	r3, r2
 8001e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e76:	e0eb      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06b      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x354>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	2200      	movs	r2, #0
 8001e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ea8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001eac:	4622      	mov	r2, r4
 8001eae:	462b      	mov	r3, r5
 8001eb0:	f04f 0000 	mov.w	r0, #0
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	0159      	lsls	r1, r3, #5
 8001eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ebe:	0150      	lsls	r0, r2, #5
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	1a51      	subs	r1, r2, r1
 8001ec8:	61b9      	str	r1, [r7, #24]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ede:	4659      	mov	r1, fp
 8001ee0:	018b      	lsls	r3, r1, #6
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ee8:	4651      	mov	r1, sl
 8001eea:	018a      	lsls	r2, r1, #6
 8001eec:	4651      	mov	r1, sl
 8001eee:	ebb2 0801 	subs.w	r8, r2, r1
 8001ef2:	4659      	mov	r1, fp
 8001ef4:	eb63 0901 	sbc.w	r9, r3, r1
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f0c:	4690      	mov	r8, r2
 8001f0e:	4699      	mov	r9, r3
 8001f10:	4623      	mov	r3, r4
 8001f12:	eb18 0303 	adds.w	r3, r8, r3
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	462b      	mov	r3, r5
 8001f1a:	eb49 0303 	adc.w	r3, r9, r3
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	024b      	lsls	r3, r1, #9
 8001f30:	4621      	mov	r1, r4
 8001f32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f36:	4621      	mov	r1, r4
 8001f38:	024a      	lsls	r2, r1, #9
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f42:	2200      	movs	r2, #0
 8001f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001f48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f4c:	f7fe f9b8 	bl	80002c0 <__aeabi_uldivmod>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4613      	mov	r3, r2
 8001f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f5a:	e065      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x420>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	00f42400 	.word	0x00f42400
 8001f64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	4611      	mov	r1, r2
 8001f74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f78:	653b      	str	r3, [r7, #80]	; 0x50
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8001f7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001f82:	4642      	mov	r2, r8
 8001f84:	464b      	mov	r3, r9
 8001f86:	f04f 0000 	mov.w	r0, #0
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	0159      	lsls	r1, r3, #5
 8001f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f94:	0150      	lsls	r0, r2, #5
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4641      	mov	r1, r8
 8001f9c:	1a51      	subs	r1, r2, r1
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	4649      	mov	r1, r9
 8001fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001fb4:	4659      	mov	r1, fp
 8001fb6:	018b      	lsls	r3, r1, #6
 8001fb8:	4651      	mov	r1, sl
 8001fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	018a      	lsls	r2, r1, #6
 8001fc2:	4651      	mov	r1, sl
 8001fc4:	1a54      	subs	r4, r2, r1
 8001fc6:	4659      	mov	r1, fp
 8001fc8:	eb63 0501 	sbc.w	r5, r3, r1
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	00eb      	lsls	r3, r5, #3
 8001fd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fda:	00e2      	lsls	r2, r4, #3
 8001fdc:	4614      	mov	r4, r2
 8001fde:	461d      	mov	r5, r3
 8001fe0:	4643      	mov	r3, r8
 8001fe2:	18e3      	adds	r3, r4, r3
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	eb45 0303 	adc.w	r3, r5, r3
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	028b      	lsls	r3, r1, #10
 8001ffe:	4621      	mov	r1, r4
 8002000:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002004:	4621      	mov	r1, r4
 8002006:	028a      	lsls	r2, r1, #10
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002010:	2200      	movs	r2, #0
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
 8002014:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002016:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800201a:	f7fe f951 	bl	80002c0 <__aeabi_uldivmod>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4613      	mov	r3, r2
 8002024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_GetSysClockFreq+0x458>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0f1b      	lsrs	r3, r3, #28
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800203a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002046:	e003      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetSysClockFreq+0x45c>)
 800204a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800204e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002050:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002054:	4618      	mov	r0, r3
 8002056:	37b8      	adds	r7, #184	; 0xb8
 8002058:	46bd      	mov	sp, r7
 800205a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	00f42400 	.word	0x00f42400

08002068 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e28d      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8083 	beq.w	800218e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002088:	4b94      	ldr	r3, [pc, #592]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b04      	cmp	r3, #4
 8002092:	d019      	beq.n	80020c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002094:	4b91      	ldr	r3, [pc, #580]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800209c:	2b08      	cmp	r3, #8
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020a0:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ac:	d00c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d112      	bne.n	80020e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4b84      	ldr	r3, [pc, #528]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05b      	beq.n	800218c <HAL_RCC_OscConfig+0x124>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d157      	bne.n	800218c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e25a      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x90>
 80020ea:	4b7c      	ldr	r3, [pc, #496]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7b      	ldr	r2, [pc, #492]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xcc>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0xb4>
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a75      	ldr	r2, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b73      	ldr	r3, [pc, #460]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a72      	ldr	r2, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xcc>
 800211c:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f94e 	bl	80013dc <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff f94a 	bl	80013dc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e21f      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xdc>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff f93a 	bl	80013dc <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff f936 	bl	80013dc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e20b      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b57      	ldr	r3, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x104>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d06f      	beq.n	800227a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800219a:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d017      	beq.n	80021d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021a6:	4b4d      	ldr	r3, [pc, #308]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021b2:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ca:	4b44      	ldr	r3, [pc, #272]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x186>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1d3      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4937      	ldr	r1, [pc, #220]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e03a      	b.n	800227a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d020      	beq.n	800224e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCC_OscConfig+0x278>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff f8e3 	bl	80013dc <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff f8df 	bl	80013dc <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1b4      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4925      	ldr	r1, [pc, #148]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x278>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7ff f8c2 	bl	80013dc <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225c:	f7ff f8be 	bl	80013dc <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e193      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d036      	beq.n	80022f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d016      	beq.n	80022bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_RCC_OscConfig+0x27c>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7ff f8a2 	bl	80013dc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229c:	f7ff f89e 	bl	80013dc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e173      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_OscConfig+0x274>)
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x234>
 80022ba:	e01b      	b.n	80022f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_OscConfig+0x27c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7ff f88b 	bl	80013dc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	e00e      	b.n	80022e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ca:	f7ff f887 	bl	80013dc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d907      	bls.n	80022e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e15c      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	42470000 	.word	0x42470000
 80022e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80022ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ea      	bne.n	80022ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8097 	beq.w	8002430 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10f      	bne.n	8002332 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a7e      	ldr	r2, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b79      	ldr	r3, [pc, #484]	; (8002518 <HAL_RCC_OscConfig+0x4b0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d118      	bne.n	8002370 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x4b0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x4b0>)
 8002344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234a:	f7ff f847 	bl	80013dc <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002352:	f7ff f843 	bl	80013dc <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e118      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002364:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x4b0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x31e>
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a65      	ldr	r2, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	e01c      	b.n	80023c0 <HAL_RCC_OscConfig+0x358>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x340>
 800238e:	4b61      	ldr	r3, [pc, #388]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	4a60      	ldr	r2, [pc, #384]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6713      	str	r3, [r2, #112]	; 0x70
 800239a:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239e:	4a5d      	ldr	r2, [pc, #372]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6713      	str	r3, [r2, #112]	; 0x70
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0x358>
 80023a8:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a59      	ldr	r2, [pc, #356]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
 80023b4:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7ff f808 	bl	80013dc <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7ff f804 	bl	80013dc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0d7      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e6:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ee      	beq.n	80023d0 <HAL_RCC_OscConfig+0x368>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fff2 	bl	80013dc <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe ffee 	bl	80013dc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e0c1      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ee      	bne.n	80023fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d105      	bne.n	8002430 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 800242a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80ad 	beq.w	8002594 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d060      	beq.n	8002508 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d145      	bne.n	80024da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b33      	ldr	r3, [pc, #204]	; (800251c <HAL_RCC_OscConfig+0x4b4>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe ffc2 	bl	80013dc <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe ffbe 	bl	80013dc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e093      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	019b      	lsls	r3, r3, #6
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	071b      	lsls	r3, r3, #28
 80024a6:	491b      	ldr	r1, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x4b4>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe ff93 	bl	80013dc <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe ff8f 	bl	80013dc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e064      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x452>
 80024d8:	e05c      	b.n	8002594 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x4b4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe ff7c 	bl	80013dc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe ff78 	bl	80013dc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04d      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x480>
 8002506:	e045      	b.n	8002594 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e040      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000
 800251c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <HAL_RCC_OscConfig+0x538>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d030      	beq.n	8002590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d129      	bne.n	8002590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d122      	bne.n	8002590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002558:	4293      	cmp	r3, r2
 800255a:	d119      	bne.n	8002590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	3b01      	subs	r3, #1
 800256a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d10f      	bne.n	8002590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07b      	b.n	80026ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c6:	d009      	beq.n	80025dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
 80025ce:	e005      	b.n	80025dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe fb12 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002612:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	ea42 0103 	orr.w	r1, r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f003 0104 	and.w	r1, r3, #4
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f003 0210 	and.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b088      	sub	sp, #32
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_SPI_Transmit+0x22>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e126      	b.n	8002926 <HAL_SPI_Transmit+0x270>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026e0:	f7fe fe7c 	bl	80013dc <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d002      	beq.n	80026fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
 80026f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026fa:	e10b      	b.n	8002914 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Transmit+0x52>
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800270c:	e102      	b.n	8002914 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002754:	d10f      	bne.n	8002776 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002774:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d007      	beq.n	8002794 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800279c:	d14b      	bne.n	8002836 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_Transmit+0xf6>
 80027a6:	8afb      	ldrh	r3, [r7, #22]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d13e      	bne.n	800282a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	1c9a      	adds	r2, r3, #2
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027d0:	e02b      	b.n	800282a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d112      	bne.n	8002806 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	1c9a      	adds	r2, r3, #2
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	86da      	strh	r2, [r3, #54]	; 0x36
 8002804:	e011      	b.n	800282a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002806:	f7fe fde9 	bl	80013dc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d803      	bhi.n	800281e <HAL_SPI_Transmit+0x168>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d102      	bne.n	8002824 <HAL_SPI_Transmit+0x16e>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002828:	e074      	b.n	8002914 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ce      	bne.n	80027d2 <HAL_SPI_Transmit+0x11c>
 8002834:	e04c      	b.n	80028d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_SPI_Transmit+0x18e>
 800283e:	8afb      	ldrh	r3, [r7, #22]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d140      	bne.n	80028c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800286a:	e02c      	b.n	80028c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d113      	bne.n	80028a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	330c      	adds	r3, #12
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	86da      	strh	r2, [r3, #54]	; 0x36
 80028a0:	e011      	b.n	80028c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028a2:	f7fe fd9b 	bl	80013dc <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d803      	bhi.n	80028ba <HAL_SPI_Transmit+0x204>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d102      	bne.n	80028c0 <HAL_SPI_Transmit+0x20a>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028c4:	e026      	b.n	8002914 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1cd      	bne.n	800286c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8b3 	bl	8002a40 <SPI_EndRxTxTransaction>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	77fb      	strb	r3, [r7, #31]
 8002910:	e000      	b.n	8002914 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002924:	7ffb      	ldrb	r3, [r7, #31]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002940:	f7fe fd4c 	bl	80013dc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	4413      	add	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002950:	f7fe fd44 	bl	80013dc <HAL_GetTick>
 8002954:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002956:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	0d1b      	lsrs	r3, r3, #20
 800295e:	69fa      	ldr	r2, [r7, #28]
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002966:	e054      	b.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d050      	beq.n	8002a12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002970:	f7fe fd34 	bl	80013dc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	429a      	cmp	r2, r3
 800297e:	d902      	bls.n	8002986 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d13d      	bne.n	8002a02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002994:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299e:	d111      	bne.n	80029c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a8:	d004      	beq.n	80029b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	d107      	bne.n	80029c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029cc:	d10f      	bne.n	80029ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e017      	b.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	bf0c      	ite	eq
 8002a22:	2301      	moveq	r3, #1
 8002a24:	2300      	movne	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d19b      	bne.n	8002968 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000003c 	.word	0x2000003c

08002a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <SPI_EndRxTxTransaction+0x7c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1b      	ldr	r2, [pc, #108]	; (8002ac0 <SPI_EndRxTxTransaction+0x80>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0d5b      	lsrs	r3, r3, #21
 8002a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a6a:	d112      	bne.n	8002a92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff ff5a 	bl	8002930 <SPI_WaitFlagStateUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e00f      	b.n	8002ab2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d0f2      	beq.n	8002a92 <SPI_EndRxTxTransaction+0x52>
 8002aac:	e000      	b.n	8002ab0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002aae:	bf00      	nop
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000003c 	.word	0x2000003c
 8002ac0:	165e9f81 	.word	0x165e9f81

08002ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e041      	b.n	8002b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe fa5c 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f000 f9ce 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d001      	beq.n	8002b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e04e      	b.n	8002c1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0201 	orr.w	r2, r2, #1
 8002b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d022      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d01d      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d018      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d013      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00e      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x80>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d111      	bne.n	8002c08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d010      	beq.n	8002c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	e007      	b.n	8002c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40000c00 	.word	0x40000c00
 8002c38:	40010400 	.word	0x40010400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40001800 	.word	0x40001800

08002c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0202 	mvn.w	r2, #2
 8002c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8ee 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8e0 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f8f1 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0204 	mvn.w	r2, #4
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8c4 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8b6 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8c7 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0208 	mvn.w	r2, #8
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f89a 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f88c 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f89d 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2208      	movs	r2, #8
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f870 	bl	8002e68 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f862 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f873 	bl	8002e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0201 	mvn.w	r2, #1
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe f936 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f902 	bl	8002ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f838 	bl	8002e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d10e      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d107      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0220 	mvn.w	r2, #32
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f8cc 	bl	8002fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d00f      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a3c      	ldr	r2, [pc, #240]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d007      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <TIM_Base_SetConfig+0x120>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d027      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d023      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <TIM_Base_SetConfig+0x120>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d017      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <TIM_Base_SetConfig+0x128>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <TIM_Base_SetConfig+0x12c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00f      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <TIM_Base_SetConfig+0x130>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a25      	ldr	r2, [pc, #148]	; (8002fd8 <TIM_Base_SetConfig+0x134>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <TIM_Base_SetConfig+0x138>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <TIM_Base_SetConfig+0x13c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0xf8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d103      	bne.n	8002fa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	615a      	str	r2, [r3, #20]
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40010400 	.word	0x40010400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	40001800 	.word	0x40001800
 8002fdc:	40001c00 	.word	0x40001c00
 8002fe0:	40002000 	.word	0x40002000

08002fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e03f      	b.n	800309e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe f8fa 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f929 	bl	80032a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b08a      	sub	sp, #40	; 0x28
 80030aa:	af02      	add	r7, sp, #8
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d17c      	bne.n	80031c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_UART_Transmit+0x2c>
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e075      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x3e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e06e      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2221      	movs	r2, #33	; 0x21
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030fa:	f7fe f96f 	bl	80013dc <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	88fa      	ldrh	r2, [r7, #6]
 800310a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003114:	d108      	bne.n	8003128 <HAL_UART_Transmit+0x82>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e003      	b.n	8003130 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003138:	e02a      	b.n	8003190 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f840 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e036      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003168:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3302      	adds	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e007      	b.n	8003182 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1cf      	bne.n	800313a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2140      	movs	r1, #64	; 0x40
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f810 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e006      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b090      	sub	sp, #64	; 0x40
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	e050      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d04c      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0x30>
 80031ea:	f7fe f8f7 	bl	80013dc <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d241      	bcs.n	800327e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800321a:	637a      	str	r2, [r7, #52]	; 0x34
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3314      	adds	r3, #20
 8003234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	613b      	str	r3, [r7, #16]
   return(result);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3314      	adds	r3, #20
 800324c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324e:	623a      	str	r2, [r7, #32]
 8003250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	69f9      	ldr	r1, [r7, #28]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	61bb      	str	r3, [r7, #24]
   return(result);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d09f      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3740      	adds	r7, #64	; 0x40
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	b0c0      	sub	sp, #256	; 0x100
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	ea40 0301 	orr.w	r3, r0, r1
 80032d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003300:	f021 010c 	bic.w	r1, r1, #12
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800330e:	430b      	orrs	r3, r1
 8003310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003322:	6999      	ldr	r1, [r3, #24]
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	ea40 0301 	orr.w	r3, r0, r1
 800332e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b8f      	ldr	r3, [pc, #572]	; (8003574 <UART_SetConfig+0x2cc>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d005      	beq.n	8003348 <UART_SetConfig+0xa0>
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b8d      	ldr	r3, [pc, #564]	; (8003578 <UART_SetConfig+0x2d0>)
 8003344:	429a      	cmp	r2, r3
 8003346:	d104      	bne.n	8003352 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003348:	f7fe fc4a 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 800334c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003350:	e003      	b.n	800335a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003352:	f7fe fc31 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8003356:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	f040 810c 	bne.w	8003580 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003372:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003376:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800337a:	4622      	mov	r2, r4
 800337c:	462b      	mov	r3, r5
 800337e:	1891      	adds	r1, r2, r2
 8003380:	65b9      	str	r1, [r7, #88]	; 0x58
 8003382:	415b      	adcs	r3, r3
 8003384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003386:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800338a:	4621      	mov	r1, r4
 800338c:	eb12 0801 	adds.w	r8, r2, r1
 8003390:	4629      	mov	r1, r5
 8003392:	eb43 0901 	adc.w	r9, r3, r1
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033aa:	4690      	mov	r8, r2
 80033ac:	4699      	mov	r9, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	eb18 0303 	adds.w	r3, r8, r3
 80033b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033b8:	462b      	mov	r3, r5
 80033ba:	eb49 0303 	adc.w	r3, r9, r3
 80033be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033d6:	460b      	mov	r3, r1
 80033d8:	18db      	adds	r3, r3, r3
 80033da:	653b      	str	r3, [r7, #80]	; 0x50
 80033dc:	4613      	mov	r3, r2
 80033de:	eb42 0303 	adc.w	r3, r2, r3
 80033e2:	657b      	str	r3, [r7, #84]	; 0x54
 80033e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033ec:	f7fc ff68 	bl	80002c0 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4b61      	ldr	r3, [pc, #388]	; (800357c <UART_SetConfig+0x2d4>)
 80033f6:	fba3 2302 	umull	r2, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	011c      	lsls	r4, r3, #4
 80033fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003408:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800340c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003410:	4642      	mov	r2, r8
 8003412:	464b      	mov	r3, r9
 8003414:	1891      	adds	r1, r2, r2
 8003416:	64b9      	str	r1, [r7, #72]	; 0x48
 8003418:	415b      	adcs	r3, r3
 800341a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800341c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003420:	4641      	mov	r1, r8
 8003422:	eb12 0a01 	adds.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb43 0b01 	adc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003438:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800343c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003440:	4692      	mov	sl, r2
 8003442:	469b      	mov	fp, r3
 8003444:	4643      	mov	r3, r8
 8003446:	eb1a 0303 	adds.w	r3, sl, r3
 800344a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800344e:	464b      	mov	r3, r9
 8003450:	eb4b 0303 	adc.w	r3, fp, r3
 8003454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003464:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003468:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800346c:	460b      	mov	r3, r1
 800346e:	18db      	adds	r3, r3, r3
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
 8003472:	4613      	mov	r3, r2
 8003474:	eb42 0303 	adc.w	r3, r2, r3
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
 800347a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800347e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003482:	f7fc ff1d 	bl	80002c0 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4611      	mov	r1, r2
 800348c:	4b3b      	ldr	r3, [pc, #236]	; (800357c <UART_SetConfig+0x2d4>)
 800348e:	fba3 2301 	umull	r2, r3, r3, r1
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2264      	movs	r2, #100	; 0x64
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	1acb      	subs	r3, r1, r3
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <UART_SetConfig+0x2d4>)
 80034a4:	fba3 2302 	umull	r2, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b0:	441c      	add	r4, r3
 80034b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034c4:	4642      	mov	r2, r8
 80034c6:	464b      	mov	r3, r9
 80034c8:	1891      	adds	r1, r2, r2
 80034ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80034cc:	415b      	adcs	r3, r3
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034d4:	4641      	mov	r1, r8
 80034d6:	1851      	adds	r1, r2, r1
 80034d8:	6339      	str	r1, [r7, #48]	; 0x30
 80034da:	4649      	mov	r1, r9
 80034dc:	414b      	adcs	r3, r1
 80034de:	637b      	str	r3, [r7, #52]	; 0x34
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034ec:	4659      	mov	r1, fp
 80034ee:	00cb      	lsls	r3, r1, #3
 80034f0:	4651      	mov	r1, sl
 80034f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034f6:	4651      	mov	r1, sl
 80034f8:	00ca      	lsls	r2, r1, #3
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	4642      	mov	r2, r8
 8003502:	189b      	adds	r3, r3, r2
 8003504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003508:	464b      	mov	r3, r9
 800350a:	460a      	mov	r2, r1
 800350c:	eb42 0303 	adc.w	r3, r2, r3
 8003510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003520:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003524:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003528:	460b      	mov	r3, r1
 800352a:	18db      	adds	r3, r3, r3
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	4613      	mov	r3, r2
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800353a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800353e:	f7fc febf 	bl	80002c0 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <UART_SetConfig+0x2d4>)
 8003548:	fba3 1302 	umull	r1, r3, r3, r2
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	2164      	movs	r1, #100	; 0x64
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	3332      	adds	r3, #50	; 0x32
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <UART_SetConfig+0x2d4>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	f003 0207 	and.w	r2, r3, #7
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4422      	add	r2, r4
 800356e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003570:	e105      	b.n	800377e <UART_SetConfig+0x4d6>
 8003572:	bf00      	nop
 8003574:	40011000 	.word	0x40011000
 8003578:	40011400 	.word	0x40011400
 800357c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800358a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800358e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003592:	4642      	mov	r2, r8
 8003594:	464b      	mov	r3, r9
 8003596:	1891      	adds	r1, r2, r2
 8003598:	6239      	str	r1, [r7, #32]
 800359a:	415b      	adcs	r3, r3
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035a2:	4641      	mov	r1, r8
 80035a4:	1854      	adds	r4, r2, r1
 80035a6:	4649      	mov	r1, r9
 80035a8:	eb43 0501 	adc.w	r5, r3, r1
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	00eb      	lsls	r3, r5, #3
 80035b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ba:	00e2      	lsls	r2, r4, #3
 80035bc:	4614      	mov	r4, r2
 80035be:	461d      	mov	r5, r3
 80035c0:	4643      	mov	r3, r8
 80035c2:	18e3      	adds	r3, r4, r3
 80035c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035c8:	464b      	mov	r3, r9
 80035ca:	eb45 0303 	adc.w	r3, r5, r3
 80035ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ee:	4629      	mov	r1, r5
 80035f0:	008b      	lsls	r3, r1, #2
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f8:	4621      	mov	r1, r4
 80035fa:	008a      	lsls	r2, r1, #2
 80035fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003600:	f7fc fe5e 	bl	80002c0 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4b60      	ldr	r3, [pc, #384]	; (800378c <UART_SetConfig+0x4e4>)
 800360a:	fba3 2302 	umull	r2, r3, r3, r2
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	011c      	lsls	r4, r3, #4
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800361c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003620:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003624:	4642      	mov	r2, r8
 8003626:	464b      	mov	r3, r9
 8003628:	1891      	adds	r1, r2, r2
 800362a:	61b9      	str	r1, [r7, #24]
 800362c:	415b      	adcs	r3, r3
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003634:	4641      	mov	r1, r8
 8003636:	1851      	adds	r1, r2, r1
 8003638:	6139      	str	r1, [r7, #16]
 800363a:	4649      	mov	r1, r9
 800363c:	414b      	adcs	r3, r1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800364c:	4659      	mov	r1, fp
 800364e:	00cb      	lsls	r3, r1, #3
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003656:	4651      	mov	r1, sl
 8003658:	00ca      	lsls	r2, r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	4603      	mov	r3, r0
 8003660:	4642      	mov	r2, r8
 8003662:	189b      	adds	r3, r3, r2
 8003664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003668:	464b      	mov	r3, r9
 800366a:	460a      	mov	r2, r1
 800366c:	eb42 0303 	adc.w	r3, r2, r3
 8003670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	67bb      	str	r3, [r7, #120]	; 0x78
 800367e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800368c:	4649      	mov	r1, r9
 800368e:	008b      	lsls	r3, r1, #2
 8003690:	4641      	mov	r1, r8
 8003692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003696:	4641      	mov	r1, r8
 8003698:	008a      	lsls	r2, r1, #2
 800369a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800369e:	f7fc fe0f 	bl	80002c0 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <UART_SetConfig+0x4e4>)
 80036a8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2164      	movs	r1, #100	; 0x64
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a34      	ldr	r2, [pc, #208]	; (800378c <UART_SetConfig+0x4e4>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c6:	441c      	add	r4, r3
 80036c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036cc:	2200      	movs	r2, #0
 80036ce:	673b      	str	r3, [r7, #112]	; 0x70
 80036d0:	677a      	str	r2, [r7, #116]	; 0x74
 80036d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036d6:	4642      	mov	r2, r8
 80036d8:	464b      	mov	r3, r9
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	415b      	adcs	r3, r3
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e6:	4641      	mov	r1, r8
 80036e8:	1851      	adds	r1, r2, r1
 80036ea:	6039      	str	r1, [r7, #0]
 80036ec:	4649      	mov	r1, r9
 80036ee:	414b      	adcs	r3, r1
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036fe:	4659      	mov	r1, fp
 8003700:	00cb      	lsls	r3, r1, #3
 8003702:	4651      	mov	r1, sl
 8003704:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003708:	4651      	mov	r1, sl
 800370a:	00ca      	lsls	r2, r1, #3
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	4603      	mov	r3, r0
 8003712:	4642      	mov	r2, r8
 8003714:	189b      	adds	r3, r3, r2
 8003716:	66bb      	str	r3, [r7, #104]	; 0x68
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	663b      	str	r3, [r7, #96]	; 0x60
 800372c:	667a      	str	r2, [r7, #100]	; 0x64
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800373a:	4649      	mov	r1, r9
 800373c:	008b      	lsls	r3, r1, #2
 800373e:	4641      	mov	r1, r8
 8003740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003744:	4641      	mov	r1, r8
 8003746:	008a      	lsls	r2, r1, #2
 8003748:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800374c:	f7fc fdb8 	bl	80002c0 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <UART_SetConfig+0x4e4>)
 8003756:	fba3 1302 	umull	r1, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2164      	movs	r1, #100	; 0x64
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <UART_SetConfig+0x4e4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4422      	add	r2, r4
 800377c:	609a      	str	r2, [r3, #8]
}
 800377e:	bf00      	nop
 8003780:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	51eb851f 	.word	0x51eb851f

08003790 <__errno>:
 8003790:	4b01      	ldr	r3, [pc, #4]	; (8003798 <__errno+0x8>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000048 	.word	0x20000048

0800379c <__libc_init_array>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4d0d      	ldr	r5, [pc, #52]	; (80037d4 <__libc_init_array+0x38>)
 80037a0:	4c0d      	ldr	r4, [pc, #52]	; (80037d8 <__libc_init_array+0x3c>)
 80037a2:	1b64      	subs	r4, r4, r5
 80037a4:	10a4      	asrs	r4, r4, #2
 80037a6:	2600      	movs	r6, #0
 80037a8:	42a6      	cmp	r6, r4
 80037aa:	d109      	bne.n	80037c0 <__libc_init_array+0x24>
 80037ac:	4d0b      	ldr	r5, [pc, #44]	; (80037dc <__libc_init_array+0x40>)
 80037ae:	4c0c      	ldr	r4, [pc, #48]	; (80037e0 <__libc_init_array+0x44>)
 80037b0:	f000 fc8e 	bl	80040d0 <_init>
 80037b4:	1b64      	subs	r4, r4, r5
 80037b6:	10a4      	asrs	r4, r4, #2
 80037b8:	2600      	movs	r6, #0
 80037ba:	42a6      	cmp	r6, r4
 80037bc:	d105      	bne.n	80037ca <__libc_init_array+0x2e>
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037c4:	4798      	blx	r3
 80037c6:	3601      	adds	r6, #1
 80037c8:	e7ee      	b.n	80037a8 <__libc_init_array+0xc>
 80037ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ce:	4798      	blx	r3
 80037d0:	3601      	adds	r6, #1
 80037d2:	e7f2      	b.n	80037ba <__libc_init_array+0x1e>
 80037d4:	08004140 	.word	0x08004140
 80037d8:	08004140 	.word	0x08004140
 80037dc:	08004140 	.word	0x08004140
 80037e0:	08004144 	.word	0x08004144

080037e4 <memset>:
 80037e4:	4402      	add	r2, r0
 80037e6:	4603      	mov	r3, r0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d100      	bne.n	80037ee <memset+0xa>
 80037ec:	4770      	bx	lr
 80037ee:	f803 1b01 	strb.w	r1, [r3], #1
 80037f2:	e7f9      	b.n	80037e8 <memset+0x4>

080037f4 <siprintf>:
 80037f4:	b40e      	push	{r1, r2, r3}
 80037f6:	b500      	push	{lr}
 80037f8:	b09c      	sub	sp, #112	; 0x70
 80037fa:	ab1d      	add	r3, sp, #116	; 0x74
 80037fc:	9002      	str	r0, [sp, #8]
 80037fe:	9006      	str	r0, [sp, #24]
 8003800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003804:	4809      	ldr	r0, [pc, #36]	; (800382c <siprintf+0x38>)
 8003806:	9107      	str	r1, [sp, #28]
 8003808:	9104      	str	r1, [sp, #16]
 800380a:	4909      	ldr	r1, [pc, #36]	; (8003830 <siprintf+0x3c>)
 800380c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003810:	9105      	str	r1, [sp, #20]
 8003812:	6800      	ldr	r0, [r0, #0]
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	a902      	add	r1, sp, #8
 8003818:	f000 f868 	bl	80038ec <_svfiprintf_r>
 800381c:	9b02      	ldr	r3, [sp, #8]
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	b01c      	add	sp, #112	; 0x70
 8003824:	f85d eb04 	ldr.w	lr, [sp], #4
 8003828:	b003      	add	sp, #12
 800382a:	4770      	bx	lr
 800382c:	20000048 	.word	0x20000048
 8003830:	ffff0208 	.word	0xffff0208

08003834 <__ssputs_r>:
 8003834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003838:	688e      	ldr	r6, [r1, #8]
 800383a:	429e      	cmp	r6, r3
 800383c:	4682      	mov	sl, r0
 800383e:	460c      	mov	r4, r1
 8003840:	4690      	mov	r8, r2
 8003842:	461f      	mov	r7, r3
 8003844:	d838      	bhi.n	80038b8 <__ssputs_r+0x84>
 8003846:	898a      	ldrh	r2, [r1, #12]
 8003848:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800384c:	d032      	beq.n	80038b4 <__ssputs_r+0x80>
 800384e:	6825      	ldr	r5, [r4, #0]
 8003850:	6909      	ldr	r1, [r1, #16]
 8003852:	eba5 0901 	sub.w	r9, r5, r1
 8003856:	6965      	ldr	r5, [r4, #20]
 8003858:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800385c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003860:	3301      	adds	r3, #1
 8003862:	444b      	add	r3, r9
 8003864:	106d      	asrs	r5, r5, #1
 8003866:	429d      	cmp	r5, r3
 8003868:	bf38      	it	cc
 800386a:	461d      	movcc	r5, r3
 800386c:	0553      	lsls	r3, r2, #21
 800386e:	d531      	bpl.n	80038d4 <__ssputs_r+0xa0>
 8003870:	4629      	mov	r1, r5
 8003872:	f000 fb63 	bl	8003f3c <_malloc_r>
 8003876:	4606      	mov	r6, r0
 8003878:	b950      	cbnz	r0, 8003890 <__ssputs_r+0x5c>
 800387a:	230c      	movs	r3, #12
 800387c:	f8ca 3000 	str.w	r3, [sl]
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	464a      	mov	r2, r9
 8003894:	f000 fabe 	bl	8003e14 <memcpy>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800389e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	6126      	str	r6, [r4, #16]
 80038a6:	6165      	str	r5, [r4, #20]
 80038a8:	444e      	add	r6, r9
 80038aa:	eba5 0509 	sub.w	r5, r5, r9
 80038ae:	6026      	str	r6, [r4, #0]
 80038b0:	60a5      	str	r5, [r4, #8]
 80038b2:	463e      	mov	r6, r7
 80038b4:	42be      	cmp	r6, r7
 80038b6:	d900      	bls.n	80038ba <__ssputs_r+0x86>
 80038b8:	463e      	mov	r6, r7
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	4632      	mov	r2, r6
 80038be:	4641      	mov	r1, r8
 80038c0:	f000 fab6 	bl	8003e30 <memmove>
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	1b9b      	subs	r3, r3, r6
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4433      	add	r3, r6
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	2000      	movs	r0, #0
 80038d2:	e7db      	b.n	800388c <__ssputs_r+0x58>
 80038d4:	462a      	mov	r2, r5
 80038d6:	f000 fba5 	bl	8004024 <_realloc_r>
 80038da:	4606      	mov	r6, r0
 80038dc:	2800      	cmp	r0, #0
 80038de:	d1e1      	bne.n	80038a4 <__ssputs_r+0x70>
 80038e0:	6921      	ldr	r1, [r4, #16]
 80038e2:	4650      	mov	r0, sl
 80038e4:	f000 fabe 	bl	8003e64 <_free_r>
 80038e8:	e7c7      	b.n	800387a <__ssputs_r+0x46>
	...

080038ec <_svfiprintf_r>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	4698      	mov	r8, r3
 80038f2:	898b      	ldrh	r3, [r1, #12]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	b09d      	sub	sp, #116	; 0x74
 80038f8:	4607      	mov	r7, r0
 80038fa:	460d      	mov	r5, r1
 80038fc:	4614      	mov	r4, r2
 80038fe:	d50e      	bpl.n	800391e <_svfiprintf_r+0x32>
 8003900:	690b      	ldr	r3, [r1, #16]
 8003902:	b963      	cbnz	r3, 800391e <_svfiprintf_r+0x32>
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	f000 fb19 	bl	8003f3c <_malloc_r>
 800390a:	6028      	str	r0, [r5, #0]
 800390c:	6128      	str	r0, [r5, #16]
 800390e:	b920      	cbnz	r0, 800391a <_svfiprintf_r+0x2e>
 8003910:	230c      	movs	r3, #12
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e0d1      	b.n	8003abe <_svfiprintf_r+0x1d2>
 800391a:	2340      	movs	r3, #64	; 0x40
 800391c:	616b      	str	r3, [r5, #20]
 800391e:	2300      	movs	r3, #0
 8003920:	9309      	str	r3, [sp, #36]	; 0x24
 8003922:	2320      	movs	r3, #32
 8003924:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003928:	f8cd 800c 	str.w	r8, [sp, #12]
 800392c:	2330      	movs	r3, #48	; 0x30
 800392e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ad8 <_svfiprintf_r+0x1ec>
 8003932:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003936:	f04f 0901 	mov.w	r9, #1
 800393a:	4623      	mov	r3, r4
 800393c:	469a      	mov	sl, r3
 800393e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003942:	b10a      	cbz	r2, 8003948 <_svfiprintf_r+0x5c>
 8003944:	2a25      	cmp	r2, #37	; 0x25
 8003946:	d1f9      	bne.n	800393c <_svfiprintf_r+0x50>
 8003948:	ebba 0b04 	subs.w	fp, sl, r4
 800394c:	d00b      	beq.n	8003966 <_svfiprintf_r+0x7a>
 800394e:	465b      	mov	r3, fp
 8003950:	4622      	mov	r2, r4
 8003952:	4629      	mov	r1, r5
 8003954:	4638      	mov	r0, r7
 8003956:	f7ff ff6d 	bl	8003834 <__ssputs_r>
 800395a:	3001      	adds	r0, #1
 800395c:	f000 80aa 	beq.w	8003ab4 <_svfiprintf_r+0x1c8>
 8003960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003962:	445a      	add	r2, fp
 8003964:	9209      	str	r2, [sp, #36]	; 0x24
 8003966:	f89a 3000 	ldrb.w	r3, [sl]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80a2 	beq.w	8003ab4 <_svfiprintf_r+0x1c8>
 8003970:	2300      	movs	r3, #0
 8003972:	f04f 32ff 	mov.w	r2, #4294967295
 8003976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800397a:	f10a 0a01 	add.w	sl, sl, #1
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	9307      	str	r3, [sp, #28]
 8003982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003986:	931a      	str	r3, [sp, #104]	; 0x68
 8003988:	4654      	mov	r4, sl
 800398a:	2205      	movs	r2, #5
 800398c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003990:	4851      	ldr	r0, [pc, #324]	; (8003ad8 <_svfiprintf_r+0x1ec>)
 8003992:	f7fc fc45 	bl	8000220 <memchr>
 8003996:	9a04      	ldr	r2, [sp, #16]
 8003998:	b9d8      	cbnz	r0, 80039d2 <_svfiprintf_r+0xe6>
 800399a:	06d0      	lsls	r0, r2, #27
 800399c:	bf44      	itt	mi
 800399e:	2320      	movmi	r3, #32
 80039a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a4:	0711      	lsls	r1, r2, #28
 80039a6:	bf44      	itt	mi
 80039a8:	232b      	movmi	r3, #43	; 0x2b
 80039aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ae:	f89a 3000 	ldrb.w	r3, [sl]
 80039b2:	2b2a      	cmp	r3, #42	; 0x2a
 80039b4:	d015      	beq.n	80039e2 <_svfiprintf_r+0xf6>
 80039b6:	9a07      	ldr	r2, [sp, #28]
 80039b8:	4654      	mov	r4, sl
 80039ba:	2000      	movs	r0, #0
 80039bc:	f04f 0c0a 	mov.w	ip, #10
 80039c0:	4621      	mov	r1, r4
 80039c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039c6:	3b30      	subs	r3, #48	; 0x30
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	d94e      	bls.n	8003a6a <_svfiprintf_r+0x17e>
 80039cc:	b1b0      	cbz	r0, 80039fc <_svfiprintf_r+0x110>
 80039ce:	9207      	str	r2, [sp, #28]
 80039d0:	e014      	b.n	80039fc <_svfiprintf_r+0x110>
 80039d2:	eba0 0308 	sub.w	r3, r0, r8
 80039d6:	fa09 f303 	lsl.w	r3, r9, r3
 80039da:	4313      	orrs	r3, r2
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	46a2      	mov	sl, r4
 80039e0:	e7d2      	b.n	8003988 <_svfiprintf_r+0x9c>
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	1d19      	adds	r1, r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	9103      	str	r1, [sp, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfbb      	ittet	lt
 80039ee:	425b      	neglt	r3, r3
 80039f0:	f042 0202 	orrlt.w	r2, r2, #2
 80039f4:	9307      	strge	r3, [sp, #28]
 80039f6:	9307      	strlt	r3, [sp, #28]
 80039f8:	bfb8      	it	lt
 80039fa:	9204      	strlt	r2, [sp, #16]
 80039fc:	7823      	ldrb	r3, [r4, #0]
 80039fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003a00:	d10c      	bne.n	8003a1c <_svfiprintf_r+0x130>
 8003a02:	7863      	ldrb	r3, [r4, #1]
 8003a04:	2b2a      	cmp	r3, #42	; 0x2a
 8003a06:	d135      	bne.n	8003a74 <_svfiprintf_r+0x188>
 8003a08:	9b03      	ldr	r3, [sp, #12]
 8003a0a:	1d1a      	adds	r2, r3, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	9203      	str	r2, [sp, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfb8      	it	lt
 8003a14:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a18:	3402      	adds	r4, #2
 8003a1a:	9305      	str	r3, [sp, #20]
 8003a1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ae8 <_svfiprintf_r+0x1fc>
 8003a20:	7821      	ldrb	r1, [r4, #0]
 8003a22:	2203      	movs	r2, #3
 8003a24:	4650      	mov	r0, sl
 8003a26:	f7fc fbfb 	bl	8000220 <memchr>
 8003a2a:	b140      	cbz	r0, 8003a3e <_svfiprintf_r+0x152>
 8003a2c:	2340      	movs	r3, #64	; 0x40
 8003a2e:	eba0 000a 	sub.w	r0, r0, sl
 8003a32:	fa03 f000 	lsl.w	r0, r3, r0
 8003a36:	9b04      	ldr	r3, [sp, #16]
 8003a38:	4303      	orrs	r3, r0
 8003a3a:	3401      	adds	r4, #1
 8003a3c:	9304      	str	r3, [sp, #16]
 8003a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a42:	4826      	ldr	r0, [pc, #152]	; (8003adc <_svfiprintf_r+0x1f0>)
 8003a44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a48:	2206      	movs	r2, #6
 8003a4a:	f7fc fbe9 	bl	8000220 <memchr>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d038      	beq.n	8003ac4 <_svfiprintf_r+0x1d8>
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <_svfiprintf_r+0x1f4>)
 8003a54:	bb1b      	cbnz	r3, 8003a9e <_svfiprintf_r+0x1b2>
 8003a56:	9b03      	ldr	r3, [sp, #12]
 8003a58:	3307      	adds	r3, #7
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	3308      	adds	r3, #8
 8003a60:	9303      	str	r3, [sp, #12]
 8003a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a64:	4433      	add	r3, r6
 8003a66:	9309      	str	r3, [sp, #36]	; 0x24
 8003a68:	e767      	b.n	800393a <_svfiprintf_r+0x4e>
 8003a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a6e:	460c      	mov	r4, r1
 8003a70:	2001      	movs	r0, #1
 8003a72:	e7a5      	b.n	80039c0 <_svfiprintf_r+0xd4>
 8003a74:	2300      	movs	r3, #0
 8003a76:	3401      	adds	r4, #1
 8003a78:	9305      	str	r3, [sp, #20]
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f04f 0c0a 	mov.w	ip, #10
 8003a80:	4620      	mov	r0, r4
 8003a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a86:	3a30      	subs	r2, #48	; 0x30
 8003a88:	2a09      	cmp	r2, #9
 8003a8a:	d903      	bls.n	8003a94 <_svfiprintf_r+0x1a8>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0c5      	beq.n	8003a1c <_svfiprintf_r+0x130>
 8003a90:	9105      	str	r1, [sp, #20]
 8003a92:	e7c3      	b.n	8003a1c <_svfiprintf_r+0x130>
 8003a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a98:	4604      	mov	r4, r0
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e7f0      	b.n	8003a80 <_svfiprintf_r+0x194>
 8003a9e:	ab03      	add	r3, sp, #12
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	462a      	mov	r2, r5
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <_svfiprintf_r+0x1f8>)
 8003aa6:	a904      	add	r1, sp, #16
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f3af 8000 	nop.w
 8003aae:	1c42      	adds	r2, r0, #1
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	d1d6      	bne.n	8003a62 <_svfiprintf_r+0x176>
 8003ab4:	89ab      	ldrh	r3, [r5, #12]
 8003ab6:	065b      	lsls	r3, r3, #25
 8003ab8:	f53f af2c 	bmi.w	8003914 <_svfiprintf_r+0x28>
 8003abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003abe:	b01d      	add	sp, #116	; 0x74
 8003ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac4:	ab03      	add	r3, sp, #12
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	462a      	mov	r2, r5
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <_svfiprintf_r+0x1f8>)
 8003acc:	a904      	add	r1, sp, #16
 8003ace:	4638      	mov	r0, r7
 8003ad0:	f000 f87a 	bl	8003bc8 <_printf_i>
 8003ad4:	e7eb      	b.n	8003aae <_svfiprintf_r+0x1c2>
 8003ad6:	bf00      	nop
 8003ad8:	08004104 	.word	0x08004104
 8003adc:	0800410e 	.word	0x0800410e
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	08003835 	.word	0x08003835
 8003ae8:	0800410a 	.word	0x0800410a

08003aec <_printf_common>:
 8003aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	4616      	mov	r6, r2
 8003af2:	4699      	mov	r9, r3
 8003af4:	688a      	ldr	r2, [r1, #8]
 8003af6:	690b      	ldr	r3, [r1, #16]
 8003af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bfb8      	it	lt
 8003b00:	4613      	movlt	r3, r2
 8003b02:	6033      	str	r3, [r6, #0]
 8003b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b08:	4607      	mov	r7, r0
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	b10a      	cbz	r2, 8003b12 <_printf_common+0x26>
 8003b0e:	3301      	adds	r3, #1
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	0699      	lsls	r1, r3, #26
 8003b16:	bf42      	ittt	mi
 8003b18:	6833      	ldrmi	r3, [r6, #0]
 8003b1a:	3302      	addmi	r3, #2
 8003b1c:	6033      	strmi	r3, [r6, #0]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	f015 0506 	ands.w	r5, r5, #6
 8003b24:	d106      	bne.n	8003b34 <_printf_common+0x48>
 8003b26:	f104 0a19 	add.w	sl, r4, #25
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	6832      	ldr	r2, [r6, #0]
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	42ab      	cmp	r3, r5
 8003b32:	dc26      	bgt.n	8003b82 <_printf_common+0x96>
 8003b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b38:	1e13      	subs	r3, r2, #0
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	bf18      	it	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	0692      	lsls	r2, r2, #26
 8003b42:	d42b      	bmi.n	8003b9c <_printf_common+0xb0>
 8003b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d01e      	beq.n	8003b90 <_printf_common+0xa4>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	68e5      	ldr	r5, [r4, #12]
 8003b56:	6832      	ldr	r2, [r6, #0]
 8003b58:	f003 0306 	and.w	r3, r3, #6
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	bf08      	it	eq
 8003b60:	1aad      	subeq	r5, r5, r2
 8003b62:	68a3      	ldr	r3, [r4, #8]
 8003b64:	6922      	ldr	r2, [r4, #16]
 8003b66:	bf0c      	ite	eq
 8003b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b6c:	2500      	movne	r5, #0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	bfc4      	itt	gt
 8003b72:	1a9b      	subgt	r3, r3, r2
 8003b74:	18ed      	addgt	r5, r5, r3
 8003b76:	2600      	movs	r6, #0
 8003b78:	341a      	adds	r4, #26
 8003b7a:	42b5      	cmp	r5, r6
 8003b7c:	d11a      	bne.n	8003bb4 <_printf_common+0xc8>
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e008      	b.n	8003b94 <_printf_common+0xa8>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4652      	mov	r2, sl
 8003b86:	4649      	mov	r1, r9
 8003b88:	4638      	mov	r0, r7
 8003b8a:	47c0      	blx	r8
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d103      	bne.n	8003b98 <_printf_common+0xac>
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b98:	3501      	adds	r5, #1
 8003b9a:	e7c6      	b.n	8003b2a <_printf_common+0x3e>
 8003b9c:	18e1      	adds	r1, r4, r3
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	2030      	movs	r0, #48	; 0x30
 8003ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ba6:	4422      	add	r2, r4
 8003ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	e7c7      	b.n	8003b44 <_printf_common+0x58>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	4649      	mov	r1, r9
 8003bba:	4638      	mov	r0, r7
 8003bbc:	47c0      	blx	r8
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d0e6      	beq.n	8003b90 <_printf_common+0xa4>
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7d9      	b.n	8003b7a <_printf_common+0x8e>
	...

08003bc8 <_printf_i>:
 8003bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	7e0f      	ldrb	r7, [r1, #24]
 8003bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bd0:	2f78      	cmp	r7, #120	; 0x78
 8003bd2:	4691      	mov	r9, r2
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	469a      	mov	sl, r3
 8003bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bde:	d807      	bhi.n	8003bf0 <_printf_i+0x28>
 8003be0:	2f62      	cmp	r7, #98	; 0x62
 8003be2:	d80a      	bhi.n	8003bfa <_printf_i+0x32>
 8003be4:	2f00      	cmp	r7, #0
 8003be6:	f000 80d8 	beq.w	8003d9a <_printf_i+0x1d2>
 8003bea:	2f58      	cmp	r7, #88	; 0x58
 8003bec:	f000 80a3 	beq.w	8003d36 <_printf_i+0x16e>
 8003bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bf8:	e03a      	b.n	8003c70 <_printf_i+0xa8>
 8003bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bfe:	2b15      	cmp	r3, #21
 8003c00:	d8f6      	bhi.n	8003bf0 <_printf_i+0x28>
 8003c02:	a101      	add	r1, pc, #4	; (adr r1, 8003c08 <_printf_i+0x40>)
 8003c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c75 	.word	0x08003c75
 8003c10:	08003bf1 	.word	0x08003bf1
 8003c14:	08003bf1 	.word	0x08003bf1
 8003c18:	08003bf1 	.word	0x08003bf1
 8003c1c:	08003bf1 	.word	0x08003bf1
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003bf1 	.word	0x08003bf1
 8003c28:	08003bf1 	.word	0x08003bf1
 8003c2c:	08003bf1 	.word	0x08003bf1
 8003c30:	08003bf1 	.word	0x08003bf1
 8003c34:	08003d81 	.word	0x08003d81
 8003c38:	08003ca5 	.word	0x08003ca5
 8003c3c:	08003d63 	.word	0x08003d63
 8003c40:	08003bf1 	.word	0x08003bf1
 8003c44:	08003bf1 	.word	0x08003bf1
 8003c48:	08003da3 	.word	0x08003da3
 8003c4c:	08003bf1 	.word	0x08003bf1
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003bf1 	.word	0x08003bf1
 8003c58:	08003bf1 	.word	0x08003bf1
 8003c5c:	08003d6b 	.word	0x08003d6b
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	602a      	str	r2, [r5, #0]
 8003c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0a3      	b.n	8003dbc <_printf_i+0x1f4>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	6829      	ldr	r1, [r5, #0]
 8003c78:	0606      	lsls	r6, r0, #24
 8003c7a:	f101 0304 	add.w	r3, r1, #4
 8003c7e:	d50a      	bpl.n	8003c96 <_printf_i+0xce>
 8003c80:	680e      	ldr	r6, [r1, #0]
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	da03      	bge.n	8003c90 <_printf_i+0xc8>
 8003c88:	232d      	movs	r3, #45	; 0x2d
 8003c8a:	4276      	negs	r6, r6
 8003c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c90:	485e      	ldr	r0, [pc, #376]	; (8003e0c <_printf_i+0x244>)
 8003c92:	230a      	movs	r3, #10
 8003c94:	e019      	b.n	8003cca <_printf_i+0x102>
 8003c96:	680e      	ldr	r6, [r1, #0]
 8003c98:	602b      	str	r3, [r5, #0]
 8003c9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c9e:	bf18      	it	ne
 8003ca0:	b236      	sxthne	r6, r6
 8003ca2:	e7ef      	b.n	8003c84 <_printf_i+0xbc>
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	6820      	ldr	r0, [r4, #0]
 8003ca8:	1d19      	adds	r1, r3, #4
 8003caa:	6029      	str	r1, [r5, #0]
 8003cac:	0601      	lsls	r1, r0, #24
 8003cae:	d501      	bpl.n	8003cb4 <_printf_i+0xec>
 8003cb0:	681e      	ldr	r6, [r3, #0]
 8003cb2:	e002      	b.n	8003cba <_printf_i+0xf2>
 8003cb4:	0646      	lsls	r6, r0, #25
 8003cb6:	d5fb      	bpl.n	8003cb0 <_printf_i+0xe8>
 8003cb8:	881e      	ldrh	r6, [r3, #0]
 8003cba:	4854      	ldr	r0, [pc, #336]	; (8003e0c <_printf_i+0x244>)
 8003cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2308      	moveq	r3, #8
 8003cc2:	230a      	movne	r3, #10
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cca:	6865      	ldr	r5, [r4, #4]
 8003ccc:	60a5      	str	r5, [r4, #8]
 8003cce:	2d00      	cmp	r5, #0
 8003cd0:	bfa2      	ittt	ge
 8003cd2:	6821      	ldrge	r1, [r4, #0]
 8003cd4:	f021 0104 	bicge.w	r1, r1, #4
 8003cd8:	6021      	strge	r1, [r4, #0]
 8003cda:	b90e      	cbnz	r6, 8003ce0 <_printf_i+0x118>
 8003cdc:	2d00      	cmp	r5, #0
 8003cde:	d04d      	beq.n	8003d7c <_printf_i+0x1b4>
 8003ce0:	4615      	mov	r5, r2
 8003ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8003cea:	5dc7      	ldrb	r7, [r0, r7]
 8003cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cf0:	4637      	mov	r7, r6
 8003cf2:	42bb      	cmp	r3, r7
 8003cf4:	460e      	mov	r6, r1
 8003cf6:	d9f4      	bls.n	8003ce2 <_printf_i+0x11a>
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d10b      	bne.n	8003d14 <_printf_i+0x14c>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	07de      	lsls	r6, r3, #31
 8003d00:	d508      	bpl.n	8003d14 <_printf_i+0x14c>
 8003d02:	6923      	ldr	r3, [r4, #16]
 8003d04:	6861      	ldr	r1, [r4, #4]
 8003d06:	4299      	cmp	r1, r3
 8003d08:	bfde      	ittt	le
 8003d0a:	2330      	movle	r3, #48	; 0x30
 8003d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d14:	1b52      	subs	r2, r2, r5
 8003d16:	6122      	str	r2, [r4, #16]
 8003d18:	f8cd a000 	str.w	sl, [sp]
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	aa03      	add	r2, sp, #12
 8003d20:	4621      	mov	r1, r4
 8003d22:	4640      	mov	r0, r8
 8003d24:	f7ff fee2 	bl	8003aec <_printf_common>
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d14c      	bne.n	8003dc6 <_printf_i+0x1fe>
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	b004      	add	sp, #16
 8003d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d36:	4835      	ldr	r0, [pc, #212]	; (8003e0c <_printf_i+0x244>)
 8003d38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d3c:	6829      	ldr	r1, [r5, #0]
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d44:	6029      	str	r1, [r5, #0]
 8003d46:	061d      	lsls	r5, r3, #24
 8003d48:	d514      	bpl.n	8003d74 <_printf_i+0x1ac>
 8003d4a:	07df      	lsls	r7, r3, #31
 8003d4c:	bf44      	itt	mi
 8003d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d52:	6023      	strmi	r3, [r4, #0]
 8003d54:	b91e      	cbnz	r6, 8003d5e <_printf_i+0x196>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	f023 0320 	bic.w	r3, r3, #32
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	2310      	movs	r3, #16
 8003d60:	e7b0      	b.n	8003cc4 <_printf_i+0xfc>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	f043 0320 	orr.w	r3, r3, #32
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	2378      	movs	r3, #120	; 0x78
 8003d6c:	4828      	ldr	r0, [pc, #160]	; (8003e10 <_printf_i+0x248>)
 8003d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d72:	e7e3      	b.n	8003d3c <_printf_i+0x174>
 8003d74:	0659      	lsls	r1, r3, #25
 8003d76:	bf48      	it	mi
 8003d78:	b2b6      	uxthmi	r6, r6
 8003d7a:	e7e6      	b.n	8003d4a <_printf_i+0x182>
 8003d7c:	4615      	mov	r5, r2
 8003d7e:	e7bb      	b.n	8003cf8 <_printf_i+0x130>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	6826      	ldr	r6, [r4, #0]
 8003d84:	6961      	ldr	r1, [r4, #20]
 8003d86:	1d18      	adds	r0, r3, #4
 8003d88:	6028      	str	r0, [r5, #0]
 8003d8a:	0635      	lsls	r5, r6, #24
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	d501      	bpl.n	8003d94 <_printf_i+0x1cc>
 8003d90:	6019      	str	r1, [r3, #0]
 8003d92:	e002      	b.n	8003d9a <_printf_i+0x1d2>
 8003d94:	0670      	lsls	r0, r6, #25
 8003d96:	d5fb      	bpl.n	8003d90 <_printf_i+0x1c8>
 8003d98:	8019      	strh	r1, [r3, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6123      	str	r3, [r4, #16]
 8003d9e:	4615      	mov	r5, r2
 8003da0:	e7ba      	b.n	8003d18 <_printf_i+0x150>
 8003da2:	682b      	ldr	r3, [r5, #0]
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	602a      	str	r2, [r5, #0]
 8003da8:	681d      	ldr	r5, [r3, #0]
 8003daa:	6862      	ldr	r2, [r4, #4]
 8003dac:	2100      	movs	r1, #0
 8003dae:	4628      	mov	r0, r5
 8003db0:	f7fc fa36 	bl	8000220 <memchr>
 8003db4:	b108      	cbz	r0, 8003dba <_printf_i+0x1f2>
 8003db6:	1b40      	subs	r0, r0, r5
 8003db8:	6060      	str	r0, [r4, #4]
 8003dba:	6863      	ldr	r3, [r4, #4]
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc4:	e7a8      	b.n	8003d18 <_printf_i+0x150>
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	462a      	mov	r2, r5
 8003dca:	4649      	mov	r1, r9
 8003dcc:	4640      	mov	r0, r8
 8003dce:	47d0      	blx	sl
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d0ab      	beq.n	8003d2c <_printf_i+0x164>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	079b      	lsls	r3, r3, #30
 8003dd8:	d413      	bmi.n	8003e02 <_printf_i+0x23a>
 8003dda:	68e0      	ldr	r0, [r4, #12]
 8003ddc:	9b03      	ldr	r3, [sp, #12]
 8003dde:	4298      	cmp	r0, r3
 8003de0:	bfb8      	it	lt
 8003de2:	4618      	movlt	r0, r3
 8003de4:	e7a4      	b.n	8003d30 <_printf_i+0x168>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4632      	mov	r2, r6
 8003dea:	4649      	mov	r1, r9
 8003dec:	4640      	mov	r0, r8
 8003dee:	47d0      	blx	sl
 8003df0:	3001      	adds	r0, #1
 8003df2:	d09b      	beq.n	8003d2c <_printf_i+0x164>
 8003df4:	3501      	adds	r5, #1
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	9903      	ldr	r1, [sp, #12]
 8003dfa:	1a5b      	subs	r3, r3, r1
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	dcf2      	bgt.n	8003de6 <_printf_i+0x21e>
 8003e00:	e7eb      	b.n	8003dda <_printf_i+0x212>
 8003e02:	2500      	movs	r5, #0
 8003e04:	f104 0619 	add.w	r6, r4, #25
 8003e08:	e7f5      	b.n	8003df6 <_printf_i+0x22e>
 8003e0a:	bf00      	nop
 8003e0c:	08004115 	.word	0x08004115
 8003e10:	08004126 	.word	0x08004126

08003e14 <memcpy>:
 8003e14:	440a      	add	r2, r1
 8003e16:	4291      	cmp	r1, r2
 8003e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e1c:	d100      	bne.n	8003e20 <memcpy+0xc>
 8003e1e:	4770      	bx	lr
 8003e20:	b510      	push	{r4, lr}
 8003e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e2a:	4291      	cmp	r1, r2
 8003e2c:	d1f9      	bne.n	8003e22 <memcpy+0xe>
 8003e2e:	bd10      	pop	{r4, pc}

08003e30 <memmove>:
 8003e30:	4288      	cmp	r0, r1
 8003e32:	b510      	push	{r4, lr}
 8003e34:	eb01 0402 	add.w	r4, r1, r2
 8003e38:	d902      	bls.n	8003e40 <memmove+0x10>
 8003e3a:	4284      	cmp	r4, r0
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	d807      	bhi.n	8003e50 <memmove+0x20>
 8003e40:	1e43      	subs	r3, r0, #1
 8003e42:	42a1      	cmp	r1, r4
 8003e44:	d008      	beq.n	8003e58 <memmove+0x28>
 8003e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e4e:	e7f8      	b.n	8003e42 <memmove+0x12>
 8003e50:	4402      	add	r2, r0
 8003e52:	4601      	mov	r1, r0
 8003e54:	428a      	cmp	r2, r1
 8003e56:	d100      	bne.n	8003e5a <memmove+0x2a>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e62:	e7f7      	b.n	8003e54 <memmove+0x24>

08003e64 <_free_r>:
 8003e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e66:	2900      	cmp	r1, #0
 8003e68:	d044      	beq.n	8003ef4 <_free_r+0x90>
 8003e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e6e:	9001      	str	r0, [sp, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f1a1 0404 	sub.w	r4, r1, #4
 8003e76:	bfb8      	it	lt
 8003e78:	18e4      	addlt	r4, r4, r3
 8003e7a:	f000 f913 	bl	80040a4 <__malloc_lock>
 8003e7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ef8 <_free_r+0x94>)
 8003e80:	9801      	ldr	r0, [sp, #4]
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	b933      	cbnz	r3, 8003e94 <_free_r+0x30>
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	6014      	str	r4, [r2, #0]
 8003e8a:	b003      	add	sp, #12
 8003e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e90:	f000 b90e 	b.w	80040b0 <__malloc_unlock>
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d908      	bls.n	8003eaa <_free_r+0x46>
 8003e98:	6825      	ldr	r5, [r4, #0]
 8003e9a:	1961      	adds	r1, r4, r5
 8003e9c:	428b      	cmp	r3, r1
 8003e9e:	bf01      	itttt	eq
 8003ea0:	6819      	ldreq	r1, [r3, #0]
 8003ea2:	685b      	ldreq	r3, [r3, #4]
 8003ea4:	1949      	addeq	r1, r1, r5
 8003ea6:	6021      	streq	r1, [r4, #0]
 8003ea8:	e7ed      	b.n	8003e86 <_free_r+0x22>
 8003eaa:	461a      	mov	r2, r3
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b10b      	cbz	r3, 8003eb4 <_free_r+0x50>
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	d9fa      	bls.n	8003eaa <_free_r+0x46>
 8003eb4:	6811      	ldr	r1, [r2, #0]
 8003eb6:	1855      	adds	r5, r2, r1
 8003eb8:	42a5      	cmp	r5, r4
 8003eba:	d10b      	bne.n	8003ed4 <_free_r+0x70>
 8003ebc:	6824      	ldr	r4, [r4, #0]
 8003ebe:	4421      	add	r1, r4
 8003ec0:	1854      	adds	r4, r2, r1
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	d1e0      	bne.n	8003e8a <_free_r+0x26>
 8003ec8:	681c      	ldr	r4, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	6053      	str	r3, [r2, #4]
 8003ece:	4421      	add	r1, r4
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	e7da      	b.n	8003e8a <_free_r+0x26>
 8003ed4:	d902      	bls.n	8003edc <_free_r+0x78>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	6003      	str	r3, [r0, #0]
 8003eda:	e7d6      	b.n	8003e8a <_free_r+0x26>
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1961      	adds	r1, r4, r5
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	bf04      	itt	eq
 8003ee4:	6819      	ldreq	r1, [r3, #0]
 8003ee6:	685b      	ldreq	r3, [r3, #4]
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	bf04      	itt	eq
 8003eec:	1949      	addeq	r1, r1, r5
 8003eee:	6021      	streq	r1, [r4, #0]
 8003ef0:	6054      	str	r4, [r2, #4]
 8003ef2:	e7ca      	b.n	8003e8a <_free_r+0x26>
 8003ef4:	b003      	add	sp, #12
 8003ef6:	bd30      	pop	{r4, r5, pc}
 8003ef8:	2000509c 	.word	0x2000509c

08003efc <sbrk_aligned>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4e0e      	ldr	r6, [pc, #56]	; (8003f38 <sbrk_aligned+0x3c>)
 8003f00:	460c      	mov	r4, r1
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	4605      	mov	r5, r0
 8003f06:	b911      	cbnz	r1, 8003f0e <sbrk_aligned+0x12>
 8003f08:	f000 f8bc 	bl	8004084 <_sbrk_r>
 8003f0c:	6030      	str	r0, [r6, #0]
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	f000 f8b7 	bl	8004084 <_sbrk_r>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d00a      	beq.n	8003f30 <sbrk_aligned+0x34>
 8003f1a:	1cc4      	adds	r4, r0, #3
 8003f1c:	f024 0403 	bic.w	r4, r4, #3
 8003f20:	42a0      	cmp	r0, r4
 8003f22:	d007      	beq.n	8003f34 <sbrk_aligned+0x38>
 8003f24:	1a21      	subs	r1, r4, r0
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 f8ac 	bl	8004084 <_sbrk_r>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d101      	bne.n	8003f34 <sbrk_aligned+0x38>
 8003f30:	f04f 34ff 	mov.w	r4, #4294967295
 8003f34:	4620      	mov	r0, r4
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	200050a0 	.word	0x200050a0

08003f3c <_malloc_r>:
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	1ccd      	adds	r5, r1, #3
 8003f42:	f025 0503 	bic.w	r5, r5, #3
 8003f46:	3508      	adds	r5, #8
 8003f48:	2d0c      	cmp	r5, #12
 8003f4a:	bf38      	it	cc
 8003f4c:	250c      	movcc	r5, #12
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	4607      	mov	r7, r0
 8003f52:	db01      	blt.n	8003f58 <_malloc_r+0x1c>
 8003f54:	42a9      	cmp	r1, r5
 8003f56:	d905      	bls.n	8003f64 <_malloc_r+0x28>
 8003f58:	230c      	movs	r3, #12
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	4630      	mov	r0, r6
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	4e2e      	ldr	r6, [pc, #184]	; (8004020 <_malloc_r+0xe4>)
 8003f66:	f000 f89d 	bl	80040a4 <__malloc_lock>
 8003f6a:	6833      	ldr	r3, [r6, #0]
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	bb34      	cbnz	r4, 8003fbe <_malloc_r+0x82>
 8003f70:	4629      	mov	r1, r5
 8003f72:	4638      	mov	r0, r7
 8003f74:	f7ff ffc2 	bl	8003efc <sbrk_aligned>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	d14d      	bne.n	800401a <_malloc_r+0xde>
 8003f7e:	6834      	ldr	r4, [r6, #0]
 8003f80:	4626      	mov	r6, r4
 8003f82:	2e00      	cmp	r6, #0
 8003f84:	d140      	bne.n	8004008 <_malloc_r+0xcc>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	4631      	mov	r1, r6
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	eb04 0803 	add.w	r8, r4, r3
 8003f90:	f000 f878 	bl	8004084 <_sbrk_r>
 8003f94:	4580      	cmp	r8, r0
 8003f96:	d13a      	bne.n	800400e <_malloc_r+0xd2>
 8003f98:	6821      	ldr	r1, [r4, #0]
 8003f9a:	3503      	adds	r5, #3
 8003f9c:	1a6d      	subs	r5, r5, r1
 8003f9e:	f025 0503 	bic.w	r5, r5, #3
 8003fa2:	3508      	adds	r5, #8
 8003fa4:	2d0c      	cmp	r5, #12
 8003fa6:	bf38      	it	cc
 8003fa8:	250c      	movcc	r5, #12
 8003faa:	4629      	mov	r1, r5
 8003fac:	4638      	mov	r0, r7
 8003fae:	f7ff ffa5 	bl	8003efc <sbrk_aligned>
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d02b      	beq.n	800400e <_malloc_r+0xd2>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	442b      	add	r3, r5
 8003fba:	6023      	str	r3, [r4, #0]
 8003fbc:	e00e      	b.n	8003fdc <_malloc_r+0xa0>
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	1b52      	subs	r2, r2, r5
 8003fc2:	d41e      	bmi.n	8004002 <_malloc_r+0xc6>
 8003fc4:	2a0b      	cmp	r2, #11
 8003fc6:	d916      	bls.n	8003ff6 <_malloc_r+0xba>
 8003fc8:	1961      	adds	r1, r4, r5
 8003fca:	42a3      	cmp	r3, r4
 8003fcc:	6025      	str	r5, [r4, #0]
 8003fce:	bf18      	it	ne
 8003fd0:	6059      	strne	r1, [r3, #4]
 8003fd2:	6863      	ldr	r3, [r4, #4]
 8003fd4:	bf08      	it	eq
 8003fd6:	6031      	streq	r1, [r6, #0]
 8003fd8:	5162      	str	r2, [r4, r5]
 8003fda:	604b      	str	r3, [r1, #4]
 8003fdc:	4638      	mov	r0, r7
 8003fde:	f104 060b 	add.w	r6, r4, #11
 8003fe2:	f000 f865 	bl	80040b0 <__malloc_unlock>
 8003fe6:	f026 0607 	bic.w	r6, r6, #7
 8003fea:	1d23      	adds	r3, r4, #4
 8003fec:	1af2      	subs	r2, r6, r3
 8003fee:	d0b6      	beq.n	8003f5e <_malloc_r+0x22>
 8003ff0:	1b9b      	subs	r3, r3, r6
 8003ff2:	50a3      	str	r3, [r4, r2]
 8003ff4:	e7b3      	b.n	8003f5e <_malloc_r+0x22>
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	bf0c      	ite	eq
 8003ffc:	6032      	streq	r2, [r6, #0]
 8003ffe:	605a      	strne	r2, [r3, #4]
 8004000:	e7ec      	b.n	8003fdc <_malloc_r+0xa0>
 8004002:	4623      	mov	r3, r4
 8004004:	6864      	ldr	r4, [r4, #4]
 8004006:	e7b2      	b.n	8003f6e <_malloc_r+0x32>
 8004008:	4634      	mov	r4, r6
 800400a:	6876      	ldr	r6, [r6, #4]
 800400c:	e7b9      	b.n	8003f82 <_malloc_r+0x46>
 800400e:	230c      	movs	r3, #12
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4638      	mov	r0, r7
 8004014:	f000 f84c 	bl	80040b0 <__malloc_unlock>
 8004018:	e7a1      	b.n	8003f5e <_malloc_r+0x22>
 800401a:	6025      	str	r5, [r4, #0]
 800401c:	e7de      	b.n	8003fdc <_malloc_r+0xa0>
 800401e:	bf00      	nop
 8004020:	2000509c 	.word	0x2000509c

08004024 <_realloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	4680      	mov	r8, r0
 800402a:	4614      	mov	r4, r2
 800402c:	460e      	mov	r6, r1
 800402e:	b921      	cbnz	r1, 800403a <_realloc_r+0x16>
 8004030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004034:	4611      	mov	r1, r2
 8004036:	f7ff bf81 	b.w	8003f3c <_malloc_r>
 800403a:	b92a      	cbnz	r2, 8004048 <_realloc_r+0x24>
 800403c:	f7ff ff12 	bl	8003e64 <_free_r>
 8004040:	4625      	mov	r5, r4
 8004042:	4628      	mov	r0, r5
 8004044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004048:	f000 f838 	bl	80040bc <_malloc_usable_size_r>
 800404c:	4284      	cmp	r4, r0
 800404e:	4607      	mov	r7, r0
 8004050:	d802      	bhi.n	8004058 <_realloc_r+0x34>
 8004052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004056:	d812      	bhi.n	800407e <_realloc_r+0x5a>
 8004058:	4621      	mov	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff ff6e 	bl	8003f3c <_malloc_r>
 8004060:	4605      	mov	r5, r0
 8004062:	2800      	cmp	r0, #0
 8004064:	d0ed      	beq.n	8004042 <_realloc_r+0x1e>
 8004066:	42bc      	cmp	r4, r7
 8004068:	4622      	mov	r2, r4
 800406a:	4631      	mov	r1, r6
 800406c:	bf28      	it	cs
 800406e:	463a      	movcs	r2, r7
 8004070:	f7ff fed0 	bl	8003e14 <memcpy>
 8004074:	4631      	mov	r1, r6
 8004076:	4640      	mov	r0, r8
 8004078:	f7ff fef4 	bl	8003e64 <_free_r>
 800407c:	e7e1      	b.n	8004042 <_realloc_r+0x1e>
 800407e:	4635      	mov	r5, r6
 8004080:	e7df      	b.n	8004042 <_realloc_r+0x1e>
	...

08004084 <_sbrk_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d06      	ldr	r5, [pc, #24]	; (80040a0 <_sbrk_r+0x1c>)
 8004088:	2300      	movs	r3, #0
 800408a:	4604      	mov	r4, r0
 800408c:	4608      	mov	r0, r1
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f7fc fefa 	bl	8000e88 <_sbrk>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_sbrk_r+0x1a>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_sbrk_r+0x1a>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	200050a4 	.word	0x200050a4

080040a4 <__malloc_lock>:
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <__malloc_lock+0x8>)
 80040a6:	f000 b811 	b.w	80040cc <__retarget_lock_acquire_recursive>
 80040aa:	bf00      	nop
 80040ac:	200050a8 	.word	0x200050a8

080040b0 <__malloc_unlock>:
 80040b0:	4801      	ldr	r0, [pc, #4]	; (80040b8 <__malloc_unlock+0x8>)
 80040b2:	f000 b80c 	b.w	80040ce <__retarget_lock_release_recursive>
 80040b6:	bf00      	nop
 80040b8:	200050a8 	.word	0x200050a8

080040bc <_malloc_usable_size_r>:
 80040bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c0:	1f18      	subs	r0, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfbc      	itt	lt
 80040c6:	580b      	ldrlt	r3, [r1, r0]
 80040c8:	18c0      	addlt	r0, r0, r3
 80040ca:	4770      	bx	lr

080040cc <__retarget_lock_acquire_recursive>:
 80040cc:	4770      	bx	lr

080040ce <__retarget_lock_release_recursive>:
 80040ce:	4770      	bx	lr

080040d0 <_init>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr

080040dc <_fini>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	bf00      	nop
 80040e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e2:	bc08      	pop	{r3}
 80040e4:	469e      	mov	lr, r3
 80040e6:	4770      	bx	lr
